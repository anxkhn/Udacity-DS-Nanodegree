WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:05.610
在此 notebook 中 你将学习不同的相似性和距离衡量方法

00:00:05.610 --> 00:00:11.710
这个 notebook 主要检测从数学概念到代码的转换能力

00:00:11.710 --> 00:00:15.480
在数学概念和代码之间相互转换

00:00:15.480 --> 00:00:18.060
是一项很重要的技能

00:00:18.059 --> 00:00:21.239
使你能够更加灵活地创建自己的模型

00:00:21.239 --> 00:00:25.274
下面我们将学习几种最热门的技巧

00:00:25.274 --> 00:00:29.509
在顶部 我列出了我们将学习的三种相似性衡量方法

00:00:29.510 --> 00:00:31.920
一个是皮尔逊相关系数

00:00:31.920 --> 00:00:34.145
另一个是斯皮尔曼相关系数

00:00:34.145 --> 00:00:35.610
第三个是 Kendall's Tau 相关系数

00:00:35.609 --> 00:00:39.155
皮尔逊相关系数的方程是这样的

00:00:39.155 --> 00:00:42.950
第一项任务是

00:00:42.950 --> 00:00:46.685
计算任何两个数组的皮尔逊相关系数

00:00:46.685 --> 00:00:48.365
首先

00:00:48.365 --> 00:00:53.570
我需要计算每个观察量或每个数组的均值

00:00:53.570 --> 00:00:55.384
我将创建

00:00:55.384 --> 00:00:58.909
mean_x 和 mean_y

00:00:58.909 --> 00:01:05.840
等于 x 的和除以 x 的长度

00:01:05.840 --> 00:01:08.365
也就是这个公式

00:01:08.364 --> 00:01:10.939
x 的均值将等于这个

00:01:10.939 --> 00:01:13.799
也可以创建单独的函数

00:01:13.799 --> 00:01:16.869
算出两个数组的均值后

00:01:16.870 --> 00:01:22.240
下面需要计算这些部分

00:01:22.239 --> 00:01:25.579
这部分在方程里出现了多次

00:01:25.579 --> 00:01:29.034
也就是 y -(y

00:01:29.034 --> 00:01:31.435
和 x - (x

00:01:31.435 --> 00:01:37.284
如果 x 和 y 是数组

00:01:37.284 --> 00:01:42.304
计算方法是用数组减去均值

00:01:42.305 --> 00:01:45.550
称为 x_diffs

00:01:45.549 --> 00:01:52.500
这个称为 y_diffs 计算方法一样

00:01:53.709 --> 00:01:57.674
设置方法和上面一样

00:01:57.674 --> 00:02:03.090
y_diffs...

00:02:03.090 --> 00:02:04.170
将这部分剪切到这里

00:02:04.170 --> 00:02:08.520
Great

00:02:08.520 --> 00:02:11.515
好的算出这些差值后

00:02:11.514 --> 00:02:12.989
我们可以计算剩余部分了

00:02:12.990 --> 00:02:17.480
在分子中 对于这个数组里的每个元素

00:02:17.479 --> 00:02:18.694
我们都会将该元素

00:02:18.694 --> 00:02:23.069
与 y_diffs 数组中相同索引处的元素相乘

00:02:23.069 --> 00:02:24.525
然后求和

00:02:24.525 --> 00:02:27.590
这就是分子部分的计算方法

00:02:27.590 --> 00:02:33.765
输入 np.sum(x_diffs)

00:02:33.764 --> 00:02:38.064
对应的是这一部分

00:02:38.064 --> 00:02:43.359
乘以 y_diffs好的

00:02:43.360 --> 00:02:45.480
然后对它们求和

00:02:45.479 --> 00:02:52.234
接着求 x_diffs 的平方

00:02:52.235 --> 00:02:55.700
然后求和

00:02:56.330 --> 00:02:59.520
再求平方根

00:02:59.520 --> 00:03:04.010
对应的是这部分

00:03:04.009 --> 00:03:12.449
这部分也一样 不过替换成 y

00:03:13.909 --> 00:03:24.629
好的我将确保...这并不重要

00:03:24.629 --> 00:03:30.579
对这两个运行 np.sum()

00:03:30.580 --> 00:03:35.000
分母的计算方法是

00:03:35.000 --> 00:03:38.330
对这些项求平方和

00:03:38.330 --> 00:03:42.540
接着求平方根 然后对 y 进行相同的计算

00:03:42.539 --> 00:03:49.625
这就是我们要返回的相关系数

00:03:49.625 --> 00:03:51.969
下面是测试单元格

00:03:51.969 --> 00:03:54.719
我们通过了所有测试

00:03:54.719 --> 00:03:57.699
计算了皮尔逊相关系数后

00:03:57.699 --> 00:03:59.605
我们来回答几个问题

00:03:59.604 --> 00:04:01.719
如果 x 增大 y 也增大

00:04:01.719 --> 00:04:04.889
那么皮尔逊相关系数始终为 1

00:04:04.889 --> 00:04:06.134
这句话不对

00:04:06.134 --> 00:04:11.929
有时候会增大 但不是一条直线

00:04:11.930 --> 00:04:16.689
皮尔逊相关系数始终由一条线定义

00:04:16.689 --> 00:04:19.139
如果按照二项式关系增大

00:04:19.139 --> 00:04:20.534
这个表述就正确

00:04:20.535 --> 00:04:22.360
但是皮尔逊相关系数并非始终为 1

00:04:22.360 --> 00:04:24.449
如果当 x 增加 1 时 y 始终增加 3

00:04:24.449 --> 00:04:27.349
那么相关系数为 1

00:04:27.350 --> 00:04:29.085
这句话实际上正确

00:04:29.084 --> 00:04:34.229
Great.所以这句话正确

00:04:34.230 --> 00:04:37.100
这是一条线当 x 增加 1 时

00:04:37.100 --> 00:04:38.295
y 增加 3

00:04:38.295 --> 00:04:39.535
当 x 增加 1 时 y 增加 3

00:04:39.535 --> 00:04:42.980
这句话是正确的

00:04:42.980 --> 00:04:45.935
同理 如果 x 增加 1

00:04:45.935 --> 00:04:48.064
y 始终减 5

00:04:48.064 --> 00:04:49.610
那么皮尔逊系数将为 -1

00:04:49.610 --> 00:04:51.220
这句话也正确

00:04:51.220 --> 00:04:52.775
这是另一条线

00:04:52.774 --> 00:04:55.574
将创建另一条线

00:04:55.574 --> 00:04:58.089
如果 x 增加 1

00:04:58.089 --> 00:05:00.844
y 增加 3x

00:05:00.845 --> 00:05:02.505
这不再是直线

00:05:02.504 --> 00:05:07.519
属于这里的其中一种情形

00:05:07.519 --> 00:05:12.029
这句话不正确

00:05:13.149 --> 00:05:16.954
好的答案是 b

00:05:16.954 --> 00:05:19.620
下面解释了原因

