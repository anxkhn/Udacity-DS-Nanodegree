WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.930
清理了 movies 和 reviews 数据集后

00:00:03.930 --> 00:00:06.300
下面我们创建第一种推荐系统吧

00:00:06.299 --> 00:00:11.094
我创建了一个辅助函数

00:00:11.095 --> 00:00:14.155
称之为 create_ranked_df

00:00:14.154 --> 00:00:17.274
它会接受 movies 和 reviews DataFrame

00:00:17.274 --> 00:00:20.570
并返回 ranked_movies

00:00:20.570 --> 00:00:22.559
然后将 ranked_movies

00:00:22.559 --> 00:00:25.674
传递给 popular_recommendations

00:00:25.675 --> 00:00:32.365
我创建了这个 create_ranked_df 函数 它会接受 movies 和 reviews

00:00:32.365 --> 00:00:38.750
我想返回一个 ranked_movies DataFrame

00:00:38.750 --> 00:00:44.939
并将其传递到这里

00:00:44.939 --> 00:00:49.909
popular_recommendations 将提取这些部分

00:00:49.909 --> 00:00:55.125
我需要在此函数里实现这些标准

00:00:55.125 --> 00:00:57.134
我将输入这两个数据集

00:00:57.134 --> 00:01:00.994
然后在此函数里实现这些部分

00:01:00.994 --> 00:01:04.939
首先我将创建这个 movie_ratings 对象

00:01:04.939 --> 00:01:09.064
它会根据 movie_id 对电影分组

00:01:09.064 --> 00:01:11.329
在创建这些函数时

00:01:11.329 --> 00:01:14.000
通常我会将很多工作放到函数外面

00:01:14.000 --> 00:01:16.859
然后在知道发生什么时再移进来

00:01:16.859 --> 00:01:19.310
获取 reviews

00:01:19.310 --> 00:01:21.760
再看看该数据集

00:01:22.159 --> 00:01:25.104
糟糕 读取下数据集

00:01:25.105 --> 00:01:29.969
看看此数据集的标题行

00:01:29.969 --> 00:01:32.914
对于每部电影

00:01:32.915 --> 00:01:35.815
我都要查看平均评分

00:01:35.814 --> 00:01:37.185
也就是第一个标准

00:01:37.185 --> 00:01:39.954
我要获取平均评分最高的电影

00:01:39.954 --> 00:01:41.299
对于每部电影

00:01:41.299 --> 00:01:44.884
我将这些组合到一起 并获取平均评分最高的电影

00:01:44.885 --> 00:01:47.155
按照 movie_id 分组

00:01:47.155 --> 00:01:51.159
我对这个评分部分很感兴趣

00:01:51.159 --> 00:01:56.604
所以将它存储到 movie_ratings 中

00:01:56.605 --> 00:02:00.984
现在它将是一个 groupby 对象

00:02:00.984 --> 00:02:02.525
但是我可以对它执行很多操作

00:02:02.525 --> 00:02:05.150
例如 可以求均值

00:02:05.150 --> 00:02:09.625
这样就能得出每部电影的平均评分

00:02:09.625 --> 00:02:12.525
或者运行 count()

00:02:12.525 --> 00:02:17.129
这样就能获得这个电影的评分次数

00:02:17.129 --> 00:02:20.625
可以看到 这个电影被评分 417 次

00:02:20.625 --> 00:02:22.264
这个被评分 2 次

00:02:22.264 --> 00:02:24.294
很多电影只有 1 个评分

00:02:24.294 --> 00:02:34.109
现在将这行代码放入函数中

00:02:34.110 --> 00:02:39.540
我将创建这个 avg_ratings

00:02:41.349 --> 00:02:43.664
它等于刚刚看到的均值

00:02:43.664 --> 00:02:46.644
然后创建 num_ratings

00:02:46.645 --> 00:02:50.010
它等于刚刚看到的计数

00:02:52.699 --> 00:02:57.125
这个可以获取最高平均评分

00:02:57.125 --> 00:03:00.469
然后是评分更多的电影更好这条标准

00:03:00.469 --> 00:03:04.125
这个计数将跟踪有多少条评分

00:03:04.125 --> 00:03:07.210
还需要评分至少达到 5 条

00:03:07.210 --> 00:03:10.224
这条标准需要用到 num_ratings

00:03:10.224 --> 00:03:12.775
如果平均评分和评分计数一样

00:03:12.775 --> 00:03:16.655
那么需要根据新近情况排序

00:03:16.655 --> 00:03:21.275
所以我需要知道电影评分的新近情况

00:03:21.275 --> 00:03:24.805
依然需要根据 movie_id 分组

00:03:24.805 --> 00:03:30.599
然后查看日期列的最大值

00:03:33.949 --> 00:03:38.294
这个 max() 会提取最近的电影

00:03:38.294 --> 00:03:40.319
这里有点难理解

00:03:40.319 --> 00:03:44.030
min() 表示最早的电影 max() 表示最新的电影

00:03:44.030 --> 00:03:48.650
如果两部电影的平均评分和评分数量一样

00:03:48.650 --> 00:03:53.319
这部分信息能够告诉我们如何排序

00:03:53.319 --> 00:03:55.745
或许两部电影的平均评分都是 10 分

00:03:55.745 --> 00:03:57.500
但是评分都只有一条

00:03:57.500 --> 00:04:04.030
那么评分最新的电影排名更高

00:04:04.030 --> 00:04:07.659
我将利用该信息

00:04:07.939 --> 00:04:10.210
我们来看看

00:04:10.210 --> 00:04:19.740
我将使用此信息

00:04:20.060 --> 00:04:24.790
然后将所有这些信息合并到一起

00:04:24.790 --> 00:04:30.660
我将创建这个 ratings_count_df

00:04:32.779 --> 00:04:38.729
它有一列是平均评分

00:04:38.730 --> 00:04:40.194
平均电影评分

00:04:40.194 --> 00:04:41.849
我将称为 avg_rating

00:04:41.850 --> 00:04:46.240
然后提取在这里创建的 avg_ratings

00:04:47.569 --> 00:04:56.784
另一列是 num_ratings 它将提取这些值

00:04:56.785 --> 00:04:59.320
可以想象这个 DataFrame 是什么样的

00:04:59.319 --> 00:05:01.074
它有一个这样的列

00:05:01.074 --> 00:05:02.740
还有一个这样的列

00:05:02.740 --> 00:05:06.560
并且存储了我们创建的这些值

00:05:06.560 --> 00:05:09.370
对于我们的提取方式

00:05:09.370 --> 00:05:12.975
遗憾的是 不能直接这样添加这些值

00:05:12.975 --> 00:05:19.060
我将在这里创建一个 DataFrame

00:05:19.060 --> 00:05:22.655
然后创建列名称

00:05:22.654 --> 00:05:30.019
使其与这里的完全一样 保持一致

00:05:30.019 --> 00:05:32.524
这行代码将创建这个 DataFrame

00:05:32.524 --> 00:05:35.685
它的 ID 为 movie_id

00:05:35.685 --> 00:05:40.519
这是它的索引

00:05:40.519 --> 00:05:43.729
这列将存储所有最后的评分

00:05:43.730 --> 00:05:46.970
也就是列标题为 last_rating 的列中的日期

00:05:46.970 --> 00:05:51.335
在这里 我将这个 DataFrame

00:05:51.334 --> 00:05:58.784
与 last_rating DataFrame 连接到一起

00:05:58.785 --> 00:06:01.310
我将刚刚创建的这个 DataFrame

00:06:01.310 --> 00:06:04.925
与在这里创建的 DataFrame 相连接

00:06:04.925 --> 00:06:06.379
在连接时

00:06:06.379 --> 00:06:09.649
它会查看相同的索引

00:06:09.649 --> 00:06:13.664
行上的索引要一样 将二者匹配到一起

00:06:13.665 --> 00:06:16.220
你可能会疑问

00:06:16.220 --> 00:06:19.030
刚刚对 reviews 执行的所有这些操作已经处理了所有这些标准

00:06:19.029 --> 00:06:20.869
为何还需要 movies 数据集

00:06:20.870 --> 00:06:23.990
原因是为了提取电影信息

00:06:23.990 --> 00:06:26.780
我们将使用刚刚创建的这些新列

00:06:26.779 --> 00:06:30.259
根据这些标准对电影排序

00:06:30.259 --> 00:06:35.194
然后从 movies DataFrame 提取信息 例如标题

00:06:35.194 --> 00:06:40.605
并将这些信息传递给 popular_recommendations 函数

00:06:40.605 --> 00:06:43.790
我们需要连接 movies DataFrame

00:06:43.790 --> 00:06:46.879
为了像之前一样连接两个 DataFrame

00:06:46.879 --> 00:06:49.089
我将索引设为 movie_id

00:06:49.089 --> 00:06:56.014
我们将像这里的连接方式那样

00:06:56.014 --> 00:06:59.379
将这两个连接到一起

00:06:59.389 --> 00:07:04.050
我们将这个新的 movies DataFrame 与这个连接到一起

00:07:04.050 --> 00:07:09.629
索引为 movie_id 因为这个的索引也一样

00:07:09.879 --> 00:07:15.149
称之为 movie_recs

00:07:23.490 --> 00:07:26.204
看看这个表格的标题

00:07:26.204 --> 00:07:29.754
它有一个 movie_id 这个也有相同的 movie_id

00:07:29.754 --> 00:07:33.319
我们将根据 movie_id 将这两个表格连接到一起

00:07:33.319 --> 00:07:37.175
这个表格包含平均评分、评分数量和最后评分时间

00:07:37.175 --> 00:07:41.540
然后与实际的电影片名相关联

00:07:41.540 --> 00:07:43.100
以及所有其他关于电影的信息

00:07:43.100 --> 00:07:45.485
以防我们想要使用这些信息

00:07:45.485 --> 00:07:50.660
接下来

00:07:50.660 --> 00:07:54.560
我将创建这个 ranked movies DataFrame

00:07:54.560 --> 00:07:58.875
它会将这两部分连接到一起

00:07:58.875 --> 00:08:08.069
直接在这里传入 movies

00:08:08.410 --> 00:08:11.460
运行代码后

00:08:11.660 --> 00:08:14.189
将它们都关联到了一起

00:08:14.189 --> 00:08:17.370
可以在这里看到这三列 还有 movie 列

00:08:17.370 --> 00:08:22.459
这就是 movie_recs 中存储的内容

00:08:22.459 --> 00:08:28.574
然后根据设置的标准排序

00:08:28.574 --> 00:08:31.324
所以首先我们需要排序

00:08:31.324 --> 00:08:34.149
看看 sort_values 的文档会发现

00:08:34.149 --> 00:08:37.674
排序原理是按照列表中的第一项排序

00:08:37.674 --> 00:08:41.870
所以首先按照平均评分排序

00:08:41.870 --> 00:08:44.289
如果平均评分相同

00:08:44.289 --> 00:08:48.990
则按照评分数量排序

00:08:49.009 --> 00:08:52.590
如果评分数量也相同

00:08:52.590 --> 00:08:57.470
则按照最近排序的项排序

00:08:57.470 --> 00:09:02.139
参数设置为 ascending = false

00:09:02.139 --> 00:09:05.179
最后一个条件是 评分数量如果不超过 5 条

00:09:05.179 --> 00:09:08.319
则不能被视为最佳电影

00:09:08.320 --> 00:09:10.210
所以 如果电影没有 5 条评分

00:09:10.210 --> 00:09:11.570
则不考虑该电影

00:09:11.570 --> 00:09:18.555
如果 num_ratings &gt; 4 则考虑该电影

00:09:18.554 --> 00:09:23.569
我将提取出评分数量超过 4 的已排名电影

00:09:23.570 --> 00:09:29.585
这些就是我要返回的实际排名电影列表

00:09:29.585 --> 00:09:32.389
我已经演示了整个过程

00:09:32.389 --> 00:09:34.039
流程有点复杂

00:09:34.039 --> 00:09:35.959
希望你能听明白

00:09:35.960 --> 00:09:38.615
将这部分传入函数中

00:09:38.615 --> 00:09:40.605
下面的步骤比较简单

00:09:40.605 --> 00:09:43.664
在此函数中

00:09:43.664 --> 00:09:46.964
我们只需返回 top_movies

00:09:46.965 --> 00:09:51.470
top_movies 将等于一个有前 n 部电影的列表

00:09:51.470 --> 00:10:00.820
我们已经创建了在这里传入的 ranked_movies

00:10:00.820 --> 00:10:04.280
我们需要获取电影片名

00:10:04.279 --> 00:10:08.774
并提取 n_top

00:10:08.774 --> 00:10:12.115
ranked_movies 是已经排序的 DataFrame

00:10:12.115 --> 00:10:15.289
我们将提取已经排序的电影

00:10:15.289 --> 00:10:19.730
并且将提取这么多 然后返回为列表

00:10:26.330 --> 00:10:29.750
糟糕 在这里忘了存储它了

00:10:31.299 --> 00:10:34.254
我们来看看我连接了它们

00:10:34.254 --> 00:10:36.320
但是没有在这里存储它

00:10:36.320 --> 00:10:39.160
所以当我在这里连接它时

00:10:39.159 --> 00:10:43.389
没有这一列我们来看看

00:10:43.700 --> 00:10:47.200
Great问题应该解决了

00:10:52.250 --> 00:10:55.710
Great回到这里

00:10:55.710 --> 00:10:56.970
看来代码能运行

00:10:56.970 --> 00:11:03.000
一切都存储到变量里了 并且通过了所有的测试 不错

