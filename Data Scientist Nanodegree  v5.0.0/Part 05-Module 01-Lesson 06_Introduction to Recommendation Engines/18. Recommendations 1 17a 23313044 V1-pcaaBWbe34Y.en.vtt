WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.530
Then the next part, basically,

00:00:01.530 --> 00:00:05.040
what we want to do is we want to say if a user doesn't have

00:00:05.040 --> 00:00:08.759
an array attached to it of more than two movies,

00:00:08.759 --> 00:00:10.890
then we actually don't want to keep them into

00:00:10.890 --> 00:00:13.179
our dataset to figure out who they're related to.

00:00:13.179 --> 00:00:15.509
We should use a different method than

00:00:15.509 --> 00:00:17.730
maybe some collaborative filtering method

00:00:17.730 --> 00:00:20.730
to make recommendations for those individuals.

00:00:20.730 --> 00:00:22.800
So in order to do that,

00:00:22.800 --> 00:00:26.250
I'll set up another dictionary which will just hold the values of

00:00:26.250 --> 00:00:30.554
this movie-seen- dictionary that have an array of more than two.

00:00:30.554 --> 00:00:34.450
So I'm going to set that up as just movies_to_analyze,

00:00:34.450 --> 00:00:36.770
which is the thing will return at the end of this,

00:00:36.770 --> 00:00:38.945
and what we'll do is,

00:00:38.945 --> 00:00:45.960
for the user_id movies, and the movies_seen.items.

00:00:47.240 --> 00:00:50.429
So this used to be added items and Python2,

00:00:50.429 --> 00:00:53.070
but now, it's just items in Python3.

00:00:53.070 --> 00:00:57.265
If the length of the movie is greater than that lower bound,

00:00:57.265 --> 00:01:03.299
then what we want to do is we want to take movies_to _analyze.

00:01:03.299 --> 00:01:10.905
I'm going to take the key, which is the user_Id and attach to it movies,

00:01:10.905 --> 00:01:13.924
otherwise, we just want to get rid of it.

00:01:13.924 --> 00:01:16.099
So I think that should do it,

00:01:16.099 --> 00:01:18.324
it will take too long.

00:01:18.325 --> 00:01:21.560
In this next part, what we want do is look at

00:01:21.560 --> 00:01:24.424
the relationships between those individuals.

00:01:24.424 --> 00:01:29.209
What that means is we want to look the movies that user1 has seen,

00:01:29.209 --> 00:01:31.250
look at the movies user2 has seen.

00:01:31.250 --> 00:01:32.915
When they've seen the same lines,

00:01:32.915 --> 00:01:36.635
we want to assess how related those two individuals are to one another.

00:01:36.635 --> 00:01:42.775
So the way we could do that is we could pull the movies that user1 has seen.

00:01:42.775 --> 00:01:44.802
Basically, from that dictionary,

00:01:44.802 --> 00:01:47.390
we just created, we're passing in this user1,

00:01:47.390 --> 00:01:50.560
and we're going to pull their movies and store them in movies1,

00:01:50.560 --> 00:01:52.629
and we can do the same thing with movies2.

00:01:52.629 --> 00:01:55.109
So we have these two sets of movies.

00:01:55.109 --> 00:01:58.655
Then if we want to know which movies they've both seen,

00:01:58.655 --> 00:02:00.814
we can use this intersect1d,

00:02:00.814 --> 00:02:03.819
which you actually saw in Juno's lessons.

00:02:03.819 --> 00:02:06.219
If you are going through the data science program,

00:02:06.219 --> 00:02:13.764
but this is a really fast way to pull the intersection of these two arrays.

00:02:13.764 --> 00:02:15.309
Then to speed it up even more,

00:02:15.310 --> 00:02:17.090
you can say assume you need equals true,

00:02:17.090 --> 00:02:19.450
which is fair in our case.

00:02:19.449 --> 00:02:20.560
But if that's not true,

00:02:20.560 --> 00:02:22.270
then this isn't something that you should add,

00:02:22.270 --> 00:02:25.180
but it can make your operations even that much faster.

00:02:25.180 --> 00:02:28.659
From there, what I want to do is I'm going to create

00:02:28.659 --> 00:02:32.314
this DataFrame where I'm going to pull

00:02:32.314 --> 00:02:39.889
the rows for each one of these users and the location of their similar movies,

00:02:39.889 --> 00:02:41.959
and I'm going to pull all of those ratings.

00:02:41.960 --> 00:02:47.115
So I want to hold two arrays or in this case, a DataFrame.

00:02:47.115 --> 00:02:53.460
That's basically, each row is a user and the columns will be there matching movies,

00:02:53.460 --> 00:02:55.159
and then what's filled into there is

00:02:55.159 --> 00:02:59.840
just an actually dense matrix where we have their ratings for all of those things.

00:02:59.840 --> 00:03:01.250
So this will be a DataFrame,

00:03:01.250 --> 00:03:05.729
where we're pulling from that original matrix that user_by_movie,

00:03:05.729 --> 00:03:09.084
if you remember, this was a really sparse matrix from before.

00:03:09.085 --> 00:03:14.865
But we want to pull where user1 is and where user2 is as the rows.

00:03:14.865 --> 00:03:17.915
We want to pull their similar movies, this intersection part here.

00:03:17.914 --> 00:03:22.849
So we're going to pull the location of those parts and then I actually found

00:03:22.849 --> 00:03:26.359
this on Stack Overflow post is how do I compute

00:03:26.360 --> 00:03:28.020
the correlation between these things?

00:03:28.020 --> 00:03:31.310
You could use something like your function from the earlier part,

00:03:31.310 --> 00:03:35.030
but it's probably faster to do this with some sort of NumPy operation.

00:03:35.030 --> 00:03:40.759
So if we do transpose corr, sorry, it gives you a grid.

00:03:40.759 --> 00:03:43.560
So you can actually run df.transpose.corr.

00:03:43.560 --> 00:03:44.920
You can run this on any DataFrame,

00:03:44.919 --> 00:03:48.189
and it'll give you the correlation between all the columns.

00:03:48.189 --> 00:03:50.389
So this transpose is taking

00:03:50.389 --> 00:03:53.574
the users and moving them out of the rows and in to the columns,

00:03:53.574 --> 00:03:56.449
computing the correlation between those two users,

00:03:56.449 --> 00:03:58.909
and then you end up with a matrix where the diagonal is

00:03:58.909 --> 00:04:02.039
all ones because that's the correlation of each column with itself,

00:04:02.039 --> 00:04:05.449
and then on the off-diagonals as each pairwise correlation.

00:04:05.449 --> 00:04:11.149
So with that, we can compute the correlation between any two individuals.

00:04:11.150 --> 00:04:13.670
So this is between any two individuals and you can

00:04:13.669 --> 00:04:16.789
imagine doing this for all possible pairs of users.

00:04:16.790 --> 00:04:18.785
So go through every pair of users,

00:04:18.785 --> 00:04:22.470
run this compute correlation to get the correlation coefficient between them.

00:04:22.470 --> 00:04:24.830
That's essentially what I did with this pickle.

00:04:24.829 --> 00:04:29.300
So what holds is the columns of the two years those that were passed,

00:04:29.300 --> 00:04:34.199
as well as their correlation for every pair of users.

