WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:08.750
下一步 我们将提取任何 user_id 喜欢过的电影

00:00:08.750 --> 00:00:11.015
给定特定的 user_id 后

00:00:11.015 --> 00:00:13.120
提取该用户喜欢过的电影

00:00:13.119 --> 00:00:15.785
之前我们提取了用户看过的电影

00:00:15.785 --> 00:00:18.329
现在从看过的电影中提取

00:00:18.329 --> 00:00:22.454
用户喜欢的电影这一子集

00:00:22.454 --> 00:00:24.264
提取方法是...

00:00:24.265 --> 00:00:26.010
对于这些函数

00:00:26.010 --> 00:00:29.165
可能有很多种实现方法

00:00:29.164 --> 00:00:31.390
我们看看 user_items

00:00:31.390 --> 00:00:33.505
看看标题部分

00:00:33.505 --> 00:00:36.580
暂时删除这些代码

00:00:40.369 --> 00:00:43.539
我们要做的是

00:00:43.539 --> 00:00:45.814
从这个 user_items DataFrame 中提取数据

00:00:45.814 --> 00:00:51.049
其中用户等于你提供的用户

00:00:51.049 --> 00:00:54.004
并且评分大于某个数字

00:00:54.005 --> 00:00:56.215
我将下限设为 7 分

00:00:56.215 --> 00:00:58.430
如果评分不超过 7 分

00:00:58.429 --> 00:01:02.060
那么我不认为你喜欢这部电影 即使你看过

00:01:02.060 --> 00:01:03.240
也不一定就喜欢它

00:01:03.240 --> 00:01:07.250
我想要获取一个由你不仅看过

00:01:07.250 --> 00:01:08.489
而且喜欢的电影组成的数组

00:01:08.489 --> 00:01:11.759
我们可以使用 query() 方法

00:01:11.760 --> 00:01:16.500
在这里输入 user_id =

00:01:16.500 --> 00:01:21.510
这个 @ 符号比较方便 在这里传入这个变量

00:01:21.510 --> 00:01:23.704
如果这里是 2

00:01:23.704 --> 00:01:27.209
那么在 query() 的这一部分传入这个 2

00:01:27.209 --> 00:01:29.794
然后是 rating

00:01:29.795 --> 00:01:34.090
这个 user_id 是 user_items DataFrame 中的列

00:01:34.090 --> 00:01:36.710
rating 是其中的另一列

00:01:36.709 --> 00:01:42.179
大于 @min_rating - 1

00:01:42.180 --> 00:01:46.180
也可以设成大于等于 min_rating

00:01:46.180 --> 00:01:49.415
接着提取 movie_id

00:01:49.415 --> 00:01:52.775
从此 DataFrame 中

00:01:52.775 --> 00:01:54.165
提取我们关心的电影

00:01:54.165 --> 00:01:57.640
提取这些 movie_id

00:01:59.540 --> 00:02:04.875
将结果封装在 NumPy 数组中 和上面的相似

00:02:04.875 --> 00:02:07.739
我们可以尝试一下这些代码

00:02:07.739 --> 00:02:09.629
确保能运行

00:02:09.629 --> 00:02:13.639
运行 movies_liked(2)

00:02:13.639 --> 00:02:19.639
抱歉

00:02:19.639 --> 00:02:22.314
这里应该是两个等号

00:02:22.314 --> 00:02:24.784
一个等号是赋值语句

00:02:24.784 --> 00:02:27.384
两个等号是评估语句

00:02:27.384 --> 00:02:29.734
这里等于 2

00:02:29.735 --> 00:02:33.425
这个大于 6

00:02:33.425 --> 00:02:35.580
这些是用户 2 喜欢的电影

00:02:35.580 --> 00:02:37.265
看起来一切正常

00:02:37.264 --> 00:02:41.299
下面的代码也更正下

00:02:42.539 --> 00:02:46.074
接下来我们将提取片名

00:02:46.074 --> 00:02:49.849
到目前为止 我们已经找到最相似的用户

00:02:49.849 --> 00:02:54.414
这个函数能够提取任何用户喜欢的电影

00:02:54.414 --> 00:02:58.389
下面我们将根据 ID 获取他们喜欢的电影

00:02:58.389 --> 00:03:01.219
并提取片名

00:03:01.219 --> 00:03:04.250
这一步看起来没必要

00:03:04.250 --> 00:03:07.758
但是我认为可以简化流程

00:03:07.758 --> 00:03:11.619
我们将从 movies DataFrame 中

00:03:11.620 --> 00:03:14.370
提取 movie_id

00:03:14.370 --> 00:03:19.219
输入 isin (movie_ids)

00:03:19.219 --> 00:03:24.099
这个是一个数组或列表

00:03:24.099 --> 00:03:25.644
如果其中有该 movie_id

00:03:25.645 --> 00:03:31.340
我们将从 DataFrame 中提取该 ID 然后提取片名

00:03:31.340 --> 00:03:34.819
看起来有点混乱

00:03:34.819 --> 00:03:38.439
往上滚动 看看 movies 表格是什么样的

00:03:39.610 --> 00:03:42.020
我们将

00:03:42.020 --> 00:03:44.450
查看这个 movie_id 列

00:03:44.449 --> 00:03:49.339
如果你提供的列表包含我在查看的 ID

00:03:49.340 --> 00:03:53.509
则提取并返回此片名

00:03:53.509 --> 00:03:56.524
对于在你提供的列表中的所有 movie_id

00:03:56.525 --> 00:04:00.960
提取并返回片名值

00:04:04.569 --> 00:04:08.319
我将这部分设为列表

00:04:08.319 --> 00:04:12.139
你也可以设为 NumPy 数组

00:04:12.139 --> 00:04:14.444
这里表示设为列表

00:04:14.444 --> 00:04:17.259
我将它放在 ... 后面

