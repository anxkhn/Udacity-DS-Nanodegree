WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.930
Now that we've cleaned our movies and reviews datasets,

00:00:03.930 --> 00:00:06.300
let's get started with our first type of recommendation.

00:00:06.299 --> 00:00:11.094
So, the way that I went about solving this was to create a helper function,

00:00:11.095 --> 00:00:14.155
which I called create ranked df,

00:00:14.154 --> 00:00:17.274
that takes in the movies and reviews dataframes,

00:00:17.274 --> 00:00:20.570
and then returns the ranked movies.

00:00:20.570 --> 00:00:22.559
This ranked movies item,

00:00:22.559 --> 00:00:25.674
I would then pass to the popular recommendations.

00:00:25.675 --> 00:00:32.365
So, I create this create rank dataframe function which takes in the movies and reviews,

00:00:32.365 --> 00:00:38.750
and essentially I just want to return a dataframe of the ranked movies,

00:00:38.750 --> 00:00:44.939
which then I'm going to pass here.

00:00:44.939 --> 00:00:49.909
So now the popular recommendations is basically just going to pull these parts,

00:00:49.909 --> 00:00:55.125
and I'm going to worry about these things within this function.

00:00:55.125 --> 00:00:57.134
So I want to input these two items,

00:00:57.134 --> 00:01:00.994
and I'm going to take care of all of these parts within this function.

00:01:00.994 --> 00:01:04.939
The first thing I'm going to do is I want to create this movie ratings

00:01:04.939 --> 00:01:09.064
object which basically groups by the movie ID.

00:01:09.064 --> 00:01:11.329
A lot of times when I'm creating these functions,

00:01:11.329 --> 00:01:14.000
I'll do a lot of the work outside of the function and then just move

00:01:14.000 --> 00:01:16.859
it in and as I know what's happening.

00:01:16.859 --> 00:01:19.310
So, if we take the reviews,

00:01:19.310 --> 00:01:21.760
and if we look at this again,

00:01:22.159 --> 00:01:25.104
screen in the dataset.

00:01:25.105 --> 00:01:29.969
So, if we look at the head of this dataset.

00:01:29.969 --> 00:01:32.914
Basically what I want to do is for each movie,

00:01:32.915 --> 00:01:35.815
I want to look at the average ratings.

00:01:35.814 --> 00:01:37.185
So, for the first part of this,

00:01:37.185 --> 00:01:39.954
I want the movie with the highest average rating.

00:01:39.954 --> 00:01:41.299
So, for each movie,

00:01:41.299 --> 00:01:44.884
I'm going to group those together and then get the average highest rating.

00:01:44.885 --> 00:01:47.155
So, I'm going to group by the movie ID,

00:01:47.155 --> 00:01:51.159
and I basically care a lot about this rating part.

00:01:51.159 --> 00:01:56.604
So, I'm just going to store that in something called movie ratings.

00:01:56.605 --> 00:02:00.984
If we look at that, that's just going to be a groupby object right now,

00:02:00.984 --> 00:02:02.525
but I can do lots of things with that.

00:02:02.525 --> 00:02:05.150
So, one thing that I might do is I might take

00:02:05.150 --> 00:02:09.625
the mean and what that does is it gives me the average rating for each movie.

00:02:09.625 --> 00:02:12.525
Or I could take something like the count,

00:02:12.525 --> 00:02:17.129
and that'll give me how many times that particular movie was rated.

00:02:17.129 --> 00:02:20.625
So, we can see that this movie was rated 417 times,

00:02:20.625 --> 00:02:22.264
this one was rated twice,

00:02:22.264 --> 00:02:24.294
a lot of these were only rated once.

00:02:24.294 --> 00:02:34.109
So, now I want that within my function.

00:02:34.110 --> 00:02:39.540
So, what I'm going to do is I'm going to create this thing average ratings,

00:02:41.349 --> 00:02:43.664
that mean that we saw,

00:02:43.664 --> 00:02:46.644
and I'm going to create num ratings,

00:02:46.645 --> 00:02:50.010
which is basically the count you just saw.

00:02:52.699 --> 00:02:57.125
So, with this, we can get the highest average rating.

00:02:57.125 --> 00:03:00.469
We're looking at movies with more ratings are better.

00:03:00.469 --> 00:03:04.125
So, this count will help us keep track of how many ratings there were.

00:03:04.125 --> 00:03:07.210
We also want to have a minimum of five ratings.

00:03:07.210 --> 00:03:10.224
So, we need this num ratings part for that.

00:03:10.224 --> 00:03:12.775
Then if the average and the count are the same,

00:03:12.775 --> 00:03:16.655
then the ordering should look at how recent they were.

00:03:16.655 --> 00:03:21.275
So, I want to get something that tells me how recently this movie was rated.

00:03:21.275 --> 00:03:24.805
So, we still want to group by the movie ID,

00:03:24.805 --> 00:03:30.599
and then we can look at the max of the date column.

00:03:33.949 --> 00:03:38.294
This max pulls the most recent movie.

00:03:38.294 --> 00:03:40.319
So, that can be a little confusing,

00:03:40.319 --> 00:03:44.030
but the min is like the oldest movie and the max is the newest movie.

00:03:44.030 --> 00:03:48.650
So, this information can then be used to tell us if

00:03:48.650 --> 00:03:53.319
two movies are tied in terms of average rating and the number of times they were rated.

00:03:53.319 --> 00:03:55.745
So maybe they're both have an average rating of 10,

00:03:55.745 --> 00:03:57.500
but they've only been rated once.

00:03:57.500 --> 00:04:04.030
Then the movie that we want to rank higher is the one that was rated most recently.

00:04:04.030 --> 00:04:07.659
So, I'm going to take that information.

00:04:07.939 --> 00:04:10.210
Let's see.

00:04:10.210 --> 00:04:19.740
I'm going to take this information and use it as well.

00:04:20.060 --> 00:04:24.790
From here, I just want to merge a lot of this information together.

00:04:24.790 --> 00:04:30.660
So, I'm going to create this ratings count dataframe,

00:04:32.779 --> 00:04:38.729
which is going to have one column for the average rating,

00:04:38.730 --> 00:04:40.194
the average movie rating,

00:04:40.194 --> 00:04:41.849
which I'll just call average rating,

00:04:41.850 --> 00:04:46.240
and then it's going to pull the average ratings we created right here.

00:04:47.569 --> 00:04:56.784
Then num ratings is going to be another column and it's going to pull those values there.

00:04:56.785 --> 00:04:59.320
So, you can imagine what this thing is looking like.

00:04:59.319 --> 00:05:01.074
It has one column for this,

00:05:01.074 --> 00:05:02.740
it has another column for this,

00:05:02.740 --> 00:05:06.560
and then it's storing those values that were created within it.

00:05:06.560 --> 00:05:09.370
Because of the way we pulled this,

00:05:09.370 --> 00:05:12.975
unfortunately, we can't just add it the way that we added these.

00:05:12.975 --> 00:05:19.060
So, instead, what I'm going to do is I'm going to create a dataframe out of this,

00:05:19.060 --> 00:05:22.655
and then I'm just going to create the name of

00:05:22.654 --> 00:05:30.019
the column to be exactly what we have up here to be consistent.

00:05:30.019 --> 00:05:32.524
So, what this is doing is it's creating this dataframe.

00:05:32.524 --> 00:05:35.685
It just has the ID as the movie ID.

00:05:35.685 --> 00:05:40.519
So, that's the index on this and then the column is going to hold

00:05:40.519 --> 00:05:43.729
all the last ratings which are basically all of those dates that we

00:05:43.730 --> 00:05:46.970
just saw with the column heading as last rating.

00:05:46.970 --> 00:05:51.335
So, what I'm going to do from here is basically take

00:05:51.334 --> 00:05:58.784
this dataframe and join it with the last rating dataframe.

00:05:58.785 --> 00:06:01.310
So, I'm going to take this dataframe that we just

00:06:01.310 --> 00:06:04.925
created and join it with this dataframe that we're creating here.

00:06:04.925 --> 00:06:06.379
When we just do a joining,

00:06:06.379 --> 00:06:09.649
it's going to look for the index to be the same.

00:06:09.649 --> 00:06:13.664
So, the index on the rows to be the same and just match those two things up.

00:06:13.665 --> 00:06:16.220
Then, you might be wondering we did all of this with

00:06:16.220 --> 00:06:19.030
the reviews and that basically takes care of all of this stuff.

00:06:19.029 --> 00:06:20.869
The reason why we need the movies

00:06:20.870 --> 00:06:23.990
dataset is then to pull some information about the movie.

00:06:23.990 --> 00:06:26.780
So, what we want to do is we want to rank things by

00:06:26.779 --> 00:06:30.259
these criteria using these new columns we just created,

00:06:30.259 --> 00:06:35.194
but then we want to pull information from the movies dataframe like the title

00:06:35.194 --> 00:06:40.605
to be able to pass that back in this popular recommendations function.

00:06:40.605 --> 00:06:43.790
We're going to want to join the movies dataframe.

00:06:43.790 --> 00:06:46.879
In order to do a join similar to what we did before,

00:06:46.879 --> 00:06:49.089
I'm going to set the index to be the movie ID.

00:06:49.089 --> 00:06:56.014
So, we want to basically take this and just the same way that we joined this,

00:06:56.014 --> 00:06:59.379
we can join these together.

00:06:59.389 --> 00:07:04.050
So, we can join this new movies

00:07:04.050 --> 00:07:09.629
dataframe with the movie ID as the index with this because it'll have the same index.

00:07:09.879 --> 00:07:15.149
I'm just going to call that movie recs.

00:07:23.490 --> 00:07:26.204
So, if we look at the header of this,

00:07:26.204 --> 00:07:29.754
you'll see it has the movie ID and this has the same movie ID.

00:07:29.754 --> 00:07:33.319
So, we're just going to basically join these two tables together

00:07:33.319 --> 00:07:37.175
on that movie ID so that we have an average rating, the number of ratings,

00:07:37.175 --> 00:07:41.540
and the last time it was seen linked to the actual movie title,

00:07:41.540 --> 00:07:43.100
as well as all of these other things about

00:07:43.100 --> 00:07:45.485
the movie and the case that we want to use them.

00:07:45.485 --> 00:07:50.660
Then basically, what we want to do from here is create

00:07:50.660 --> 00:07:54.560
this ranked movies dataframe which

00:07:54.560 --> 00:07:58.875
is going to basically be the joining of these two parts.

00:07:58.875 --> 00:08:08.069
So, you can see that's how this works by simply passing in just that.

00:08:08.410 --> 00:08:11.460
So, if we do this,

00:08:11.660 --> 00:08:14.189
we get them all linked together.

00:08:14.189 --> 00:08:17.370
So, you can see those three columns here and the movie.

00:08:17.370 --> 00:08:22.459
So, that's essentially what we're storing in this movie recs.

00:08:22.459 --> 00:08:28.574
Basically, what we want to do then is just sort this by the criteria that we set.

00:08:28.574 --> 00:08:31.324
So, first, we want to sort it in the way that this works,

00:08:31.324 --> 00:08:34.149
if you go look at the documentation on sort values is

00:08:34.149 --> 00:08:37.674
it ranks by the first thing that's in the list first.

00:08:37.674 --> 00:08:41.870
So, the first thing we want to do is rank by the average rating.

00:08:41.870 --> 00:08:44.289
Then basically if there are ties in the average rating,

00:08:44.289 --> 00:08:48.990
then we want to rank by the number of ratings.

00:08:49.009 --> 00:08:52.590
Then if there are ties with that,

00:08:52.590 --> 00:08:57.470
we want the thing that was ranked most recently to be ranked first.

00:08:57.470 --> 00:09:02.139
As an argument, this takes ascending equal to false.

00:09:02.139 --> 00:09:05.179
On this last part, it says we want a minimum of

00:09:05.179 --> 00:09:08.319
five ratings in order to be considered amongst the best.

00:09:08.320 --> 00:09:10.210
So, if a movie doesn't have five ratings,

00:09:10.210 --> 00:09:11.570
then we don't consider it.

00:09:11.570 --> 00:09:18.555
So, the num ratings here is greater than 4, then we'll consider it.

00:09:18.554 --> 00:09:23.569
So, I'll pull the ranked movies where the number of ratings as more than 4 and then

00:09:23.570 --> 00:09:29.585
basically those are the actual ranked movies that I want to return back.

00:09:29.585 --> 00:09:32.389
So, a little complex,

00:09:32.389 --> 00:09:34.039
but we walked through all the steps.

00:09:34.039 --> 00:09:35.959
Hopefully, that makes some sense.

00:09:35.960 --> 00:09:38.615
Then basically we're passing this part in.

00:09:38.615 --> 00:09:40.605
So, now it's the easy part.

00:09:40.605 --> 00:09:43.664
So, essentially, in this function,

00:09:43.664 --> 00:09:46.964
all we need to do is return the top movies.

00:09:46.965 --> 00:09:51.470
The top movies is just going to be a list of the n top movies.

00:09:51.470 --> 00:10:00.820
So, we already created this ranked movies thing that we're passing in here.

00:10:00.820 --> 00:10:04.280
Then basically we just want to grab the movie title,

00:10:04.279 --> 00:10:08.774
and we're going to pull n top.

00:10:08.774 --> 00:10:12.115
So, ranked movies is already assorted dataframe.

00:10:12.115 --> 00:10:15.289
We're going to pull the movies that are already sorted

00:10:15.289 --> 00:10:19.730
and we're going to pull this many of them and return them as a list.

00:10:26.330 --> 00:10:29.750
It's because I'm forgetting to store it here.

00:10:31.299 --> 00:10:34.254
Lets see. I joined these,

00:10:34.254 --> 00:10:36.320
but then I didn't store it in this.

00:10:36.320 --> 00:10:39.160
Therefore, when I joined it here,

00:10:39.159 --> 00:10:43.389
it didn't have that column on it. Lets see.

00:10:43.700 --> 00:10:47.200
Great. That should be fixed now.

00:10:52.250 --> 00:10:55.710
Great. So, going back up here,

00:10:55.710 --> 00:10:56.970
it looks like it all ran,

00:10:56.970 --> 00:11:03.000
everything stored, and then it looks like it passed all the tests which was good.

