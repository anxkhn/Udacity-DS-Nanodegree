WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.565
We're now ready to use some of the similarity matrix that we've seen

00:00:05.565 --> 00:00:10.720
to better understand how users and items are related to one another.

00:00:10.720 --> 00:00:14.429
That's the point of collaborative filtering is to look

00:00:14.429 --> 00:00:18.089
at how users or items might be correlated in

00:00:18.089 --> 00:00:21.690
different ways and then learn from that to better make

00:00:21.690 --> 00:00:26.385
recommendations for new users or users who might have similar tastes.

00:00:26.385 --> 00:00:29.330
With that, this notebook,

00:00:29.329 --> 00:00:30.750
we're going to get started.

00:00:30.750 --> 00:00:34.984
It looks like the progress bar doesn't exist.

00:00:34.984 --> 00:00:38.960
So, we'll need to pip install

00:00:38.960 --> 00:00:48.420
that, free go back.

00:00:51.560 --> 00:00:54.280
It looks like everything's working now.

00:00:54.280 --> 00:00:57.365
So, the first thing that they want to do is just give us

00:00:57.365 --> 00:01:00.969
a reminder of the reviews DataFrame that we're going to be working with.

00:01:00.969 --> 00:01:02.674
So, it has the user ID,

00:01:02.674 --> 00:01:04.269
the movie ID, and the rating.

00:01:04.269 --> 00:01:06.849
A lot of times, when you're making recommendations,

00:01:06.849 --> 00:01:09.019
this is about all the information that you're given,

00:01:09.019 --> 00:01:11.144
is a user ID, and movie ID, and our rating,

00:01:11.144 --> 00:01:13.649
or even a user ID, a movie ID,

00:01:13.650 --> 00:01:15.330
or some item ID,

00:01:15.329 --> 00:01:18.484
and then whether or not that user has interacted with the item.

00:01:18.484 --> 00:01:21.679
So, there might be like a one here if they interacted with each other,

00:01:21.680 --> 00:01:25.135
or zero if they haven't. Something like that.

00:01:25.135 --> 00:01:29.780
So, the main way that we're going to work

00:01:29.780 --> 00:01:35.575
with this data is frequently in what is known as a User-Item matrix.

00:01:35.575 --> 00:01:38.564
If you go to the link here,

00:01:38.564 --> 00:01:40.484
it shows you a way to do this.

00:01:40.484 --> 00:01:43.754
I originally tried to use a pivot table to do it,

00:01:43.754 --> 00:01:45.030
but I got a memory error.

00:01:45.030 --> 00:01:49.879
That was a reoccurring problem in working with this dataset and

00:01:49.879 --> 00:01:52.189
multiple cases was that I continued to

00:01:52.189 --> 00:01:55.310
get memory errors when I tried to do things in different ways.

00:01:55.310 --> 00:01:58.150
So, you'll notice as we go through making recommendations,

00:01:58.150 --> 00:02:01.850
we'll frequently do it on a subset of the data and then you can imagine

00:02:01.849 --> 00:02:06.694
extending the ideas to larger datasets or even to the full dataset here.

00:02:06.694 --> 00:02:08.199
So, if you go to the link,

00:02:08.199 --> 00:02:12.964
it shows that you can actually take this user item's DataFrame,

00:02:12.965 --> 00:02:18.920
and create something with users or user IDs on the rows and

00:02:18.919 --> 00:02:25.219
movie IDs on the columns by performing a groupby,

00:02:25.219 --> 00:02:29.370
and basically just grouping by the user Id and the movie ID.

00:02:29.370 --> 00:02:32.379
Then, what we want to do is pull

00:02:32.379 --> 00:02:35.500
the rating and then we could pull the min-max or whatever,

00:02:35.500 --> 00:02:38.590
it really doesn't matter because we just need the value itself.

00:02:38.590 --> 00:02:41.354
So, we pull the rating column.

00:02:41.354 --> 00:02:43.149
We could pull anything.

00:02:43.150 --> 00:02:49.260
This could be the mean or the min or the max because when we grouped by these two things,

00:02:49.259 --> 00:02:51.599
there's only one existing rating for each of those.

00:02:51.599 --> 00:02:53.844
Then, there's this thing called an unstack,

00:02:53.844 --> 00:02:56.030
which is useful because that's what's going to

00:02:56.030 --> 00:02:59.939
create the rows and columns the way that we want them to.

00:03:02.930 --> 00:03:05.694
But once that's done running,

00:03:05.694 --> 00:03:15.000
we can check that our matrix matches the solution and Jimmy Fallon tells us that it does.

