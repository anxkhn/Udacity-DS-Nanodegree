WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.030
最后 我们将做出推荐

00:00:04.030 --> 00:00:06.839
对于之前没有通过基于协同过滤的推荐机制

00:00:06.839 --> 00:00:10.140
获得推荐电影的用户

00:00:10.140 --> 00:00:14.410
我们将通过基于内容的推荐机制向他们推荐电影

00:00:14.900 --> 00:00:20.905
我们按照这些注释编写代码

00:00:20.905 --> 00:00:24.300
对于每个用户 更新进度条

00:00:24.300 --> 00:00:29.780
计数器将加一

00:00:33.619 --> 00:00:36.669
更新进度条然后

00:00:36.670 --> 00:00:39.975
仅提取用户看过的电影的评价

00:00:39.975 --> 00:00:42.454
如果你还记得的话

00:00:42.454 --> 00:00:48.409
这个 ranked_reviews 是我们创建的一个 DataFrame

00:00:48.409 --> 00:00:55.429
它根据用户看过的电影排序 对于每个用户

00:00:55.429 --> 00:00:59.019
这个 DataFrame 都从高到低地显示他们看过的电影

00:00:59.020 --> 00:01:02.920
我将称之为 temp

00:01:04.790 --> 00:01:08.255
我将查看从高到低排序的

00:01:08.254 --> 00:01:11.394
每部电影

00:01:11.394 --> 00:01:17.569
创建一个包含 movie_id 的数组

00:01:17.569 --> 00:01:20.469
然后提取电影片名

00:01:20.469 --> 00:01:24.439
movie_names...

00:01:24.439 --> 00:01:28.659
我们将使用在上面编写的 get_movie_names() 函数

00:01:28.659 --> 00:01:31.000
传入 movie_ids

00:01:31.189 --> 00:01:33.480
最后

00:01:33.480 --> 00:01:35.160
我们想要查找相似电影

00:01:35.159 --> 00:01:36.649
我们编写了这个函数

00:01:36.650 --> 00:01:39.930
这部分会查找相似的电影

00:01:39.930 --> 00:01:43.490
用户看过这些电影 并且排名很高

00:01:43.489 --> 00:01:48.869
我们想要提取其他相似的电影并推荐给用户

00:01:48.870 --> 00:01:52.865
for movie in movie_ids:

00:01:52.864 --> 00:01:55.084
我们将提取 movie_id

00:01:55.084 --> 00:01:56.569
并获取最相似的电影

00:01:56.569 --> 00:01:58.504
存储到 rec_movies 中

00:01:58.504 --> 00:02:03.349
然后查看用户已经看过的电影

00:02:03.349 --> 00:02:08.319
与要推荐的新电影之间的差异

00:02:08.319 --> 00:02:11.349
我们不想推荐用户已经看过的电影

00:02:11.349 --> 00:02:14.329
我们将获取

00:02:14.330 --> 00:02:17.650
原来推荐给此用户的电影

00:02:17.650 --> 00:02:21.379
然后将通过基于内容的推荐机制

00:02:21.379 --> 00:02:25.460
获取的新电影添加到此 recs 中

00:02:25.460 --> 00:02:29.165
他们已经通过协同过滤方法获得了很多推荐电影

00:02:29.164 --> 00:02:31.414
现在我们将更新

00:02:31.414 --> 00:02:34.804
通过协同过滤方法推荐的电影列表

00:02:34.805 --> 00:02:40.379
并添加一些其他基于内容的推荐电影

00:02:40.379 --> 00:02:50.469
如果该用户的 recs 长度超过 9

00:02:50.469 --> 00:02:52.020
即有 10 部或以上的推荐电影

00:02:52.020 --> 00:02:54.885
那么我们将 break 出来

00:02:54.884 --> 00:02:57.639
是的我们将退出循环

00:02:57.639 --> 00:03:01.019
并获取下个用户

00:03:01.020 --> 00:03:03.435
这个 break

00:03:03.435 --> 00:03:07.735
只是退出基于内容的推荐方式

00:03:07.735 --> 00:03:12.185
这只是其中一种实现方法

00:03:12.185 --> 00:03:14.229
还有很多其他实现方法

00:03:14.229 --> 00:03:17.780
我获取了每个用户的推荐电影列表

00:03:17.780 --> 00:03:20.944
并用基于内容的推荐电影

00:03:20.944 --> 00:03:23.879
更新基于协同过滤的推荐电影

00:03:24.939 --> 00:03:30.979
我出现了一个错误users 在这里没有定义

00:03:30.979 --> 00:03:36.689
这些是需要推荐的用户

00:03:36.689 --> 00:03:39.859
如果用户已经有推荐电影

00:03:39.860 --> 00:03:43.205
那么我们不再向他们推荐更多电影

00:03:43.205 --> 00:03:47.735
所以修改下这里 表示仅针对需要推荐的用户推荐电影

00:03:47.735 --> 00:03:51.710
遍历这些用户并执行此流程

00:03:57.900 --> 00:04:00.890
这个运行很快

