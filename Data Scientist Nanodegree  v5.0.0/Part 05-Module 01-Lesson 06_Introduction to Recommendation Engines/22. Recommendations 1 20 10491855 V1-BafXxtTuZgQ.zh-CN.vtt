WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.810
在下个部分

00:00:03.810 --> 00:00:08.740
我们想要提取与特定电影最相似的电影

00:00:14.539 --> 00:00:19.019
这里有一个 dot_prod_movies 它是一个矩阵

00:00:19.019 --> 00:00:25.905
每行代表一部电影

00:00:25.905 --> 00:00:30.109
每列也代表一部电影

00:00:30.109 --> 00:00:32.850
单元格中的数字

00:00:32.850 --> 00:00:35.925
表示两部电影之间的关系

00:00:35.924 --> 00:00:39.449
这个 3 表示

00:00:39.450 --> 00:00:43.640
第一部电影与第二部电影之间的关系

00:00:43.640 --> 00:00:48.024
这个 3 表示第一部电影与第三部电影之间的关系

00:00:48.024 --> 00:00:51.920
这个 1 表示第一部电影与第四部电影之间的关系

00:00:51.920 --> 00:00:55.850
但是 因为我们计算的是这些 NamPy 数组的点积

00:00:55.850 --> 00:00:59.945
所以不知道这些电影的索引

00:00:59.945 --> 00:01:04.040
在这里 我们将使用 np.where()

00:01:04.040 --> 00:01:08.120
查找这部电影在哪一行

00:01:08.120 --> 00:01:10.380
好处在于 这些电影只出现了一次

00:01:10.379 --> 00:01:13.714
计算点积不会改变它们的顺序

00:01:13.715 --> 00:01:19.469
我们可以通过提取该值判断索引位置

00:01:19.469 --> 00:01:25.209
如果传入索引一次 我们将获得一个数组

00:01:25.209 --> 00:01:26.929
但是我只需这个数字

00:01:26.930 --> 00:01:29.045
所以我将再传入索引一次

00:01:29.045 --> 00:01:36.260
得出第 10 个 movie_id 将在该矩阵里的位置

00:01:36.260 --> 00:01:39.170
即哪行或哪列

00:01:39.170 --> 00:01:44.820
称为 movie_idx

00:01:51.819 --> 00:01:56.044
为了查找最相似的电影

00:01:56.045 --> 00:02:00.829
我们需要找到最大值在哪

00:02:00.829 --> 00:02:06.759
我将传入 movie_idx

00:02:06.760 --> 00:02:11.939
并询问“哪里的值等于最大值”

00:02:11.939 --> 00:02:16.770
这部分将返回一个数组

00:02:19.240 --> 00:02:25.835
将这个存储到 movie_idx 中 并运行这个

00:02:25.835 --> 00:02:31.409
这样就会获得与该电影相关的数组

00:02:31.810 --> 00:02:35.134
如果调用 np.max()

00:02:35.134 --> 00:02:40.679
这里也是这部分代码

00:02:40.680 --> 00:02:45.655
结果会得出最相似的电影所在的位置

00:02:45.655 --> 00:02:47.590
即最为相似的电影

00:02:47.590 --> 00:02:49.819
其中一个电影始终是电影本身

00:02:49.819 --> 00:02:52.030
其他电影将是

00:02:52.030 --> 00:02:54.500
具有完全相同的内容特征的电影

00:02:54.500 --> 00:02:55.675
它们的年份相同

00:02:55.675 --> 00:02:57.740
并且类型一样

00:02:57.740 --> 00:03:02.659
快速运行下这行代码 看看返回什么结果

00:03:03.150 --> 00:03:08.370
对于这个 movie_idx

00:03:08.370 --> 00:03:13.090
有 6 部电影的内容特征完全一样

00:03:13.090 --> 00:03:16.659
我只需这个数组

00:03:16.659 --> 00:03:19.525
如果传入索引一次

00:03:19.525 --> 00:03:20.960
我们将获得该数组

00:03:20.960 --> 00:03:23.340
这正是我想要的结果我想要该数组

00:03:23.340 --> 00:03:27.069
将这个称为 similar_movies

00:03:29.300 --> 00:03:31.550
实际上这些是索引

00:03:31.550 --> 00:03:34.225
所以我将称之为 similar_idxs

00:03:34.224 --> 00:03:40.484
然后是 similar_movies

00:03:40.485 --> 00:03:46.245
我们从 movies DataFrame 中提取 ID

00:03:46.245 --> 00:03:51.990
现在获得了这个索引数组

00:03:51.990 --> 00:03:56.820
我们可以从中提取想要的片名

00:03:57.430 --> 00:04:03.099
这部分从原始的 movies DataFrame 中

00:04:03.099 --> 00:04:04.655
提取这些行

00:04:04.655 --> 00:04:07.400
这部分表示仅返回 movie 列

00:04:07.400 --> 00:04:08.520
我不想要其他部分

00:04:08.520 --> 00:04:13.040
并返回为 NumPy 数组尝试一下这部分代码

00:04:13.039 --> 00:04:19.925
find_similar_movies(8)

00:04:19.925 --> 00:04:22.444
这些是与电影 8 相关的电影片名

00:04:22.444 --> 00:04:27.800
看看电影 10

00:04:27.800 --> 00:04:30.650
这些是与该电影内容最相似的其他电影

00:04:30.649 --> 00:04:33.739
再看看 91

00:04:33.740 --> 00:04:41.970
这些是与电影 91 最相似的电影

