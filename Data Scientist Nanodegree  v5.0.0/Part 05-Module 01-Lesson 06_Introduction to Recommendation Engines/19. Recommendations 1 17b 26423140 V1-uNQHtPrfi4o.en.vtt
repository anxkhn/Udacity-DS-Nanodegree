WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.160
Here's where we get into the biggest logic portion.

00:00:05.160 --> 00:00:07.589
So what we want to do is now make recommendations

00:00:07.589 --> 00:00:10.259
based on all the functions that we have up above.

00:00:10.259 --> 00:00:12.629
So here's the way that I did this.

00:00:12.630 --> 00:00:15.825
But again, you could write code in a number of different ways.

00:00:15.824 --> 00:00:19.559
So I created this movie_seen for each user and kept

00:00:19.559 --> 00:00:24.524
track of which movies were watched by the user.

00:00:24.524 --> 00:00:27.209
So this movie_seen now holds all the movies

00:00:27.210 --> 00:00:29.070
that were watched by the user, and that's important

00:00:29.070 --> 00:00:31.980
because we don't want to recommend these movies to that user.

00:00:31.980 --> 00:00:35.594
I also went out and I got the closest_neighbors.

00:00:35.594 --> 00:00:38.729
So I'm basically just getting an ordered list of

00:00:38.729 --> 00:00:44.134
which user IDs are closest to this neighbor, this user.

00:00:44.134 --> 00:00:45.710
So you give me a user,

00:00:45.710 --> 00:00:47.329
I'm going to go find the movies they've seen

00:00:47.329 --> 00:00:49.179
and I'm going to go find their closest_neighbors.

00:00:49.179 --> 00:00:51.810
From there, I created this recs thing,

00:00:51.810 --> 00:00:54.890
which is just an empty NumPy array that I'm going

00:00:54.890 --> 00:00:56.929
to assign a whole bunch of things into.

00:00:56.929 --> 00:00:58.640
Essentially, what I want to do is

00:00:58.640 --> 00:01:03.179
for each neighbor in the closest_neighbors,

00:01:03.179 --> 00:01:06.995
I am going to get the movies that that neighbor liked.

00:01:06.995 --> 00:01:09.260
So using that function that we just wrote,

00:01:09.260 --> 00:01:12.155
I'm going to go find the movies that that neighbor liked.

00:01:12.155 --> 00:01:14.430
So I'm going to say

00:01:14.769 --> 00:01:23.149
likes equals movies_liked by neighbor.

00:01:23.150 --> 00:01:26.265
Okay. So this is the neighbors' ID.

00:01:26.265 --> 00:01:29.579
I just passed that in. I'm going to get what they liked.

00:01:29.579 --> 00:01:34.310
There's this really nice way to compare to

00:01:34.310 --> 00:01:39.125
NumPy arrays and get the ones of the array that aren't in the other.

00:01:39.125 --> 00:01:42.180
There's this thing called np.setdiff1d.

00:01:43.719 --> 00:01:47.750
Essentially, what it does is it takes the first array,

00:01:47.750 --> 00:01:50.950
so what I called neigh_ likes

00:01:50.950 --> 00:01:55.799
and it looks at the second array which is this movies_ seen.

00:01:55.799 --> 00:02:00.609
Again, we can make this faster by saying assume_unique equals true.

00:02:00.609 --> 00:02:04.120
So similar to the intersection function we used before.

00:02:04.120 --> 00:02:06.350
But this is going to take the difference between

00:02:06.349 --> 00:02:08.900
these two arrays and basically give me back

00:02:08.900 --> 00:02:12.170
a new array that holds all of the movies

00:02:12.169 --> 00:02:15.244
that are in this one that aren't in this one.

00:02:15.245 --> 00:02:19.640
So it's going to take the movies that that user liked that this individual

00:02:19.639 --> 00:02:24.904
hasn't seen yet and we're going to set that equal to new_recs.

00:02:24.905 --> 00:02:28.395
Then what we want to do is concatenate

00:02:28.395 --> 00:02:33.000
new_recs with the original recs and make that the recommendations.

00:02:33.000 --> 00:02:38.580
So what that looks like is we're going to take the unique values.

00:02:41.680 --> 00:02:45.230
What this is doing is it's concatenating these two arrays

00:02:45.229 --> 00:02:48.379
together and then it's saying only give me the unique value.

00:02:48.379 --> 00:02:52.159
So take the new recommendations and the old recommendations,

00:02:52.159 --> 00:02:54.530
which originally doesn't have anything in it,

00:02:54.530 --> 00:02:57.784
but it's going to hold more and more stuff as we

00:02:57.784 --> 00:03:01.770
keep concatenating new recommendations for each neighbor.

00:03:01.770 --> 00:03:06.480
Then we can look at the length of this recs array and if

00:03:06.479 --> 00:03:11.000
it meets the spec of how many recommendations we want to make,

00:03:11.000 --> 00:03:13.775
then we'll break and we'll hand those recommendations back.

00:03:13.775 --> 00:03:20.885
So if the length of recs is greater than num_recs.

00:03:20.884 --> 00:03:24.629
I'll just say num_recs minus one, then we'll break,

00:03:24.629 --> 00:03:29.629
and our recommendations will be equal to the movie names,

00:03:29.629 --> 00:03:33.079
which is why we created that function up there of recs.

00:03:33.080 --> 00:03:37.080
This recs is just going to be all of the IDs.

00:03:37.080 --> 00:03:39.680
Whereas, what we want to get back in

00:03:39.680 --> 00:03:42.754
this recommendations portion are actually the movie titles.

00:03:42.754 --> 00:03:44.909
That's what this part does.

