WEBVTT
Kind: captions
Language: zh-CN

00:00:04.700 --> 00:00:09.455
掌握了刚刚介绍的相似性和距离指标后

00:00:09.455 --> 00:00:12.419
现在你应该能够识别相似用户了

00:00:12.419 --> 00:00:18.105
但是我们需要能够利用这些关于用户的信息作出推荐

00:00:18.105 --> 00:00:20.730
我们不仅要掌握科学知识 而且要有一种直觉判断技巧

00:00:20.730 --> 00:00:24.798
这样才能知道需要从多少用户那获得推荐

00:00:24.798 --> 00:00:28.469
以及确定应该根据每个用户

00:00:28.469 --> 00:00:33.655
推荐多少项目及需要推荐哪些项目

00:00:33.655 --> 00:00:36.435
再来看看 Sam

00:00:36.435 --> 00:00:40.640
向 Sam 推荐电影的一种方式是

00:00:40.640 --> 00:00:45.280
推荐最近邻用户已经看过的所有电影

00:00:45.280 --> 00:00:49.760
但是不加过滤地推荐所有这些电影

00:00:49.759 --> 00:00:54.454
可能会推荐 Sam 已经看过的电影

00:00:54.454 --> 00:00:57.604
我们肯定需要从推荐电影中删除

00:00:57.604 --> 00:01:01.829
Sam 已经看过的电影

00:01:01.829 --> 00:01:05.390
此外 只因为 Sam 的某位近邻用户看过一部电影

00:01:05.390 --> 00:01:09.219
并不表明他们就喜欢这部电影

00:01:09.219 --> 00:01:16.030
如果 Sam 和他的近邻用户有相似的品位 并且 Jessie 不喜欢某部电影

00:01:16.030 --> 00:01:18.870
那么 Sam 很可能也不喜欢这部电影

00:01:18.870 --> 00:01:22.875
如果 Jessie 对她看过的所有电影都评分了

00:01:22.875 --> 00:01:27.980
那么我们将仅推荐她评分很高的电影

00:01:27.980 --> 00:01:31.520
如果最高评分是 10 分

00:01:31.519 --> 00:01:37.179
那么我们仅向 Sam 推荐评分不低于 7 分的电影

00:01:37.510 --> 00:01:40.850
我们已经从邻近用户那找到一些电影

00:01:40.849 --> 00:01:43.839
删除了 Sam 已经看过的电影

00:01:43.840 --> 00:01:47.465
并且删除了评分不高的电影

00:01:47.465 --> 00:01:49.880
现在可以向 Sam 推荐电影了

00:01:49.879 --> 00:01:55.959
下面我们将详细了解如何实现这些推荐技巧

