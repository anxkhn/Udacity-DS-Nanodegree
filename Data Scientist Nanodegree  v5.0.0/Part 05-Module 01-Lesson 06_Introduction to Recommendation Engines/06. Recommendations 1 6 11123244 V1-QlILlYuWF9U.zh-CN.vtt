WEBVTT
Kind: captions
Language: zh-CN

00:00:12.410 --> 00:00:18.379
我创建了一个函数 叫做 create_date

00:00:18.379 --> 00:00:21.390
并设为 Lambda 函数

00:00:21.390 --> 00:00:30.054
我将提取最后部分

00:00:30.054 --> 00:00:32.039
可以想象

00:00:32.039 --> 00:00:35.780
这段代码会提取最后一部分

00:00:35.780 --> 00:00:37.359
可以尝试提取一个示例

00:00:37.359 --> 00:00:40.380
但是有些电影没有这部分

00:00:40.380 --> 00:00:42.965
我将查找最后这一部分

00:00:42.965 --> 00:00:44.690
可能有点难

00:00:44.689 --> 00:00:46.585
稍后我再检查一下

00:00:46.585 --> 00:00:48.939
我将查看最后这个小括号

00:00:48.939 --> 00:00:50.579
如果存在的话

00:00:50.579 --> 00:00:53.460
我将从中提取日期

00:00:53.460 --> 00:00:56.259
如果不存在 则不希望提取日期

00:00:56.259 --> 00:01:02.354
如果最后一部分等于这个小括号

00:01:02.354 --> 00:01:04.784
那么我将提取日期

00:01:04.784 --> 00:01:06.810
否则设为 nan

00:01:06.810 --> 00:01:10.769
表示没有相关日期

00:01:11.329 --> 00:01:15.914
我将创建一个新的列 date

00:01:15.915 --> 00:01:23.000
将此函数应用到 movies 列上

00:01:23.000 --> 00:01:26.379
然后看看结果

00:01:26.379 --> 00:01:29.739
哪里出错了

00:01:29.739 --> 00:01:34.704
抱歉这个应该为 x

00:01:34.704 --> 00:01:38.959
然后是 movies

00:01:39.000 --> 00:01:42.170
应该叫做 movie

00:01:42.170 --> 00:01:46.570
Yeah列本身叫做 movie 这个是 x

00:01:46.569 --> 00:01:49.899
我们将转到 movie 列

00:01:49.900 --> 00:01:53.385
应用此函数并寻找此结束标记

00:01:53.385 --> 00:01:58.689
如果存在 则根据这部分提取日期

00:01:58.689 --> 00:02:01.129
否则设为 nan

00:02:05.269 --> 00:02:11.314
我认为日期最简单

00:02:11.314 --> 00:02:13.525
再创建一个函数

00:02:13.525 --> 00:02:16.740
叫做 add_movie_year()

00:02:16.740 --> 00:02:19.725
向其传入一个值

00:02:19.724 --> 00:02:21.219
可以想象

00:02:21.219 --> 00:02:23.444
我们将向它们应用此函数

00:02:23.444 --> 00:02:26.280
我们将提取前两部分

00:02:26.280 --> 00:02:32.060
提取前两个字符

00:02:32.060 --> 00:02:36.305
如果等于某个年份 返回 1

00:02:36.305 --> 00:02:44.379
将这部分放入 if-else 块中

00:02:44.379 --> 00:02:48.144
否则返回 0

00:02:48.145 --> 00:02:53.300
这个函数将查看前两个字母

00:02:53.300 --> 00:02:56.210
我将传入这个列表

00:02:56.210 --> 00:02:58.655
遍历这些列表项

00:02:58.655 --> 00:03:01.495
然后应用此函数并创建新的列

00:03:01.495 --> 00:03:09.890
日期是 18 或 19

00:03:09.889 --> 00:03:11.599
或 20 开头

00:03:11.599 --> 00:03:16.519
我将为每项

00:03:16.520 --> 00:03:21.784
创建一个新的列 以年份命名

00:03:21.784 --> 00:03:24.109
这行代码将创建一个新的列名称

00:03:24.110 --> 00:03:27.445
并附加到 movies 数据集上

00:03:27.444 --> 00:03:30.198
命名为 1800s 1900s 或 2000s

00:03:30.199 --> 00:03:33.620
我们将 add_movie_year 函数

00:03:33.620 --> 00:03:39.944
应用到当前的 date 列

00:03:39.944 --> 00:03:42.819
这行代码会将该函数应用到此列上

00:03:42.819 --> 00:03:45.889
返回 1 或 0

00:03:45.889 --> 00:03:49.959
并对 date 中的每个值都运行一遍

00:03:50.120 --> 00:03:54.469
应该会形成数组 返回一个 1 或 0

00:03:54.469 --> 00:04:01.479
然后放到数据集的后面

00:04:01.479 --> 00:04:03.619
Great看看运行结果

00:04:03.620 --> 00:04:06.840
所有这些电影都属于 1800 年代

00:04:11.120 --> 00:04:13.810
最后一部分是

00:04:13.810 --> 00:04:16.435
为类型创建一个虚拟列

00:04:16.435 --> 00:04:18.639
类型比较难处理

00:04:18.639 --> 00:04:20.669
因为可能属于不同的类型

00:04:20.670 --> 00:04:22.900
例如这个即是纪录片 又是短片

00:04:22.899 --> 00:04:25.089
这个即是短片 又是惊悚片

00:04:25.089 --> 00:04:27.359
可以想象

00:04:27.360 --> 00:04:28.585
就像这里显示的一样

00:04:28.584 --> 00:04:30.269
有 28 种类型

00:04:30.269 --> 00:04:34.870
我们要在 DataFrame 后面列出 28 种类型

00:04:34.870 --> 00:04:40.444
如果电影属于该类型 则输入 1 否则输入 0

00:04:40.444 --> 00:04:43.420
首先 我将创建一个方法

00:04:43.420 --> 00:04:47.049
它会拆分 genres

00:04:47.048 --> 00:04:48.919
它会接受这一部分

00:04:48.920 --> 00:04:51.360
然后拆分它们 并返回结果

00:04:51.360 --> 00:04:55.105
我们可以采用和上面相似的方法

00:04:55.105 --> 00:04:58.535
但是我将演示一个很方便的函数

00:04:58.535 --> 00:05:06.370
输入 movies.genre[0]

00:05:06.370 --> 00:05:09.959
运行 find(‘short’)

00:05:09.959 --> 00:05:14.569
它会返回该类型第一次出现时的索引

00:05:14.569 --> 00:05:17.519
再查找一次

00:05:17.519 --> 00:05:21.079
但是查找 horror 没有 horror

00:05:21.079 --> 00:05:23.599
返回 -1 表示没找到

00:05:23.600 --> 00:05:26.920
我们可以这么查找类型

00:05:26.920 --> 00:05:32.715
传入在这里创建的类型列表

00:05:32.714 --> 00:05:34.714
即这组类型

00:05:34.714 --> 00:05:38.883
输入 for g in genres;

00:05:38.884 --> 00:05:40.689
遍历这个列表

00:05:40.689 --> 00:05:43.235
看看是否存在某个类型

00:05:43.235 --> 00:05:46.725
如果存在 则返回 1

00:05:46.725 --> 00:05:51.314
否则返回 0

00:05:51.314 --> 00:05:54.528
依然需要注意 Null 值

00:05:54.528 --> 00:05:57.759
Null 值会导致属性错误

00:05:57.759 --> 00:06:00.920
将这部分放入 except 语句中

00:06:00.920 --> 00:06:02.259
我直接称之为 0

00:06:02.259 --> 00:06:04.060
你也可以返回 nan

00:06:04.060 --> 00:06:06.110
我将返回 0

00:06:06.110 --> 00:06:07.259
表示你没有列出任何类型

00:06:07.259 --> 00:06:10.300
所以我将对所有类型输出 0

00:06:10.300 --> 00:06:15.100
这或许是最好的处理方式 或许不是

00:06:15.620 --> 00:06:20.129
然后我将为每种类型添加一列

00:06:20.129 --> 00:06:24.980
我们可以使用现有的 genre 列

00:06:24.980 --> 00:06:30.840
并应用 split_genres 函数

00:06:30.839 --> 00:06:33.889
我们将此函数应用到这里的每一项上

00:06:33.889 --> 00:06:35.469
这样会创建一个数组

00:06:35.470 --> 00:06:39.845
向数组中附加每个类型

00:06:39.845 --> 00:06:47.325
如果我们查看...抱歉

00:06:47.324 --> 00:06:49.430
这里不能是 find()

00:06:49.430 --> 00:06:50.840
它不返回 true 或 false

00:06:50.839 --> 00:06:51.974
返回一个数字

00:06:51.975 --> 00:06:56.180
如果返回的数字大于 -1

00:06:56.180 --> 00:06:58.720
因为它会遍历这个类型

00:06:58.720 --> 00:07:00.450
这里是索引 0

00:07:00.449 --> 00:07:01.529
这里是索引 1

00:07:01.529 --> 00:07:02.954
这里是索引 2

00:07:02.954 --> 00:07:04.365
这里是索引 3

00:07:04.365 --> 00:07:10.415
返回的数字将在 0 到这个字符串的长度减一之间

00:07:10.415 --> 00:07:14.055
如果是任何正数或零

00:07:14.055 --> 00:07:18.750
则表明存在于该类型字符串中

00:07:18.750 --> 00:07:20.394
如果是 -1

00:07:20.394 --> 00:07:22.169
不可能小于 -1

00:07:22.170 --> 00:07:24.615
如果大于 -1 则表示存在

00:07:24.615 --> 00:07:26.295
如果是 -1

00:07:26.295 --> 00:07:27.490
则表示不存在

00:07:27.490 --> 00:07:29.389
这是一种代码实现方式

00:07:29.389 --> 00:07:33.069
或许还有其他方式

00:07:34.069 --> 00:07:37.719
我的标题出错了

00:07:42.410 --> 00:07:47.370
不喜欢看到这个错误 这段代码能运行

00:07:47.370 --> 00:07:50.500
可以看到后面有好几列

00:07:50.500 --> 00:07:54.709
看到了好多的 0

00:07:54.709 --> 00:07:56.834
我们改一改 使这里...

00:07:56.834 --> 00:08:01.870
Yeah使这里出现一个 1

00:08:08.420 --> 00:08:19.860
还不行啊GreatYeah这里有个 1 这里有个 1

00:08:19.860 --> 00:08:24.410
与之前看到的一致

00:08:30.680 --> 00:08:33.759
使用这些时间戳时

00:08:33.759 --> 00:08:38.549
我们需要使用这个 datetime 库

00:08:54.129 --> 00:08:56.360
快速搜索下

00:08:56.360 --> 00:09:00.139
我搜索了 timestamp to date python

00:09:00.139 --> 00:09:01.429
快速搜索后

00:09:01.429 --> 00:09:06.859
第一个链接将显示我采用的这个方法

00:09:06.860 --> 00:09:10.205
也就是这个 fromtimestamp

00:09:10.205 --> 00:09:12.840
然后将日期变成

00:09:12.840 --> 00:09:15.665
年 月 日 时 分 秒

00:09:15.664 --> 00:09:20.424
通过它可以创建这个函数

00:09:20.424 --> 00:09:23.224
称之为 change_timestamp

00:09:23.225 --> 00:09:27.740
它将接受这个时间戳

00:09:28.230 --> 00:09:31.045
使用这个库

00:09:31.044 --> 00:09:36.589
在 fromtimestamp 中接受这项的整数形式

00:09:36.590 --> 00:09:39.070
它必须是数字

00:09:39.070 --> 00:09:40.375
原来是字符串

00:09:40.375 --> 00:09:42.710
然后使用看到的相同方法

00:09:42.710 --> 00:09:47.780
将它变成字符串

00:09:47.779 --> 00:09:53.615
我只要这部分 并且我将更改此部分

00:09:53.615 --> 00:10:00.090
现在我们可以将此函数应用到这个 timestamp 列了

00:10:03.860 --> 00:10:06.735
Ok看看运行效果

00:10:06.735 --> 00:10:13.360
Great可以看出 我们将该 timestamp 变成了这个 date_time

