WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.250
完成很多复杂的流程之后

00:00:02.250 --> 00:00:04.785
我们将编写几个不同的函数

00:00:04.785 --> 00:00:07.169
并利用在上面获得的结果

00:00:07.169 --> 00:00:11.789
根据相互关联的用户向任何用户推荐电影

00:00:11.789 --> 00:00:15.119
并且会推荐用户没有看过的电影

00:00:15.119 --> 00:00:19.259
我们将根据相似用户向用户推荐新电影

00:00:19.260 --> 00:00:22.335
但是推荐的是用户之前没有看过的电影

00:00:22.335 --> 00:00:26.100
下面有很多函数

00:00:26.100 --> 00:00:29.445
我们想要获取最近邻

00:00:29.445 --> 00:00:31.019
我们将找到最近邻

00:00:31.019 --> 00:00:32.655
并且将获取用户喜欢的电影

00:00:32.655 --> 00:00:37.524
这里有个最低评分

00:00:37.524 --> 00:00:40.174
我们将提取并推荐这些片名

00:00:40.174 --> 00:00:45.034
然后对所有用户都采取这一流程

00:00:45.034 --> 00:00:48.619
我们在这里

00:00:48.619 --> 00:00:53.070
计算了每对用户的欧几里得距离

00:00:53.070 --> 00:00:55.549
这个存储的就是

00:00:55.549 --> 00:00:57.949
每对用户的结果

00:00:57.950 --> 00:01:03.890
与针对两对用户

00:01:03.890 --> 00:01:05.780
计算相关系数相似

00:01:05.780 --> 00:01:08.000
但是这里使用的是距离

00:01:08.000 --> 00:01:09.909
所以不会出现任何 NaN

00:01:09.909 --> 00:01:13.069
在下面

00:01:13.209 --> 00:01:16.159
可以看到 user1 user2

00:01:16.159 --> 00:01:17.599
还有距离

00:01:17.599 --> 00:01:20.809
两个完全一样的用户之间没有距离

00:01:20.810 --> 00:01:22.549
距离越小

00:01:22.549 --> 00:01:24.259
两个用户越相似

00:01:24.260 --> 00:01:26.630
这个欧几里得距离衡量方法

00:01:26.629 --> 00:01:29.750
比我们的相关系数衡量方法更好

00:01:29.750 --> 00:01:32.435
因为它没有任何 NaN

00:01:32.435 --> 00:01:36.829
我们将使用该 DataFrame

00:01:36.829 --> 00:01:40.640
提取出与该用户最相似的用户

00:01:40.640 --> 00:01:43.459
我们将按照与特定用户最相似的用户

00:01:43.459 --> 00:01:45.500
对这个进行排序

00:01:45.500 --> 00:01:47.900
这样就只查看

00:01:47.900 --> 00:01:50.885
用户 1 等于用户2 的情况

00:01:50.885 --> 00:01:55.185
按照从小到大的顺序排列欧几里得距离

00:01:55.185 --> 00:01:58.534
然后提取出前 n 个值

00:01:58.534 --> 00:02:00.679
也就是前 n 个相似用户

00:02:00.680 --> 00:02:03.260
我们将编写一个函数

00:02:03.260 --> 00:02:08.659
一种方法是从该 DataFrame 中

00:02:08.659 --> 00:02:12.259
提取出等于这个用户的用户

00:02:12.259 --> 00:02:13.745
当你给我特定用户后

00:02:13.745 --> 00:02:17.289
我将从该 DataFrame 中仅提取这些用户

00:02:17.289 --> 00:02:20.780
然后按照欧几里得距离列排序

00:02:20.780 --> 00:02:24.020
所以按照这个排序

00:02:24.020 --> 00:02:28.070
看看这里返回的数据 将按照这个排序

00:02:28.069 --> 00:02:32.060
我将仅从该 DataFrame 中

00:02:32.060 --> 00:02:33.740
提取与你提供的用户相关的用户

00:02:33.740 --> 00:02:36.350
然后按照欧几里得距离排序

00:02:36.349 --> 00:02:38.449
接下来

00:02:38.449 --> 00:02:43.189
我将从第一个用户开始提取

00:02:43.189 --> 00:02:45.229
因为最上面的始终是用户本身

00:02:45.229 --> 00:02:48.185
一直提取到最后

00:02:48.185 --> 00:02:52.354
获取 user2 列表

00:02:52.354 --> 00:02:56.664
这个列表排除了特定用户本身

00:02:56.664 --> 00:03:03.340
并按照从近到远的顺序获取所有相似用户

00:03:07.689 --> 00:03:13.405
我们可以测试一下将这段代码放到这里

00:03:13.405 --> 00:03:22.814
假设我们想要获取用户 2 的最近邻

00:03:22.814 --> 00:03:25.594
Great这些值按照欧几里得距离

00:03:25.594 --> 00:03:30.389
从近到远排序

