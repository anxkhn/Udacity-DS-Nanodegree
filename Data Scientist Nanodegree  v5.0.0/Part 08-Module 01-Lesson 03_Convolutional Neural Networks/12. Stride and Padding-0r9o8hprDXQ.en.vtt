WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.819
We've seen that you can control the behavior of

00:00:02.819 --> 00:00:07.875
a convolutional layer by specifying the number of filters and the size of each filter.

00:00:07.875 --> 00:00:12.164
For instance, to increase the number of nodes in a convolutional layer,

00:00:12.164 --> 00:00:14.354
you could increase the number of filters.

00:00:14.355 --> 00:00:17.070
To increase the size of the detected patterns,

00:00:17.070 --> 00:00:19.365
you could increase the size of your filter.

00:00:19.364 --> 00:00:22.649
But there are even more hyper parameters that you can tune.

00:00:22.649 --> 00:00:27.509
One of these hyper parameters is referred to as the stride of the convolution.

00:00:27.510 --> 00:00:32.048
The stride is just the amount by which the filter slides over the image.

00:00:32.048 --> 00:00:35.550
In the example in the previous video, the stride was one.

00:00:35.549 --> 00:00:40.329
And we moved the convolution window horizontally and vertically across the image,

00:00:40.329 --> 00:00:41.809
one pixel at a time.

00:00:41.810 --> 00:00:44.804
A stride of one makes the convolutional layer

00:00:44.804 --> 00:00:48.329
roughly the same width and height as the input image.

00:00:48.329 --> 00:00:54.474
In this animation, we've drawn the purple convolutional layer as stacked feature maps.

00:00:54.475 --> 00:00:57.524
If we instead make the stride equal to two,

00:00:57.524 --> 00:01:02.079
the convolutional layer is about half of the width and height of the image.

00:01:02.079 --> 00:01:06.480
I say roughly because it depends on what you do at the edge of your image.

00:01:06.480 --> 00:01:09.180
To see how the treatment of the edges will matter,

00:01:09.180 --> 00:01:13.330
consider our toy example of a five-by-five grayscale image.

00:01:13.329 --> 00:01:17.355
Say, we have a different filter now with the height and width of two.

00:01:17.355 --> 00:01:19.785
Say, the stride is also two.

00:01:19.784 --> 00:01:24.000
Then as before, we start with the filter in the top left corner of

00:01:24.000 --> 00:01:29.653
the image and calculate the value for the first node and the convolutional layer.

00:01:29.653 --> 00:01:34.005
We then move the filter two units to the right and do the same.

00:01:34.004 --> 00:01:37.819
But when we move the filter two more units to the right,

00:01:37.819 --> 00:01:42.074
the filter extends outside the image. What do we do now?

00:01:42.075 --> 00:01:45.715
Do we still want to keep the corresponding convolutional node?

00:01:45.715 --> 00:01:49.730
For now, let's just populate the places where the filter

00:01:49.730 --> 00:01:54.170
extends outside with a question mark and proceed as planned.

00:01:54.170 --> 00:01:59.465
So now, how do we deal with these nodes where the filter extended outside the image?

00:01:59.465 --> 00:02:01.835
We could, as a first option,

00:02:01.834 --> 00:02:03.449
just get rid of them.

00:02:03.450 --> 00:02:05.495
Note that if we choose this option,

00:02:05.495 --> 00:02:07.954
it's possible that our convolutional layer has

00:02:07.954 --> 00:02:11.925
no information about some regions of the image.

00:02:11.925 --> 00:02:16.955
This is the case here for the right and bottom edges of the image.

00:02:16.955 --> 00:02:18.785
As a second option,

00:02:18.784 --> 00:02:22.009
we could plan ahead for this case by padding the image with

00:02:22.009 --> 00:02:26.514
zeros to give the filter more space to move.

00:02:26.514 --> 00:02:29.494
Now when we populate the convolutional layer,

00:02:29.495 --> 00:02:33.073
we get contributions from every region in the image.

00:02:33.073 --> 00:02:35.870
We can specify which option we'd like to be

00:02:35.870 --> 00:02:40.995
the case by setting what's known as the padding for our convolutional layer.

00:02:40.995 --> 00:02:44.770
If you prefer the first case where you're okay with

00:02:44.770 --> 00:02:47.844
potentially losing some nodes in the convolutional layer,

00:02:47.844 --> 00:02:49.884
you'll set your padding to valid.

00:02:49.884 --> 00:02:51.250
On the other hand,

00:02:51.250 --> 00:02:53.004
if you prefer the second case,

00:02:53.004 --> 00:02:54.919
you'll set your padding to same.

00:02:54.919 --> 00:02:56.619
In the next lesson,

00:02:56.620 --> 00:02:59.020
we'll show you how to pass these arguments into Keras

00:02:59.020 --> 00:03:01.689
when tuning your convolutional network.

