WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.830
在这次练习中

00:00:01.830 --> 00:00:04.589
我们来看几种用 Pandas 删除缺失值的方式

00:00:04.589 --> 00:00:09.705
在 Python 中主要有两个库可以用来删除缺失值

00:00:09.705 --> 00:00:11.970
一个是 scikit-learn 另一个是 Pandas

00:00:11.970 --> 00:00:15.615
在这次的练习中 我们主要用 Pandas

00:00:15.615 --> 00:00:20.660
在这里 我们再次导入了很多库

00:00:20.660 --> 00:00:25.274
包括检查答案的测试文件

00:00:25.274 --> 00:00:30.209
这里我们创建了数据

00:00:30.210 --> 00:00:33.719
其中只是穿插了一些缺失值的 从 1 - 18 的数字

00:00:33.719 --> 00:00:38.504
主要用来演示

00:00:38.505 --> 00:00:43.500
如何从数据集中删除不同的内容

00:00:43.500 --> 00:00:48.359
我们的数据是 small_dataset 这个要求是 删除所有存在缺失值的行

00:00:48.359 --> 00:00:53.234
有一个方法叫 dropna 可以用来删除缺失值

00:00:53.234 --> 00:00:59.460
主要需要调整两个参数 一个是 how 另一个是 axis

00:00:59.460 --> 00:01:01.890
axis 用来设定

00:01:01.890 --> 00:01:04.349
删除的是行还是列 我经常会忘记

00:01:04.349 --> 00:01:08.444
所以先尝试一下 看看会不会得到预期的效果

00:01:08.444 --> 00:01:11.989
先在小的数据集上尝试是很有用的

00:01:11.989 --> 00:01:14.379
这样可以在对全部数据集进行处理之前 看到尝试效果

00:01:14.379 --> 00:01:18.099
这样可以在对全部数据集进行处理之前 看到尝试效果

00:01:18.099 --> 00:01:21.789
在这里 我们想要删除所有包含缺失值的行

00:01:21.790 --> 00:01:26.875
也就是删除索引为 0、2、3 的行

00:01:26.875 --> 00:01:28.450
保留索引为 1、4、5 的行

00:01:28.450 --> 00:01:30.040
保留索引为 1、4、5 的行

00:01:30.040 --> 00:01:33.445
我先设置 axis 等于 0

00:01:33.444 --> 00:01:35.382
可以看到是预期的结果

00:01:35.382 --> 00:01:38.229
然后再来运行一下测试

00:01:38.230 --> 00:01:40.255
看上去也是对的

00:01:40.254 --> 00:01:44.125
下一个问题是 删除整行都是缺失值的行

00:01:44.125 --> 00:01:50.340
对这个数据集来说 就是说只删除这一行数据

00:01:50.340 --> 00:01:55.439
这一行全是缺失值 在这里 我们将用到 how 参数

00:01:55.439 --> 00:02:02.325
small_dataset.dropna()

00:02:02.325 --> 00:02:09.284
然后将 how 设置为 all 然后像之前那样设置 axis 等于 0

00:02:09.284 --> 00:02:11.905
axis = 0 指的是删除行

00:02:11.905 --> 00:02:15.397
axis = 1 指的是删除列

00:02:15.397 --> 00:02:18.269
看上去不错

00:02:18.270 --> 00:02:21.784
第三题 删除第三列存在缺失值的行

00:02:21.784 --> 00:02:24.174
这个练习很有用

00:02:24.175 --> 00:02:29.215
同样使用 small_dataset.dropna()

00:02:29.215 --> 00:02:31.990
有个非常有用的 subset 参数

00:02:31.990 --> 00:02:33.189
有个非常有用的 subset 参数

00:02:33.189 --> 00:02:36.280
subset 的值就是你想要检查的列名列表

00:02:36.280 --> 00:02:39.564
subset 的值就是你想要检查的列名列表

00:02:39.564 --> 00:02:46.090
这里我们想要检查的是 col3 这一列有缺失值就要删除

00:02:46.090 --> 00:02:49.465
不要求全部都是缺失值 所以这里 how 应该是 any

00:02:49.465 --> 00:02:52.090
因为 any 是 how 参数的默认值 所以这里也可以不用设置

00:02:52.090 --> 00:02:55.167
因为要删除的是行

00:02:55.167 --> 00:03:00.024
所以要设置 axis 等于 0

00:03:00.024 --> 00:03:04.185
看起来 我们做的是对的

00:03:04.185 --> 00:03:06.314
回到上面

00:03:06.314 --> 00:03:10.484
应该删除的是索引 0 和 2

00:03:10.485 --> 00:03:12.934
也就是说要保留 1、3、4、5

00:03:12.933 --> 00:03:17.980
因为索引 0 和 2 的行在 col3 有缺失值

00:03:17.980 --> 00:03:20.280
应该是正确的

00:03:20.280 --> 00:03:23.395
运行测试代码

00:03:23.395 --> 00:03:24.924
果然是对的

00:03:24.924 --> 00:03:28.090
最后一个练习是

00:03:28.090 --> 00:03:31.900
删除第一列或第三列中存在缺失值的行

00:03:31.900 --> 00:03:37.375
要删除行 所以再次将 axis 设置成 0

00:03:37.375 --> 00:03:44.754
这里的 subset 应该是 col1 和 col3

00:03:44.754 --> 00:03:49.120
题目限定的是第三列或第一列

00:03:49.120 --> 00:03:54.009
所以 subset 要设置为这个列表 如果有 5 个要检查的列

00:03:54.009 --> 00:03:55.824
就要给出包含这 5 个列名的列表 如果这些列中包含缺失值

00:03:55.824 --> 00:03:59.219
就要给出包含这 5 个列名的列表 如果这些列中包含缺失值

00:03:59.219 --> 00:04:00.675
其所在行就会被删除 回到上面

00:04:00.675 --> 00:04:02.355
其所在行就会被删除 回到上面

00:04:02.354 --> 00:04:03.959
来确保最终结果是正确的

00:04:03.960 --> 00:04:06.270
col1 可以看出要删除索引 2 和 3

00:04:06.270 --> 00:04:10.932
col3 则表明要删除索引 0 和 2

00:04:10.931 --> 00:04:13.338
所以我们要删除 0、2、3 保留 1、4、5

00:04:13.338 --> 00:04:16.632
所以我们要删除 0、2、3 保留 1、4、5

00:04:16.632 --> 00:04:19.305
所以我们要删除 0、2、3 保留 1、4、5

00:04:19.305 --> 00:04:24.030
结果是 1、4、5 符合预期 运行测试代码

00:04:24.029 --> 00:04:26.069
结果是 – Nice job

00:04:26.069 --> 00:04:28.870
太棒了! 我们可以继续下一个练习了

