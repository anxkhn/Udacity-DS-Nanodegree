WEBVTT
Kind: captions
Language: pt-BR

00:00:00.170 --> 00:00:03.045
Para as duas últimas perguntas
relativas a quais variáveis

00:00:03.079 --> 00:00:06.002
estão relacionadas a salário
e satisfação com o trabalho,

00:00:06.036 --> 00:00:10.472
cada uma envolverá não só
a construção de um modelo preditivo,

00:00:10.506 --> 00:00:12.999
mas também a descoberta
e interpretação

00:00:13.033 --> 00:00:15.956
dos componentes influentes
do modelo que construirmos.

00:00:15.990 --> 00:00:18.584
Para começar, vamos ler
as bibliotecas necessárias

00:00:18.618 --> 00:00:21.121
e dar uma olhada em algumas
colunas de interesse.

00:00:21.155 --> 00:00:22.705
Aqui estão as bibliotecas.

00:00:22.739 --> 00:00:26.106
Observe que temos NumPy e Pandas,
que temos usado muito.

00:00:26.140 --> 00:00:30.233
E temos duas bibliotecas
específicas de visualizações,

00:00:30.267 --> 00:00:33.053
que são Matplotlib e Seaborn.

00:00:33.087 --> 00:00:35.970
Também temos
esta inline Matplotlib,

00:00:36.004 --> 00:00:39.612
para que nossos gráficos sejam
renderizados em nossos notebooks.

00:00:39.646 --> 00:00:41.574
Aqui em cima,
estas três linhas

00:00:41.608 --> 00:00:44.371
são usadas para construir
o modelo preditivo.

00:00:44.405 --> 00:00:46.607
Temos train_test_split,

00:00:46.641 --> 00:00:49.617
que dividirá nossos dados
em treinamento e teste

00:00:49.651 --> 00:00:52.659
para que o modelo que construirmos
no conjunto de treinamento

00:00:52.693 --> 00:00:55.044
se estenda bem
para nossos dados de teste.

00:00:55.078 --> 00:00:58.420
Nesta parte,
estas são métricas comuns para usar

00:00:58.454 --> 00:01:02.106
com qualquer tipo
de variável de resposta contínua,

00:01:02.140 --> 00:01:04.743
r2_score
e o erro quadrático médio.

00:01:04.777 --> 00:01:07.804
Estou usando
um modelo linear simples,

00:01:07.838 --> 00:01:11.254
mas há vários outros modelos
preditivos que você pode escolher

00:01:11.288 --> 00:01:13.299
para melhor se ajustar
aos seus dados.

00:01:13.332 --> 00:01:15.899
Dependendo do seu conhecimento
de aprendizado de máquina,

00:01:15.932 --> 00:01:18.905
talvez você fique confortável
com alguns deles.

00:01:18.939 --> 00:01:22.624
Você vai se aprofundar
no funcionamento de muitos deles

00:01:22.658 --> 00:01:24.540
posteriormente neste programa.

00:01:24.574 --> 00:01:28.233
Se lermos os dados, podemos dar
uma olhada no cabeçalho deles,

00:01:28.267 --> 00:01:32.674
que é igual ao que você já viu
em outros vídeos.

00:01:32.708 --> 00:01:35.602
Também podemos
dar uma olhada rápida

00:01:35.636 --> 00:01:40.082
nas variáveis contínuas,
e você pode ver

00:01:40.116 --> 00:01:43.549
que estas são as variáveis contínuas
no conjunto de dados.

00:01:43.583 --> 00:01:46.169
E aqui está um resumo rápido

00:01:46.203 --> 00:01:49.554
do máximo, 75%, 50%,

00:01:49.588 --> 00:01:52.352
25%, o mínimo,
o desvio padrão, a média.

00:01:52.386 --> 00:01:55.083
Essa contagem é muito útil,
pois ela pode nos mostrar

00:01:55.117 --> 00:01:59.223
quantos desses dados estão
ausentes no conjunto de dados.

00:01:59.257 --> 00:02:04.947
Observe que apenas 12.891
indivíduos postaram o salário,

00:02:04.981 --> 00:02:09.102
e que também há pontos
ausentes em todos estes,

00:02:09.136 --> 00:02:14.265
mas porque o número total
de respondentes parece ser 51.000.

00:02:14.299 --> 00:02:16.747
Também podemos dar
uma olhada rápida nisso.

00:02:16.781 --> 00:02:20.266
É. Então, 51.392
é o número de respondentes.

00:02:20.300 --> 00:02:23.979
Logo, qualquer coluna
em que apareçam menos do que isso,

00:02:24.013 --> 00:02:27.007
essencialmente,
tem algum dado ausente.

00:02:27.041 --> 00:02:30.862
Uma das maneiras mais fáceis de
visualizar algumas dessas variáveis

00:02:30.896 --> 00:02:33.448
é construindo um histograma.

00:02:33.482 --> 00:02:36.301
É muito útil.

00:02:36.335 --> 00:02:41.076
Geralmente, coloco ponto e vírgula
para ficar mais limpo.

00:02:41.110 --> 00:02:45.507
Mas observe que, aqui, cada
respondente só aparece uma vez,

00:02:45.541 --> 00:02:48.002
por isso temos
este gráfico horroroso.

00:02:48.036 --> 00:02:51.698
Observe que há uma distribuição
inclinada para a esquerda

00:02:51.732 --> 00:02:54.559
outra para a esquerda
em satisfação com o trabalho,

00:02:54.593 --> 00:02:56.797
satisfação
com o Stack Overflow.

00:02:56.831 --> 00:02:59.554
Uma distribuição inclinada
para a direita em salário,

00:02:59.588 --> 00:03:03.450
outra para a direita
em horas trabalhadas por semana

00:03:03.484 --> 00:03:05.407
e salário esperado,

00:03:05.441 --> 00:03:08.162
e outra para a esquerda
em satisfação com a carreira.

00:03:08.196 --> 00:03:11.585
Essas pessoas parecem satisfeitas
com seus empregos e carreiras

00:03:11.619 --> 00:03:15.381
e, de alguma forma,
evitam trabalhar muito.

00:03:15.414 --> 00:03:17.473
Essa é uma forma
de ver os dados.

00:03:17.507 --> 00:03:21.920
Outro gráfico legal que faço muito
ao começar essas análises

00:03:21.954 --> 00:03:23.764
é o mapa de calor.

00:03:23.798 --> 00:03:26.264
Então, se olharmos...

00:03:26.298 --> 00:03:28.988
Este sns
é a biblioteca Seaborn,

00:03:29.022 --> 00:03:31.113
e ela tem um mapa de calor
embutido.

00:03:31.147 --> 00:03:33.821
Você pode passar
uma matriz de correlação,

00:03:33.855 --> 00:03:39.027
executando o método principal
no seu dataframe.

00:03:39.061 --> 00:03:43.987
Vou adicionar uma anotação
para passar os números.

00:03:44.021 --> 00:03:48.699
Então, basicamente, isso vai
formatar meus valores

00:03:48.733 --> 00:03:52.038
para terem
apenas 2 casas decimais.

00:03:52.072 --> 00:03:55.323
Então, não só aqui...

00:03:55.357 --> 00:03:59.107
De novo, coloco
ponto e vírgula no fim

00:03:59.141 --> 00:04:01.183
para não receber
a primeira parte.

00:04:01.217 --> 00:04:03.170
Isto gera
uma matriz de correlação

00:04:03.204 --> 00:04:05.914
das variáveis quantitativas
do seu conjunto de dados.

00:04:05.948 --> 00:04:08.594
Uma das primeiras coisas
que tento fazer

00:04:08.628 --> 00:04:13.676
é criar o dataframe
de todas as colunas que vou usar

00:04:13.710 --> 00:04:16.988
para predizer a resposta,
e depois,

00:04:17.022 --> 00:04:18.192
a outra coisa que faço

00:04:18.226 --> 00:04:22.030
é pegar a variável
que estou tentando predizer.

00:04:22.064 --> 00:04:24.747
No caso, vou colocar salário.
Por quê?

00:04:24.781 --> 00:04:26.830
Porque é a variável
que quero predizer.

00:04:26.864 --> 00:04:30.410
E quero dar uma lista de todos
os nomes de colunas que vou usar

00:04:30.444 --> 00:04:32.021
para tentar predizer
a resposta.

00:04:32.055 --> 00:04:33.979
Para começar,

00:04:34.013 --> 00:04:37.752
vamos passar todas as variáveis
quantitativas que temos aqui.

00:04:38.180 --> 00:04:42.078
Satisfação com a carreira...
Basicamente, qualquer uma destas.

00:04:42.112 --> 00:04:44.064
Não vou passar
o número de respondentes

00:04:44.098 --> 00:04:47.555
porque não quer dizer nada
para mim.

00:04:47.589 --> 00:04:51.231
Então, satisfação com o trabalho,
horas por semana

00:04:51.265 --> 00:04:55.416
e satisfação
com o Stack Overflow.

00:04:55.877 --> 00:04:59.590
Também é o caso que,
nos modelos scikit-learn embutidos,

00:04:59.624 --> 00:05:02.488
você pode passar
um interceto por padrão,

00:05:02.522 --> 00:05:05.208
de modo que não precisa
armazená-lo na matriz X aqui.

00:05:05.242 --> 00:05:08.015
É um argumento que você pode
passar para qualquer modelo

00:05:08.049 --> 00:05:10.866
que tiver em scikit-learn.

00:05:10.900 --> 00:05:13.118
Então, não vou me preocupar
com isso.

00:05:13.152 --> 00:05:17.211
Essencialmente, o que gosto
de fazer em seguida

00:05:17.245 --> 00:05:21.539
é dividir o conjunto de dados
em treinamento e teste.

00:05:21.573 --> 00:05:23.653
O modo como isso funciona é...

00:05:23.687 --> 00:05:26.511
Normalmente, preciso consultar
a documentação para isso.

00:05:26.545 --> 00:05:30.692
Essencialmente, podemos executar
este train_test_split

00:05:30.726 --> 00:05:33.382
que lemos acima,

00:05:33.416 --> 00:05:37.858
e passar para ele
nossa matriz X e a resposta.

00:05:37.892 --> 00:05:41.052
Então, passamos
um tamanho de teste.

00:05:41.086 --> 00:05:47.018
Muitas vezes, você pode passar
como um estado aleatório.

00:05:47.052 --> 00:05:50.229
Fazemos um aleatório
no número 42,

00:05:50.263 --> 00:05:52.546
que é a resposta
para tudo no mundo.

00:05:52.580 --> 00:05:57.916
Observe que ele pega a matriz X
que acabamos de criar aqui,

00:05:57.950 --> 00:06:00.994
que são todas as variáveis
que queremos usar para predizer,

00:06:01.028 --> 00:06:03.753
ele pega a resposta,
que é esta variável aqui,

00:06:03.787 --> 00:06:06.504
e vai dividi-las
em dois conjuntos separados.

00:06:06.538 --> 00:06:10.524
Ele vai dividir aleatoriamente.
Partes vão para o treinamento

00:06:10.558 --> 00:06:13.691
e partes vão para o teste,
e vai dividir aleatoriamente isto.

00:06:13.725 --> 00:06:19.053
Partes vão para o treinamento
e outras partes vão para o teste.

00:06:19.087 --> 00:06:21.219
As partes que forem
para o teste y

00:06:21.253 --> 00:06:23.757
corresponderão às partes
que forem para o teste X.

00:06:23.791 --> 00:06:25.741
As partes que forem
para o treinamento y

00:06:25.775 --> 00:06:28.755
corresponderão às linhas
que forem para o treinamento X.

00:06:29.143 --> 00:06:33.629
Basicamente, isso diz que queremos
que o tamanho do teste tenha 30%

00:06:33.663 --> 00:06:37.057
das linhas originais
destes conjuntos de dados.

00:06:37.091 --> 00:06:40.242
O estado aleatório
é algo útil de definir

00:06:40.276 --> 00:06:43.656
caso você decida passar o conjunto
de dados para outra pessoa,

00:06:43.690 --> 00:06:46.646
e queira que ela obtenha
exatamente a mesma

00:06:46.680 --> 00:06:48.440
divisão dos dados
que você usou.

00:06:48.474 --> 00:06:50.517
Se você não definir
o estado aleatório,

00:06:50.551 --> 00:06:53.828
as linhas que a pessoa vai obter
em seu treinamento e teste

00:06:53.862 --> 00:06:56.978
poderão ser totalmente diferentes
das linhas que você obteve.

00:06:57.012 --> 00:06:58.614
O que vamos fazer a seguir

00:06:58.648 --> 00:07:02.036
é instanciar nosso modelo
de regressão linear.

00:07:02.070 --> 00:07:04.673
Para ajustar um modelo
de aprendizado supervisionado,

00:07:04.707 --> 00:07:06.849
é preciso instanciar primeiro.

00:07:06.883 --> 00:07:10.615
Primeiro,
instancie seu modelo.

00:07:10.649 --> 00:07:14.608
Depois, ajuste o modelo
aos dados de treinamento.

00:07:14.642 --> 00:07:18.740
Depois, prediga
alguns dados de teste.

00:07:18.774 --> 00:07:24.691
Depois, normalmente,
você pontua o seu modelo no teste.

00:07:24.725 --> 00:07:28.607
Ou seja, você compara o que sabe
que é verdade nos dados de teste

00:07:28.641 --> 00:07:30.421
ao que você predisse
ser verdade.

00:07:30.455 --> 00:07:34.915
Essa pontuação é uma forma
de comparar suas predições

00:07:34.949 --> 00:07:37.323
de um modelo
às do modelo seguinte.

00:07:37.357 --> 00:07:39.324
Esse costuma ser meu processo.

00:07:39.358 --> 00:07:42.128
A primeira coisa a fazer
é essa etapa de instanciação.

00:07:42.162 --> 00:07:45.211
Vou instanciar
meu modelo linear.

00:07:45.245 --> 00:07:50.279
Podemos fazer isso
com o que você viu antes.

00:07:50.313 --> 00:07:52.098
Outra coisa muito importante

00:07:52.132 --> 00:07:56.250
é que, sempre que trabalhar
com esses modelos,

00:07:56.284 --> 00:07:59.565
você deve normalizar os dados
de alguma forma.

00:07:59.599 --> 00:08:02.644
Não importa se está construindo
redes neurais,

00:08:02.678 --> 00:08:06.331
ou construindo qualquer modelo
de aprendizado supervisionado,

00:08:06.365 --> 00:08:09.463
e isso vale até para vários
modelos não supervisionados,

00:08:09.497 --> 00:08:12.122
mas você deve padronizar
ou normalizar seus dados.

00:08:12.156 --> 00:08:14.922
É algo seguro a fazer
com quase qualquer modelo linear.

00:08:14.956 --> 00:08:18.890
A única desvantagem nisso
é que pode levar a uma redução

00:08:18.924 --> 00:08:21.825
da sua interpretação
dos recursos,

00:08:21.859 --> 00:08:24.873
mas acho que isso é compensado

00:08:24.907 --> 00:08:28.974
em termos da capacidade
desses modelos de detectar

00:08:29.008 --> 00:08:32.487
as diferenças que realmente
importam no conjunto de dados.

00:08:32.521 --> 00:08:35.082
A seguir,
vamos ajustar o modelo.

00:08:35.116 --> 00:08:37.004
Vamos fazer isso

00:08:37.038 --> 00:08:38.783
para podermos dar uma olhada.

00:08:38.817 --> 00:08:40.471
Se olharmos X.head,

00:08:40.505 --> 00:08:43.755
vemos que ele dividiu
o conjunto de dados,

00:08:43.789 --> 00:08:47.694
e temos somente
as colunas que especificamos,

00:08:47.728 --> 00:08:53.069
e ele tem todas, enquanto que,
se olharmos X_train.head,

00:08:53.103 --> 00:08:57.323
vemos que as linhas de cima
não estão indexadas da mesma forma.

00:08:57.357 --> 00:08:59.445
Se fizermos
o conjunto de teste,

00:08:59.479 --> 00:09:01.517
teremos um conjunto
totalmente diferente.

00:09:01.551 --> 00:09:04.520
Se olharmos
a forma dessas coisas,

00:09:04.554 --> 00:09:09.277
veremos que há
15.000 linhas no teste.

00:09:09.311 --> 00:09:11.843
E, se olharmos
o conjunto de treinamento,

00:09:11.877 --> 00:09:15.329
veremos que há quase 36.000

00:09:15.363 --> 00:09:18.158
no conjunto de treinamento.
É um conjunto muito maior.

00:09:18.192 --> 00:09:22.156
E o mesmo vale
para o treinamento y e o teste y.

00:09:22.190 --> 00:09:24.846
Então, vamos fazer isto...

00:09:24.880 --> 00:09:28.708
O treinamento y tem exatamente
o mesmo número de linhas,

00:09:28.742 --> 00:09:31.464
mas uma única coluna.

00:09:31.498 --> 00:09:34.142
Só tem uma coluna.

00:09:34.176 --> 00:09:36.829
Podemos fazer o mesmo
com o conjunto de teste,

00:09:36.863 --> 00:09:40.242
e observe que é só uma coluna
e que os índices são correspondentes

00:09:40.276 --> 00:09:42.722
nos conjuntos
de treinamento e de teste.

00:09:42.756 --> 00:09:44.633
Certo. Agora que temos isto,

00:09:44.667 --> 00:09:46.598
vamos tentar ajustar
nosso modelo.

00:09:46.632 --> 00:09:49.472
Observe que ajustamos isto
nos dados de treinamento.

00:09:49.506 --> 00:09:52.835
Então, devemos passar X_train

00:09:52.869 --> 00:09:55.744
e y_train.

00:09:55.778 --> 00:09:58.667
Isso. Nesta ordem.

00:09:58.701 --> 00:10:00.717
Também podemos verificar
os documentos.

00:10:00.751 --> 00:10:03.823
Frequentemente, trabalho
com códigos que já escrevi

00:10:03.857 --> 00:10:06.808
ou verifico regularmente
os documentos scikit-learn.

00:10:06.842 --> 00:10:10.874
Você também pode executar
um ponto de interrogação.

00:10:10.908 --> 00:10:14.702
Então, lm_model.fit precisa
de X e y,

00:10:14.736 --> 00:10:18.099
e algum peso de amostra,
e diz o que são aquelas coisas.

00:10:18.133 --> 00:10:19.816
Então, pode ser útil.

00:10:19.850 --> 00:10:21.228
Fica assim.

00:10:21.262 --> 00:10:23.288
Quando tento executar,
recebo um erro.

00:10:23.322 --> 00:10:27.352
Então, vou parar por aqui
neste vídeo,

00:10:27.386 --> 00:10:30.795
e você vai fazer isto sozinho

00:10:30.829 --> 00:10:33.345
só para ver o que acha
que pode ter acontecido.

