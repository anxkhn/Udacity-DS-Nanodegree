WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.520
对于前面的两个问题

00:00:02.520 --> 00:00:07.265
与工资和工作满意度相关的因素有哪些

00:00:07.264 --> 00:00:11.782
我们可能需要构建某种预测模型

00:00:11.782 --> 00:00:15.570
所以我们先读取数据

00:00:15.570 --> 00:00:20.385
使用 describe 来获取数据的统计信息

00:00:20.385 --> 00:00:24.720
第一个问题是

00:00:24.719 --> 00:00:30.269
将下面的这些值和陈述匹配

00:00:30.269 --> 00:00:34.137
第一个陈述 "只是列出了每行数据索引的列"

00:00:34.137 --> 00:00:36.689
这应该是指 Respondent 这一列

00:00:36.689 --> 00:00:40.640
我们可以在前面的数据里看到

00:00:40.640 --> 00:00:43.410
这里的 1 2 3 4 5

00:00:43.409 --> 00:00:48.329
其实就是索引

00:00:48.329 --> 00:00:57.269
下一个 "满意度的最高评分是多少"

00:00:57.270 --> 00:01:02.275
其实有多个特征都跟满意度相关

00:01:02.274 --> 00:01:04.468
工作满意度、职业满意度以及

00:01:04.468 --> 00:01:08.466
对 Stack Overflow 的满意度 最大值是 10

00:01:08.465 --> 00:01:12.899
对每种满意度来说 最大值都是 10

00:01:12.900 --> 00:01:18.353
这里就是 e 选项 接下来是缺失值最多的列

00:01:18.353 --> 00:01:21.274
我们可以从上面 count 这一行里看到

00:01:21.274 --> 00:01:25.343
count 值最小的 就意味着包含最多的缺失值

00:01:25.343 --> 00:01:30.450
所以就是 ExpectedSalary

00:01:30.450 --> 00:01:35.332
拥有最多的缺失值 下一个 离散程度最高的列

00:01:35.332 --> 00:01:37.409
离散程度最高意味着其拥有

00:01:37.409 --> 00:01:42.539
最大的标准偏差 或最大值和最小值之间的差距最大

00:01:42.540 --> 00:01:44.740
这是另一种对比方式

00:01:44.739 --> 00:01:49.334
我打算只对比标准偏差

00:01:49.334 --> 00:01:54.625
可以看到 40753 最大 所以工资的离散程度是最大的

00:01:54.625 --> 00:01:58.239
有时 图表能展示更多信息 运行这个 hist

00:01:58.239 --> 00:02:00.734
你可以看到 职业满意度是左偏的

00:02:00.734 --> 00:02:02.359
工作满意度也是左偏的

00:02:02.359 --> 00:02:05.474
工资是右偏的 周工作时长是右偏的

00:02:05.474 --> 00:02:08.272
对 Stack Overflow 的满意度也是左偏的

00:02:08.272 --> 00:02:11.370
期望工资好像有点右偏

00:02:11.370 --> 00:02:14.250
而 Respondent 这个变量则是均匀分布的

00:02:14.250 --> 00:02:18.104
因为每个答卷者都具有唯一的编号

00:02:18.104 --> 00:02:22.814
这里还有一个非常漂亮的图 — 热图

00:02:22.814 --> 00:02:26.789
总的来说 颜色越深的地方值就越接近于零

00:02:26.789 --> 00:02:30.269
基本上深色的正方形

00:02:30.270 --> 00:02:33.920
说明两个变量之间没有很大的相关性

00:02:33.919 --> 00:02:37.559
比如说 这里的期望工资和答卷者编号之间的相关性很弱

00:02:37.560 --> 00:02:39.420
比如说 这里的期望工资和答卷者编号之间的相关性很弱

00:02:39.419 --> 00:02:42.082
符合我们的预期

00:02:42.082 --> 00:02:47.280
工作满意度和职业满意度的相关性是最强的

00:02:47.280 --> 00:02:49.515
可以看到对角线右上方的内容

00:02:49.514 --> 00:02:52.379
与左下方基本上是完全相同的

00:02:52.379 --> 00:02:55.889
只需要观察其中之一即可

00:02:55.889 --> 00:03:01.589
这里并没有很多强的相关性 还可以看到有些地方是缺失的

00:03:01.590 --> 00:03:06.569
如果某人给出职业满意度 但是并没有给出期望工资

00:03:06.569 --> 00:03:09.889
或者给出了工作满意度但没有给出期望工资

00:03:09.889 --> 00:03:13.004
或者给出了工资但没有给出期望工资

00:03:13.004 --> 00:03:16.462
这样就会有很多缺失值

00:03:16.462 --> 00:03:20.000
还有一种情况就是给出了期望工资 但没有给出其他三项

00:03:20.000 --> 00:03:23.564
或者反过来

00:03:23.564 --> 00:03:24.914
那交叉部分就没办法计算了

00:03:24.914 --> 00:03:29.340
这个问题是 哪个特征与工资的相关性最强

00:03:29.340 --> 00:03:31.740
这里是工资

00:03:31.740 --> 00:03:38.334
相关系数最大的似乎是与职业满意度的 0.15

00:03:38.334 --> 00:03:42.091
所以这里选 f

00:03:42.091 --> 00:03:46.135
下一个 工作时长越高工资也越高

00:03:46.134 --> 00:03:47.544
我会选 No

00:03:47.544 --> 00:03:55.164
因为跟工资相关的特征 没有哪个是很高的

00:03:55.164 --> 00:03:59.145
甚至工作时长跟工资反而是负相关的

00:03:59.145 --> 00:04:04.839
哪个特征缺少两个与其他列的相关系数

00:04:04.840 --> 00:04:07.360
实际上 应该三列都缺失

00:04:07.360 --> 00:04:10.655
这里我选 c

00:04:10.655 --> 00:04:16.360
这在图里的最后一行可以看到

00:04:16.360 --> 00:04:21.520
期望工资和其他三个特征之间没有值 也就是缺失的

00:04:21.519 --> 00:04:25.669
最强负相关的相关系数是多少?

00:04:25.670 --> 00:04:31.400
最强负相关的相关系数是多少?

00:04:31.399 --> 00:04:36.864
这里有一个 -0.15 看上去好像是最小值

00:04:36.865 --> 00:04:42.840
但是这里写的是 -0.12

00:04:42.839 --> 00:04:45.099
应该要改一下

00:04:45.100 --> 00:04:47.585
在这里填上 g

00:04:47.584 --> 00:04:49.189
看上去不错

00:04:49.189 --> 00:04:50.884
下一步是拟合模型

00:04:50.884 --> 00:04:54.560
先筛选出数值变量

00:04:54.560 --> 00:04:56.564
想要预测的是 Salary

00:04:56.564 --> 00:04:58.000
把数据划分为训练集和测试集

00:04:58.000 --> 00:05:01.509
主要有四个步骤

00:05:01.509 --> 00:05:04.029
我们拟合线性模型

00:05:04.029 --> 00:05:05.449
先实例化模型

00:05:05.449 --> 00:05:06.723
然后尝试拟合

00:05:06.723 --> 00:05:11.318
运行这些代码 你会看到出现了报错

00:05:11.317 --> 00:05:17.384
下个问题 将下面的字母变量名匹配到对应的表述中

00:05:17.384 --> 00:05:20.319
第一个 上面代码报错的原因是什么

00:05:20.319 --> 00:05:24.430
报错的原因是 X 矩阵里有缺失值

00:05:24.430 --> 00:05:28.415
也就是说 sklearn 的 fit 方法不能接受缺失值

00:05:28.415 --> 00:05:33.895
也就是 d 下个问题 train_test_split 里的 random_state 参数有什么用

00:05:33.894 --> 00:05:39.669
其作用是 确保不同的人运行这段代码

00:05:39.670 --> 00:05:42.930
都能获得相同的训练集和测试集

00:05:42.930 --> 00:05:50.230
对照一下这些内容 它能确保

00:05:50.230 --> 00:05:53.245
对不同的用户产生相同的测试集和训练集

00:05:53.245 --> 00:05:58.129
也就是 b 下个问题 划分训练集和测试集的目的是什么?

00:05:58.129 --> 00:06:01.079
目的是为了确保模型

00:06:01.079 --> 00:06:04.409
能够拥有较好的扩展性

00:06:04.410 --> 00:06:07.150
也就是说 不仅要在训练集上表现良好

00:06:07.149 --> 00:06:11.654
在测试集上 以及没有见过的数据集上 也能有比较好的表现

00:06:11.654 --> 00:06:14.349
所以应该是选 a

00:06:14.350 --> 00:06:16.314
看上去很棒

00:06:16.314 --> 00:06:19.000
准备学习下一部分的内容

