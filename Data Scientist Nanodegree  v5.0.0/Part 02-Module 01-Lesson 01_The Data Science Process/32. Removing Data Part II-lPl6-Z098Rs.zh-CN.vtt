WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.410
你已经学习了如何删除缺失值来拟合模型

00:00:04.410 --> 00:00:07.285
这样很棒 因为不用担心代码报错

00:00:07.285 --> 00:00:10.740
但这也意味着 如果新的观察数据包含缺失值

00:00:10.740 --> 00:00:12.734
就没有办法对其做出预测

00:00:12.734 --> 00:00:18.030
在这次练习中 我们会更深入地看一下这些问题 解答疑问

00:00:18.030 --> 00:00:21.420
这里读取了数据

00:00:21.420 --> 00:00:24.580
可以看到很多数值特征都包含很多缺失值

00:00:24.579 --> 00:00:29.864
第一个问题是 数据里提供了工资信息的人 其占比是多少?

00:00:29.864 --> 00:00:36.699
在 num_vars 数据集中选择 Salary 列

00:00:37.240 --> 00:00:44.370
使用 isnull 函数 取均值 再用 1 减去这个值

00:00:44.369 --> 00:00:51.349
isnull 实际上会返回一些 True 和 False 标识是否存在缺失值

00:00:51.350 --> 00:00:53.570
如果取均值的话

00:00:53.570 --> 00:00:56.445
得到的其实是没有给出工资的人群比例

00:00:56.445 --> 00:01:00.594
然后用 1 减去该值 就能得到我们想要的比例了

00:01:00.594 --> 00:01:03.660
应该是 26.2%

00:01:03.659 --> 00:01:06.769
结果是正确的

00:01:06.769 --> 00:01:11.759
下一个问题是 删除 num_vars 中 Salary 列存在缺失值的数据

00:01:11.760 --> 00:01:14.900
将得到的新数据保存在 sal_rem 变量中

00:01:14.900 --> 00:01:17.390
在 num_vars 变量上

00:01:17.390 --> 00:01:19.924
使用 dropna

00:01:19.924 --> 00:01:21.784
使用这个非常有用的 subset 参数

00:01:21.784 --> 00:01:23.069
使用这个非常有用的 subset 参数

00:01:23.069 --> 00:01:26.269
我们可以传入任意多个列名

00:01:26.269 --> 00:01:31.189
检查这些列中是否存在缺失值

00:01:31.189 --> 00:01:37.004
how 参数为默认值 any 然后指定 axis 参数为 0

00:01:37.004 --> 00:01:41.284
可以看到得到的结果中 Salary 是没有缺失值的

00:01:41.284 --> 00:01:45.060
尽管其他列还是有很多缺失值

00:01:45.060 --> 00:01:48.019
这些行看起来没问题

00:01:48.019 --> 00:01:51.229
测试结果也说明答案是对的

00:01:51.230 --> 00:01:53.880
下一题

00:01:53.879 --> 00:02:00.329
使用 sal_rm 数据中的所有数值变量 创建一个 DataFrame X

00:02:00.329 --> 00:02:03.575
所以这里使用 sal_rm

00:02:03.575 --> 00:02:07.174
要将所有数值变量都筛选出来

00:02:07.174 --> 00:02:09.585
其实可以从上面复制

00:02:09.585 --> 00:02:17.330
这些全都是数值型变量 但是需要把 Salary 拿出来

00:02:17.330 --> 00:02:22.850
Salary 是我们要预测的目标变量

00:02:22.849 --> 00:02:29.044
我们想要使用剩下的所有特征

00:02:29.044 --> 00:02:31.409
将这些特征存放在 X 中 准备预测工资

00:02:31.409 --> 00:02:34.495
将这些特征存放在 X 中 准备预测工资

00:02:34.495 --> 00:02:38.629
这里把数据划分成训练集和测试集

00:02:38.629 --> 00:02:41.865
30% 属于测试集 然后还设置了一个随机种子

00:02:41.865 --> 00:02:43.939
然后我们实例化了一个线性模型

00:02:43.939 --> 00:02:46.550
normalize 参数的作用 是将每列的值减去其均值

00:02:46.550 --> 00:02:49.580
然后再除以其标准偏差 做标准化处理

00:02:49.580 --> 00:02:53.425
之后尝试用训练集拟合模型

00:02:53.425 --> 00:02:55.250
可以看到 如果代码没有运行成功

00:02:55.250 --> 00:02:57.449
会进入 except 代码块 提示我们运行失败

00:02:57.449 --> 00:03:03.685
选项 a "Python 偶尔会无理由崩溃"

00:03:03.685 --> 00:03:06.949
如果我很沮丧 有时候会感觉这是真的

00:03:06.949 --> 00:03:10.399
但是正常情况下 肯定不是这个原因

00:03:10.400 --> 00:03:12.780
选项 b "代码跑通了 Python 就是好!"

00:03:12.780 --> 00:03:15.360
如果这样就好了 但这里代码并没有跑通

00:03:15.360 --> 00:03:18.990
c 选项 "X 数据中还存在缺失值"

00:03:18.990 --> 00:03:21.170
我们尝试拟合模型

00:03:21.169 --> 00:03:23.869
但是在之前有看到 数据中仍然存在一些缺失值

00:03:23.870 --> 00:03:27.064
所以应该是这个原因

00:03:27.064 --> 00:03:29.719
我选 c

00:03:29.719 --> 00:03:31.580
X 里还是有缺失值

00:03:31.580 --> 00:03:35.275
也就是说 在这些特征里

00:03:35.275 --> 00:03:38.219
所以模型才会报错

00:03:38.219 --> 00:03:47.294
下一个问题 创建 all_rm

00:03:47.294 --> 00:03:50.984
把 num_vars 中所有包含缺失值的行都删除后 赋值给 all_rm

00:03:50.985 --> 00:03:55.820
把 num_vars 中所有包含缺失值的行都删除后 赋值给 all_rm

00:03:55.819 --> 00:03:58.474
也就是不管是哪一列

00:03:58.474 --> 00:04:03.159
只要存在缺失值 其所在行就要被删除

00:04:03.159 --> 00:04:05.564
这里的注释写错了

00:04:05.564 --> 00:04:14.004
num_vars 然后加上 dropna 应该可以全都用默认参数

00:04:14.004 --> 00:04:19.730
但为了保险起见 还是设置一下 axis = 0

00:04:19.759 --> 00:04:22.110
运行代码

00:04:22.110 --> 00:04:23.639
可以看到结果

00:04:23.639 --> 00:04:25.669
回答正确

00:04:25.670 --> 00:04:28.580
如果我们没有指定任何参数

00:04:28.579 --> 00:04:31.144
那就会删除所有存在缺失值的行

00:04:31.144 --> 00:04:33.029
现在开始使用

00:04:33.029 --> 00:04:35.089
这里的 all_rm

00:04:35.089 --> 00:04:39.769
使用 all_rm 同样地 筛选数据子集

00:04:39.769 --> 00:04:42.254
复制这些列名

00:04:42.254 --> 00:04:44.314
这是新的 X_2 矩阵

00:04:44.314 --> 00:04:47.759
我们用来预测工资

00:04:48.819 --> 00:04:53.420
接下来 运行这段几乎与之前一样的代码

00:04:53.420 --> 00:04:54.975
先划分数据集

00:04:54.975 --> 00:04:57.835
然后实例化模型

00:04:57.834 --> 00:04:59.154
再拟合模型

00:04:59.154 --> 00:05:00.649
如果还是报错

00:05:00.649 --> 00:05:01.949
它会提示我们

00:05:01.949 --> 00:05:03.589
好的 没有看到这个打印语句

00:05:03.589 --> 00:05:06.389
说明代码没有报错

00:05:06.389 --> 00:05:10.769
所以 a 和 c 是错误的

00:05:10.769 --> 00:05:15.849
只有 b 描述代码运行成功 检查结果也是正确的

00:05:15.850 --> 00:05:20.990
下一个问题 使用 lm_2_model 模型来预测 y_2_test 的值

00:05:20.990 --> 00:05:22.790
并且计算 R 平方值

00:05:22.790 --> 00:05:27.069
lm_2_model 是我们要使用的模型

00:05:27.069 --> 00:05:28.485
我们想要预测

00:05:28.485 --> 00:05:30.814
用来预测的数据是

00:05:30.814 --> 00:05:33.245
X_2_test

00:05:33.245 --> 00:05:37.489
我们把这些值都输入到模型中

00:05:37.488 --> 00:05:42.484
模型返回预测的结果

00:05:42.485 --> 00:05:45.830
然后我们要将模型的预测结果跟实际值做比较

00:05:45.829 --> 00:05:55.185
将 y_2_test 与 y_test_preds 对比

00:05:55.185 --> 00:05:58.834
结果的 R 平方值

00:05:58.834 --> 00:06:00.185
差不多有 2%

00:06:00.185 --> 00:06:05.014
也就是说 我们的模型可以解释将近 2% 的变化

00:06:05.014 --> 00:06:08.649
看上去答案是正确的

00:06:08.649 --> 00:06:11.154
这是最后一个练习

00:06:11.154 --> 00:06:14.059
原始数据集里有多少人给出了自己的工资

00:06:14.060 --> 00:06:18.720
看一下原始数据集

00:06:18.720 --> 00:06:24.680
使用 notnull 返回很多 True 和 False

00:06:24.680 --> 00:06:26.035
如果不是 NaN 的话 结果就返回 True

00:06:26.035 --> 00:06:27.990
看一下有多少个 True

00:06:27.990 --> 00:06:29.829
答案是 5009

00:06:29.829 --> 00:06:35.454
也就是 a 选项 把后面的注释删除 避免报错

00:06:35.454 --> 00:06:38.664
用模型预测的工资数量

00:06:38.665 --> 00:06:45.239
可以查看 y_test_pred 的长度

00:06:45.529 --> 00:06:48.449
y_test_pred 没有定义

00:06:48.449 --> 00:06:51.709
好像少一个 s

00:06:51.709 --> 00:06:54.689
结果是 645

00:06:54.689 --> 00:06:56.629
至少在测试集中

00:06:56.629 --> 00:06:59.870
我们预测的工资数量是 645

00:06:59.870 --> 00:07:04.639
如果再加上 y_train 的长度

00:07:04.639 --> 00:07:08.939
如果再加上 y_train 的长度

00:07:09.790 --> 00:07:20.740
y_2_train、y_2_test

00:07:20.740 --> 00:07:24.884
我们只对 2147 个数据进行了预测

00:07:24.884 --> 00:07:29.404
仍然删除了很多数据

00:07:29.404 --> 00:07:31.549
我们并没有针对所有工资进行预测

00:07:31.550 --> 00:07:36.160
基本上只要数据中有缺失值 就会被删除

00:07:36.160 --> 00:07:40.620
我们删除了将近 3000 条样本数据

00:07:40.620 --> 00:07:45.920
如果一个人没有给出对 Stack Overflow 的评分 但给出了工资

00:07:45.920 --> 00:07:47.879
我们仍然是想要预测这种情况的

00:07:47.879 --> 00:07:49.459
现在还没有做这样的操作

00:07:49.459 --> 00:07:50.979
正如在这里看到的

00:07:50.980 --> 00:07:53.819
现在并没有预测这种数据

00:07:54.459 --> 00:07:58.219
但是我们还是希望可以预测的

00:07:58.220 --> 00:08:01.490
如果一个人没有给出工作满意度 但有工资

00:08:01.490 --> 00:08:03.965
我们同样也希望可以作出预测

00:08:03.964 --> 00:08:07.319
答案应该是 d 而不是 c

00:08:07.319 --> 00:08:09.930
我们还是想预测

00:08:09.930 --> 00:08:12.610
只是目前的模型还不行

00:08:12.610 --> 00:08:17.319
最后一个表述 "我们的模型能够预测上面两种人群"

00:08:17.319 --> 00:08:23.279
应该是 False

00:08:23.279 --> 00:08:26.824
我们现在弃掉很多的数据 这的确有点可惜

00:08:26.824 --> 00:08:30.709
所以 在下面的课程中 我们会学习如何填充缺失值

00:08:30.709 --> 00:08:33.514
然后就可以对所有的数据作出预测

00:08:33.514 --> 00:08:36.409
但是在准备填充数据的时候

00:08:36.409 --> 00:08:39.600
还有一些事情需要注意

