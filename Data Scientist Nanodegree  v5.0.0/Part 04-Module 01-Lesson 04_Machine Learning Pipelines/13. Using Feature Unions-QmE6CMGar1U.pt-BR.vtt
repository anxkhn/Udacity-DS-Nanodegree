WEBVTT
Kind: captions
Language: pt-BR

00:00:00.177 --> 00:00:03.399
Pegando o exemplo
do vídeo anterior,

00:00:03.432 --> 00:00:07.157
imagine que queiramos extrair
dois tipos diferentes de recursos

00:00:07.190 --> 00:00:09.734
da mesma coluna text,

00:00:09.767 --> 00:00:13.916
os valores de "tfidf"
e o comprimento do texto.

00:00:13.949 --> 00:00:17.869
A abordagem seria criar
uma coluna adicional

00:00:17.902 --> 00:00:19.475
a partir da coluna text,

00:00:19.508 --> 00:00:21.835
chamada de "text_length",
como esta.

00:00:21.868 --> 00:00:27.703
Então text e text_length podem
fazer parte da matriz futura,

00:00:27.736 --> 00:00:30.070
mas agora
o pipeline quebraria.

00:00:30.103 --> 00:00:32.150
Não podemos executar
o CountVectorizer

00:00:32.183 --> 00:00:35.047
em arrays NumPy
de strings e de números.

00:00:35.080 --> 00:00:38.056
Imagine
um transformador personalizado

00:00:38.089 --> 00:00:41.253
chamado "TextLengthExtractor".

00:00:41.286 --> 00:00:45.851
Podemos deixar o x_train
como uma coluna text original,

00:00:45.884 --> 00:00:50.874
se descobrirmos como adicionar
o TextLengthExtractor ao pipeline

00:00:50.907 --> 00:00:54.114
e se conseguirmos ajustar
o TextLengthExtractor

00:00:54.147 --> 00:00:56.370
aos dados de texto originais,

00:00:56.403 --> 00:00:59.803
e não ao output
do transformador anterior,

00:00:59.836 --> 00:01:03.826
mas precisamos de ambos outputs,
o do TfidfTransformer

00:01:03.859 --> 00:01:06.234
e o do TextLengthExtractor

00:01:06.267 --> 00:01:09.497
para passar para o Classifier
como input.

00:01:09.530 --> 00:01:13.721
FeatureUnions são muito úteis
para lidar com situações

00:01:13.754 --> 00:01:16.681
nas quais precisamos executar
dois passos em paralelo,

00:01:16.714 --> 00:01:18.306
nos mesmos dados,

00:01:18.339 --> 00:01:21.748
e combinar os resultados
para passar para a próxima etapa.

00:01:21.781 --> 00:01:23.122
Como os pipelines,

00:01:23.155 --> 00:01:27.441
os FeatureUnions são criados
com uma lista de pares chave-valor,

00:01:27.474 --> 00:01:32.113
na qual cada chave será uma string
com o nome do passo,

00:01:32.146 --> 00:01:35.457
e o valor será
o objeto estimador.

00:01:35.490 --> 00:01:37.116
Além disso, da mesma forma,

00:01:37.149 --> 00:01:40.749
o FeatureUnion combina
uma lista de estimadores

00:01:40.782 --> 00:01:43.307
para se tornar
um único estimador.

00:01:43.340 --> 00:01:47.158
No entanto, ele executa
os estimadores em paralelo,

00:01:47.191 --> 00:01:50.261
em vez de em sequência,
como nos pipelines.

00:01:50.294 --> 00:01:51.747
Neste exemplo,

00:01:51.780 --> 00:01:54.189
os estimadores sendo
executados em paralelo

00:01:54.222 --> 00:01:57.584
são o nlp_pipeline
e o text_length.

00:01:57.617 --> 00:02:01.096
Observe que usamos um pipeline
no FeatureUnion

00:02:01.815 --> 00:02:04.414
para garantir
que as etapas do CountVectorizer

00:02:04.447 --> 00:02:09.046
e do TfidfTransformer
sejam executadas em sequência.

00:02:09.079 --> 00:02:13.831
Agora o pipeline não quebra
e usa os dois recursos.

00:02:13.864 --> 00:02:17.863
Isso seria realmente
equivalente a esse código.

00:02:17.896 --> 00:02:21.190
Depois de inicializar
todos os estimadores,

00:02:21.223 --> 00:02:23.607
observe
que o CountVectorizer

00:02:23.640 --> 00:02:25.598
e o TextLengthExtractor

00:02:25.631 --> 00:02:30.325
são alimentados e transformados
nos dados de treinamento originais.

00:02:30.358 --> 00:02:31.509
Em seguida,

00:02:31.542 --> 00:02:36.582
os outputs são combinados
e passados para o Classifier.

00:02:36.615 --> 00:02:38.705
Da mesma forma,
com os dados do teste,

00:02:38.738 --> 00:02:41.575
o CountVectorizer
e o TextLengthExtractor

00:02:41.608 --> 00:02:44.736
transformam
os dados de teste originais,

00:02:44.769 --> 00:02:48.266
e os resultados são unidos
para passar para o Classifier.

