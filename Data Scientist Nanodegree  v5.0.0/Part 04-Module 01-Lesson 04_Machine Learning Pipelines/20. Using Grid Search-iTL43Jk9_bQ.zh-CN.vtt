WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.580
这是一个简单的使用网格搜索来

00:00:02.580 --> 00:00:06.134
寻找支持向量分类器的参数的示例

00:00:06.134 --> 00:00:10.320
你需要做的是创建一个字典 定义你的参数网格

00:00:10.320 --> 00:00:13.775
字典的键是参数的名称

00:00:13.775 --> 00:00:17.925
字典的值是网格搜索时你想要尝试的值的列表

00:00:17.925 --> 00:00:22.304
然后 将你的模型和参数网格传入网格搜索对象(grid search object)

00:00:22.504 --> 00:00:24.809
调用网格搜索对象的 fit 方法

00:00:24.809 --> 00:00:28.339
我们将对参数的所有组合进行交叉验证

00:00:28.339 --> 00:00:32.905
找到该模型最优的参数组合

00:00:32.905 --> 00:00:36.209
现在假设 如果我们已经有一个数据预处理步骤了

00:00:36.409 --> 00:00:39.304
其中我们对数据进行了标准缩放 (standard scalar) 以标准化

00:00:39.304 --> 00:00:41.490
这一开始也许可行

00:00:41.490 --> 00:00:44.459
但是如果你将你的整个训练集标准化

00:00:44.659 --> 00:00:47.744
然后使用交叉验证评估你的模型

00:00:47.744 --> 00:00:49.640
就会发生数据泄露 (data leakage)

00:00:49.640 --> 00:00:54.945
我来解释一下 网格搜索使用交叉验证的方法来评估你的模型

00:00:54.945 --> 00:00:58.909
它将你的数据分成训练集和验证集

00:00:58.909 --> 00:01:03.024
在训练集上训练 然后在验证集上评估你的模型

00:01:03.024 --> 00:01:04.909
重复上述操作多次

00:01:04.909 --> 00:01:07.284
但是 每次这种情况发生时

00:01:07.284 --> 00:01:11.134
该模型会因为所有数据都根据整个训练集的分布进行了缩放

00:01:11.135 --> 00:01:16.280
所以已经保留了一些验证集的信息

00:01:16.280 --> 00:01:18.530
一些重要参数 如平均数和标准差

00:01:18.530 --> 00:01:21.980
受到所有训练集数据的影响

00:01:21.980 --> 00:01:26.155
意味着该模型在未知数据集上可能比其原本的表现要更好

00:01:26.155 --> 00:01:28.609
因为验证集的信息

00:01:28.609 --> 00:01:31.525
已经渗透到重缩放的数据里了

00:01:31.525 --> 00:01:36.209
修复的方法是确保你在交叉验证的每一折

00:01:36.409 --> 00:01:41.375
只对训练集而不是验证集进行标准缩放 (standard scalar) 操作

00:01:41.375 --> 00:01:43.844
管道就可以实现这个目标

00:01:43.844 --> 00:01:48.275
现在 因为重缩放包含在管道中

00:01:48.275 --> 00:01:52.280
所以标准化只有我们在运行网格搜索的时候才会发生

00:01:52.280 --> 00:01:55.060
意味着在交叉验证的每一折

00:01:55.060 --> 00:01:58.640
重缩放仅仅发生在用于训练模型的数据

00:01:58.640 --> 00:02:02.254
防止了验证集的数据泄露

00:02:02.254 --> 00:02:06.899
还有 你还可以在这些数据转换步骤中使用网格搜索

00:02:06.900 --> 00:02:10.219
因此 正如我们所说 在数据准备阶段 

00:02:10.219 --> 00:02:15.219
管道技术在控制数据泄露的风险方面很有价值

