WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:02.335
Aqui está um exemplo simples,

00:00:02.369 --> 00:00:05.305
onde geramos recursos
dos dados de texto

00:00:05.338 --> 00:00:09.342
usando CountVectorizer
e TfidfTransformer

00:00:09.376 --> 00:00:13.046
e ajustamos a partir
de RandomForestClassifier.

00:00:13.079 --> 00:00:16.216
Vamos usar isso para repassar
algumas terminologias

00:00:16.249 --> 00:00:19.586
e aprender a usar o pipeline
para simplificar isto.

00:00:19.619 --> 00:00:23.523
Cada um destes objetos
é chamado de "estimador",

00:00:23.556 --> 00:00:25.558
o que o scikit-learn define

00:00:25.592 --> 00:00:28.461
como qualquer objeto
que aprende dos dados,

00:00:28.495 --> 00:00:30.330
seja uma classificação,

00:00:30.363 --> 00:00:33.099
regressão,
algoritmo de agrupamento

00:00:33.133 --> 00:00:35.835
ou transformador, que extrai

00:00:35.869 --> 00:00:38.772
ou filtra recursos úteis
de dados brutos.

00:00:38.805 --> 00:00:41.174
Como aprendem dos dados,

00:00:41.207 --> 00:00:44.010
cada estimador deve ter
um método de ajuste

00:00:44.044 --> 00:00:45.879
que tenha
um conjunto de dados.

00:00:45.912 --> 00:00:49.749
Cada um destes três estimadores
tem um método de ajuste.

00:00:49.783 --> 00:00:54.788
Adicionalmente, CountVectorizer
e TfidfTransformer

00:00:54.821 --> 00:00:58.992
são um tipo específico de estimador
chamado de "transformador",

00:00:59.025 --> 00:01:01.795
pois eles têm
um método de transformação.

00:01:01.828 --> 00:01:05.965
O estimador final que temos aqui é
um preditor,

00:01:05.999 --> 00:01:09.436
que embora não tenha
um método de transformação,

00:01:09.469 --> 00:01:11.438
tem um método de previsão.

00:01:11.471 --> 00:01:15.208
Em tarefas de aprendizado de máquina
é bem comum ter uma sequência

00:01:15.241 --> 00:01:17.410
bem específica
de transformadores

00:01:17.444 --> 00:01:21.314
para ajustar aos dados antes
de aplicar um estimador final.

00:01:21.348 --> 00:01:25.385
Normalmente, teríamos que
inicializar todos os estimadores,

00:01:25.418 --> 00:01:27.821
ajustar e transformar
os dados de treino

00:01:27.854 --> 00:01:30.223
para cada
um dos transformadores

00:01:30.256 --> 00:01:32.959
e ajustar
para o estimador final.

00:01:32.992 --> 00:01:36.262
Em seguida, teríamos
que chamar transform

00:01:36.296 --> 00:01:39.599
para cada transformador
dos dados de teste

00:01:39.632 --> 00:01:43.570
e, finalmente, chamar predict
no estimador final.

00:01:43.603 --> 00:01:48.541
E se eu dissesse que você pode
automatizar todos os ajustes,

00:01:48.575 --> 00:01:50.477
transformações e previsões

00:01:50.510 --> 00:01:56.449
encadeando estes estimadores
num único objeto estimador?

00:01:56.483 --> 00:02:00.954
Este estimador simples
seria o pipeline scikit-learn.

00:02:00.987 --> 00:02:02.722
Para criar este pipeline,

00:02:02.756 --> 00:02:05.558
precisamos de uma lista
de pares de valores-chave,

00:02:05.592 --> 00:02:10.330
onde a chave é uma string
contendo o nome escolhido por você

00:02:10.363 --> 00:02:13.533
e o valor é
o objeto estimador.

00:02:13.566 --> 00:02:17.771
Ajustando nosso pipeline
aos dados de treino,

00:02:17.804 --> 00:02:20.707
estamos atingindo exatamente
o que queríamos,

00:02:20.740 --> 00:02:23.877
ajustando e transformando
cada objeto

00:02:23.910 --> 00:02:26.146
aos dados de treino,
um por um.

00:02:26.179 --> 00:02:28.548
Da mesma forma,
ao usarmos predict

00:02:28.581 --> 00:02:31.217
no pipeline
de nossos dados de teste,

00:02:31.251 --> 00:02:35.088
conseguimos o que faríamos
chamando transform

00:02:35.121 --> 00:02:38.625
em cada objeto de transformação
para nossos dados de teste

00:02:38.658 --> 00:02:42.128
e usando a função de previsão
no estimador final.

00:02:42.162 --> 00:02:46.132
Isso não somente deixa nosso código
bem menor e mais simples,

00:02:46.166 --> 00:02:51.304
como tem outras grandes vantagens
que cobriremos no próximo vídeo.

00:02:51.338 --> 00:02:56.042
Veja que cada passo de um pipeline
tem que ser um transformador,

00:02:56.076 --> 00:02:58.611
exceto o último passo,

00:02:58.645 --> 00:03:01.181
que pode ser um estimador
de qualquer tipo.

00:03:01.214 --> 00:03:03.650
O pipeline pega todos
os métodos

00:03:03.683 --> 00:03:07.053
do último estimador
e de suas sequências.

00:03:07.087 --> 00:03:12.826
Por exemplo, como o estimador final
do pipeline é um classificador,

00:03:12.859 --> 00:03:16.229
o objeto pipeline pode ser usado
como um classificador,

00:03:16.262 --> 00:03:19.265
pegando os métodos de ajuste
e de previsão.

00:03:19.299 --> 00:03:23.269
Mas, se o último estimador
fosse um transformador,

00:03:23.303 --> 00:03:26.039
o pipeline também seria
um transformador,

00:03:26.072 --> 00:03:28.908
e você não poderia usar
a função de previsão nele.

