WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.815
在上一章

00:00:01.815 --> 00:00:07.789
你使用了一个自定义的转换器用来提取特征 即每条文本是不是以动词开头

00:00:07.790 --> 00:00:10.019
你可以通过拓展 scikit-learn 的基类

00:00:10.019 --> 00:00:13.949
自己实现一个转换器

00:00:13.949 --> 00:00:19.134
这有一个非常简单的例子 将输入数据乘以 10

00:00:19.135 --> 00:00:21.795
记住所有评估器需要

00:00:21.795 --> 00:00:26.745
一个 fit 方法来接收数据进行学习 并且因为这是一个转换器

00:00:26.745 --> 00:00:28.815
你还需要一个 transform 方法

00:00:28.815 --> 00:00:34.890
transform 方法中要包含转换数据的代码

00:00:34.890 --> 00:00:37.810
注意 fit 和 transform 方法

00:00:37.810 --> 00:00:41.590
通常接收一个 2D 数组 X

00:00:42.259 --> 00:00:48.295
接下来 我们创建一个更有实用意义的转换器

00:00:48.295 --> 00:00:53.990
这是一个大小写转换器 (case normalizer) 简单地将所有文本转成小写

00:00:53.990 --> 00:00:56.820
在 init 方法中 我们不做任何设置

00:00:56.820 --> 00:00:59.005
所以我们其实可以不要它

00:00:59.005 --> 00:01:04.655
保留 fit 方法不变 来看 transform 方法

00:01:04.655 --> 00:01:08.180
我们可以使用 lambda 函数

00:01:08.180 --> 00:01:12.200
a将 X 中的所有值转成小写

00:01:12.200 --> 00:01:17.040
我们需要将这个包装成 pandas 序列 (Series) 以便使用 apply 函数

00:01:17.040 --> 00:01:22.800
最后加上 .values 将它转换为 NumPy 数组 (array)

00:01:24.640 --> 00:01:30.825
很棒编写自己的函数是个很好的想法

00:01:30.825 --> 00:01:36.365
让你可以更好更灵活地控制自己的机器学习管道

00:01:36.364 --> 00:01:40.429
另一种创建自己的转换器的方法是使用

00:01:40.430 --> 00:01:45.035
scikit-learn 库 preprocessing 模块的transformer 函数

00:01:45.034 --> 00:01:47.944
这类方法可以打包一个已有的

00:01:47.944 --> 00:01:51.829
或自定义的函数作为转换器

00:01:51.829 --> 00:01:54.120
这种方法的灵活性稍差

00:01:54.120 --> 00:01:56.060
但很简单

00:01:56.060 --> 00:01:58.870
你可以参考下面的链接了解更多

