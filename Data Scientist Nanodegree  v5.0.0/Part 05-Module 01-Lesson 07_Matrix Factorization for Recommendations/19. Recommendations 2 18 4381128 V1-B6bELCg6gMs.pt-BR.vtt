WEBVTT
Kind: captions
Language: pt-BR

00:00:00.630 --> 00:00:03.901
Nessa próxima célula,
essa é a mesma função

00:00:03.934 --> 00:00:07.780
que estava na solução
para a função SVD de Funk.

00:00:08.540 --> 00:00:10.243
Veja que ela
está aprendendo aqui.

00:00:10.276 --> 00:00:13.284
A cada iteração, obtemos
um erro quadrático médio menor.

00:00:14.237 --> 00:00:16.453
Vamos passar
por 250 iterações,

00:00:16.486 --> 00:00:19.451
então isso vai levar
um tempo para terminar.

00:00:19.940 --> 00:00:23.460
Estamos usando 15 variáveis latentes
para tentar entender os filmes.

00:00:23.493 --> 00:00:25.269
Isso é meio arbitrário.

00:00:25.302 --> 00:00:29.730
Essa escolha muitas vezes
é baseada na tentativa e no erro.

00:00:29.989 --> 00:00:31.221
Vamos deixar isso rodar.

00:00:32.308 --> 00:00:35.308
ALGUM TEMPO DEPOIS...

00:00:36.372 --> 00:00:40.005
Levou um tempo,
mas, agora, temos

00:00:40.038 --> 00:00:42.909
uma matriz de usuários
e uma matriz de filmes

00:00:42.942 --> 00:00:45.573
em que podemos usar
o produto escalar

00:00:45.606 --> 00:00:49.707
de uma linha da matriz de usuários
com uma coluna da matriz de filmes

00:00:49.740 --> 00:00:53.605
e obter qualquer predição
usuário-filme que quisermos.

00:00:53.638 --> 00:00:58.309
A próxima coisa que faremos
é permitir que isso aconteça.

00:00:58.342 --> 00:01:00.933
Vamos passar a matriz
de usuários e a de filmes

00:01:00.966 --> 00:01:03.076
junto com o user_id
e o movie_id,

00:01:03.109 --> 00:01:07.116
com o objetivo de obter
a avaliação prevista

00:01:07.149 --> 00:01:11.437
que o usuário daria a aquele filme
baseado nessas duas matrizes.

00:01:12.141 --> 00:01:15.734
A 1ª coisa que temos
que fazer é indexar

00:01:15.767 --> 00:01:20.717
nas matrizes de usuários
e de filmes para obter

00:01:20.750 --> 00:01:22.917
o user_id e movie_id
específicos.

00:01:22.950 --> 00:01:25.829
Se você lembra
do que fizemos mais cedo...

00:01:25.862 --> 00:01:27.422
Vou só colocar isso aqui.

00:01:27.455 --> 00:01:32.060
Mas o que queremos fazer
é usar uma instrução np.where

00:01:32.093 --> 00:01:37.541
e observar que algo
é igual a esse user_id, certo?

00:01:37.574 --> 00:01:41.308
Então, se algo
é igual ao user_id,

00:01:41.341 --> 00:01:43.499
vamos extrair esse valor.

00:01:43.532 --> 00:01:45.964
Assim como quando usamos
np.where antes,

00:01:45.997 --> 00:01:48.724
ela nos retorna
essa coisa aninhada,

00:01:48.757 --> 00:01:52.893
de onde vamos
extrair um número específico.

00:01:52.926 --> 00:01:56.589
Então, para identificar
com o que essa série se parece,

00:01:56.622 --> 00:02:01.579
quero checar a estrutura
dos dados de treinamento.

00:02:01.612 --> 00:02:05.653
Podemos observar que isso
é a matriz usuário-filme

00:02:05.686 --> 00:02:07.956
na qual estamos
fazendo essas predições.

00:02:07.989 --> 00:02:10.244
Essa é a que estamos
analisando.

00:02:10.277 --> 00:02:12.325
Note que ela está
cheia de valores nulos.

00:02:12.358 --> 00:02:17.980
Mas um array desse user_id

00:02:18.013 --> 00:02:22.340
e um array desse movie_id
vai nos fornecer a habilidade

00:02:22.373 --> 00:02:26.246
de indexar e encontrar
a linha-coluna que devemos extrair

00:02:26.280 --> 00:02:28.669
das matrizes usuário-filme.

00:02:28.702 --> 00:02:32.108
Com isso,
aqui está o que eu fiz.

00:02:32.141 --> 00:02:35.028
Eu disse que, se tirarmos o índice
dessa coisa,

00:02:36.252 --> 00:02:38.316
isso nos retorna os usuários.

00:02:38.349 --> 00:02:40.284
Mas se tirarmos as colunas...

00:02:42.748 --> 00:02:44.596
isso nos retorna os filmes.

00:02:44.629 --> 00:02:47.011
Esses são os filmes
e essas são as colunas.

00:02:47.044 --> 00:02:50.755
E tudo o que eu fiz foi
transformá-los em arrays np.

00:02:50.788 --> 00:02:55.165
Eu criei essas duas coisas,
que eram arrays NumPy,

00:02:55.198 --> 00:02:59.730
e as chamei de
"user_ids_series"

00:02:59.764 --> 00:03:02.540
e "movie_ids_series"

00:03:02.573 --> 00:03:04.924
e fiz uma bagunça
com arrays NumPy.

00:03:06.017 --> 00:03:08.892
Eu pedi um array desse índice.

00:03:08.925 --> 00:03:14.382
E movie_ids_series
é igual a...

00:03:18.587 --> 00:03:22.202
Agora, posso usar esses índices
de usuários e de filmes

00:03:22.236 --> 00:03:26.988
e quero indexar nisso para encontrar
um movie ou user_id específico.

00:03:27.021 --> 00:03:30.772
Se eu entrar e disser
que onde isso for igual a isso,

00:03:30.805 --> 00:03:34.204
o índice deve ser extraído,
porque essa é a linha que vou querer

00:03:34.237 --> 00:03:38.349
da matriz u, certo?
A linha de usuário que eu quero

00:03:38.382 --> 00:03:41.891
é igual a isso,
e a coluna de filme que eu quero

00:03:42.523 --> 00:03:48.276
é igual à mesma coisa,
mas do movie_ids_series

00:03:48.309 --> 00:03:51.431
e onde isso
é igual ao movie_id.

00:03:51.464 --> 00:03:54.203
E, de novo, vamos indexar
nisso aqui,

00:03:54.236 --> 00:03:57.643
porque, você deve se lembrar,
recebemos aquela coisa aninhada.

00:03:58.172 --> 00:04:04.031
A nossa predição vai
pegar o produto escalar

00:04:04.231 --> 00:04:07.542
da matriz de usuários,

00:04:08.571 --> 00:04:11.291
onde a linha é igual à
user_row,

00:04:11.324 --> 00:04:15.363
e, quanto às colunas,
queremos todas para este usuário.

00:04:15.396 --> 00:04:20.940
Depois, obtemos o produto
escalar disso com a matriz de filmes

00:04:22.725 --> 00:04:26.106
que estão passando
e, aqui, queremos o oposto,

00:04:26.139 --> 00:04:31.180
queremos a movie_col
e todas as linhas.

00:04:31.213 --> 00:04:33.508
Fazendo isso,
obtemos a predição.

00:04:34.260 --> 00:04:37.911
Note que, para este par
usuário-filme específico,

00:04:37.945 --> 00:04:41.739
o usuário 8 e o filme 2844,

00:04:41.772 --> 00:04:44.764
a nossa predição seria
de 6,65.

