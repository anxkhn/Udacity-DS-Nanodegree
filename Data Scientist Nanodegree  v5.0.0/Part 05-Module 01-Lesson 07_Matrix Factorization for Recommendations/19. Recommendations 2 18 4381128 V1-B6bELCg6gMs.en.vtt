WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.065
In this next cell, this is just the same function

00:00:04.065 --> 00:00:08.089
that was in the solution for the FunkSVD function.

00:00:08.089 --> 00:00:10.244
You can see that it's leaning here with

00:00:10.244 --> 00:00:13.824
each iteration we're getting a smaller and smaller mean squared error.

00:00:13.824 --> 00:00:19.960
We're going to go through 250 iterations and so this is going to take some time to do.

00:00:19.960 --> 00:00:23.530
We have 15 latent features that we're using to try to understand the movies.

00:00:23.530 --> 00:00:27.089
This is kind of arbitrary and choosing that is largely

00:00:27.089 --> 00:00:32.019
based on trial and error a lot of times, so we'll let this run.

00:00:35.420 --> 00:00:40.115
So that took some time but now you should have

00:00:40.115 --> 00:00:44.810
a user matrix and a movie matrix where you can use

00:00:44.810 --> 00:00:48.890
the dot product of a row from the user matrix with a column of

00:00:48.890 --> 00:00:53.674
the movie matrix and get any user movie prediction that you want.

00:00:53.674 --> 00:00:58.219
So, the next thing that we're going to do is essentially allow for that to be the case.

00:00:58.219 --> 00:01:00.019
So we'll pass in the user matrix and

00:01:00.020 --> 00:01:03.350
the movie matrix along with a user ID and a movie ID,

00:01:03.350 --> 00:01:07.250
and what we want to get back is the predicted rating that

00:01:07.250 --> 00:01:11.810
that user would give to that movie based on these two matrices.

00:01:11.810 --> 00:01:17.030
So, the first thing that we need to do is be able to index into

00:01:17.030 --> 00:01:22.820
the user and movie matrices to grab the particular user ID or movie ID.

00:01:22.819 --> 00:01:25.639
If you remember from some of the things that we did earlier,

00:01:25.640 --> 00:01:27.394
I'm just going to put this here.

00:01:27.394 --> 00:01:30.810
But essentially what we want to do is we can use an

00:01:30.810 --> 00:01:35.445
np.where statement and we can look at where the user ID,

00:01:35.444 --> 00:01:37.569
something is equal to that user ID, right?

00:01:37.569 --> 00:01:39.244
So, we want this thing,

00:01:39.245 --> 00:01:43.540
and if it's equal to the user ID then we're going to pull that value out.

00:01:43.540 --> 00:01:45.945
If you remember when we used the np.where before,

00:01:45.944 --> 00:01:49.159
it gives us back this nested thing where

00:01:49.159 --> 00:01:52.905
we're going to want to go into it and grab a particular number.

00:01:52.905 --> 00:01:56.739
So, in order to figure out what that series looks like,

00:01:56.739 --> 00:02:02.129
I want to look at the training data frame.

00:02:02.129 --> 00:02:04.369
If we look at this, this is essentially

00:02:04.370 --> 00:02:08.379
the user movie matrix that we were making those prediction lawn, right?

00:02:08.379 --> 00:02:10.180
So this is the one that we were looking at.

00:02:10.180 --> 00:02:12.439
You can see it's full of a bunch of null values

00:02:12.439 --> 00:02:19.129
but an array of just this user ID and an array of

00:02:19.129 --> 00:02:23.659
this movie ID will give us the ability to index in and

00:02:23.659 --> 00:02:28.585
find the row column we should be pulling from the user movie matrices.

00:02:28.585 --> 00:02:32.045
So with that, here was what I did.

00:02:32.044 --> 00:02:35.659
I said basically, if you take the index of this thing,

00:02:35.659 --> 00:02:38.344
that gives you back the users,

00:02:38.344 --> 00:02:41.039
and if you take the columns,

00:02:41.789 --> 00:02:44.829
this gives you back the movies, right?

00:02:44.830 --> 00:02:47.055
So these are the movies and those are the columns,

00:02:47.055 --> 00:02:50.680
and then all I did was I turned those into np arrays.

00:02:50.680 --> 00:02:56.585
So, I created these two things that were NumPy arrays and I just called it

00:02:56.585 --> 00:03:05.375
user ID series and movie ID series and I just did a mess, NumPy arrays.

00:03:05.375 --> 00:03:08.959
So I said, give me an array of this index,

00:03:08.959 --> 00:03:14.219
and movie IDs series.

00:03:17.050 --> 00:03:22.280
Okay. So now I have these movie and user indices that I can use

00:03:22.280 --> 00:03:26.955
and basically I want to index into that thing and find the particular movie or user ID.

00:03:26.955 --> 00:03:28.665
So if I go in and I say,

00:03:28.664 --> 00:03:30.674
hey, where this thing is equal to this,

00:03:30.675 --> 00:03:35.640
pull that index because that's the row that I'm going to want from the u matrix, right?

00:03:35.639 --> 00:03:39.439
So this is like, the user row that I want is equal to this,

00:03:39.439 --> 00:03:43.609
and the movie column that I want is equal to,

00:03:43.610 --> 00:03:46.325
basically the same thing but from

00:03:46.324 --> 00:03:51.409
the movie IDs series and where that's equal to the movie ID.

00:03:51.409 --> 00:03:55.759
Again we're going to just index into this thing because if you remember from before,

00:03:55.759 --> 00:03:57.870
it gives you this sort of nested thing.

00:03:57.870 --> 00:04:03.170
Then basically, our prediction is just that we are going to take

00:04:03.169 --> 00:04:11.779
the dot product of the user matrix where the row is equal to what I call the user row,

00:04:11.780 --> 00:04:15.530
and the column, we just want all of the columns for that user.

00:04:15.530 --> 00:04:18.725
Then, we want to take the dot product of that with

00:04:18.725 --> 00:04:24.550
the movie matrix that they're passing in and then,

00:04:24.550 --> 00:04:26.540
here we want sort of the opposite we want,

00:04:26.540 --> 00:04:31.140
the movie column and all the rows.

00:04:31.139 --> 00:04:34.964
If we do that, then that should give us the prediction and you can see,

00:04:34.964 --> 00:04:37.979
so like for this particular user movie pair,

00:04:37.980 --> 00:04:41.865
so for user eight on movie 2844,

00:04:41.865 --> 00:04:45.670
our prediction would be 6.65.

