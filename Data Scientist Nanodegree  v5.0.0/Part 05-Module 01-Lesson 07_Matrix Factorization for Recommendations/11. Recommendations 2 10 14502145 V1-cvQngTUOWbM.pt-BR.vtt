WEBVTT
Kind: captions
Language: pt-BR

00:00:00.463 --> 00:00:04.742
Agora imagine que queiramos
ver a mesma coisa,

00:00:04.776 --> 00:00:07.807
mas que só temos
duas variáveis latentes.

00:00:07.841 --> 00:00:11.613
Podemos fazer algo
que seja mais extensível.

00:00:11.926 --> 00:00:15.998
Da U original, ainda queremos
todas as linhas,

00:00:16.032 --> 00:00:19.014
o número das colunas de k

00:00:19.048 --> 00:00:23.350
e, para fazer algo que seja
mais fácil de reproduzir

00:00:23.894 --> 00:00:26.846
do que fizemos antes,
vamos começar

00:00:26.880 --> 00:00:29.654
criando a matriz k por k.

00:00:29.688 --> 00:00:34.214
Então nós pegamos
os componentes

00:00:34.734 --> 00:00:39.382
e colocamos no número k
de elementos em diagonal.

00:00:52.130 --> 00:00:55.389
Isso mostra os dois
primeiros elementos,

00:00:55.423 --> 00:00:57.869
mas, se mudarmos para 4,

00:00:57.903 --> 00:00:59.924
fica igual ao que vimos antes.

00:00:59.958 --> 00:01:03.029
Se mudarmos para 3,
ele mostra 3 deles.

00:01:10.475 --> 00:01:13.356
Certo, acho que funciona.

00:01:13.390 --> 00:01:17.300
Agora precisamos criar
um subconjunto

00:01:17.334 --> 00:01:21.155
com o número de variáveis
nas linhas

00:01:21.189 --> 00:01:24.060
e todos os filmes nas colunas.

00:01:24.916 --> 00:01:28.851
Parece que as coisas têm
o formato que deveriam ter.

00:01:28.885 --> 00:01:32.963
Por fim, pedem para calcularmos
o produto escalar

00:01:32.997 --> 00:01:35.972
entre cada uma das matrizes.

00:01:36.006 --> 00:01:38.853
Vou calcular o produto

00:01:38.887 --> 00:01:43.307
de "u" e "s"
com duas variáveis.

00:01:43.341 --> 00:01:46.979
E então calculamos
o produto escalar dessa matriz.

00:01:50.140 --> 00:01:52.973
Com 2.

00:01:54.206 --> 00:01:57.546
Isso deve nos dar
as avaliações previstas.

00:01:57.580 --> 00:02:00.621
Na verdade, vou separar isto.

00:02:02.658 --> 00:02:04.843
Se fizéssemos isso
com os quatro,

00:02:04.877 --> 00:02:09.170
teríamos conseguido
voltar à matriz original.

00:02:10.753 --> 00:02:13.064
Essas são as nossas previsões.

00:02:13.098 --> 00:02:17.704
Podemos comparar a diferença
entre a previsão e a realidade.

00:02:17.738 --> 00:02:21.521
Vou digitar user_movie.

00:02:23.474 --> 00:02:26.139
Vou transformar isto
em comentário.

00:02:26.173 --> 00:02:29.972
Este é um array
dessas diferenças.

00:02:30.006 --> 00:02:33.747
Se quisermos saber
o quanto erramos em todas,

00:02:33.781 --> 00:02:37.148
vamos computar
as diferenças ao quadrado

00:02:37.182 --> 00:02:39.203
e somar tudo.

00:02:40.571 --> 00:02:46.004
Uma das somas vai fazer isso
nas colunas,

00:02:46.038 --> 00:02:50.306
a outra vai fazer isso
nas linhas.

00:02:51.077 --> 00:02:52.635
Ótimo.

00:02:52.669 --> 00:02:56.968
Vou pegar esta parte aqui
e colar aqui.

00:02:57.002 --> 00:02:58.319
Espero que faça sentido.

00:02:58.353 --> 00:03:01.029
Calculamos a diferença
entre a previsão e a realidade.

00:03:01.063 --> 00:03:04.288
Elevando ao quadrado,
todas ficam positivas.

00:03:04.322 --> 00:03:06.671
Se somarmos as duas,
podemos ter uma ideia

00:03:06.705 --> 00:03:10.304
de como estamos computando
a matriz original

00:03:10.338 --> 00:03:13.520
com só duas variáveis latentes
em vez de usar as quatro.

00:03:13.554 --> 00:03:16.367
Nós podemos fazer isso
com u_new,

00:03:16.816 --> 00:03:19.999
s_new e vt_new.

00:03:23.216 --> 00:03:25.455
Se fizermos a soma...

00:03:26.639 --> 00:03:29.980
Ótimo, dá 6,49
vezes 10 a 28 negativo.

00:03:30.014 --> 00:03:31.772
Basicamente zero.

00:03:31.806 --> 00:03:34.308
São provavelmente
só erros de arredondamento.

00:03:34.694 --> 00:03:40.484
É um 6 com 27 zeros antes
de chegar ao ponto decimal.

00:03:41.108 --> 00:03:46.612
Certo, vou mudar para ver
se passamos no teste.

00:03:48.732 --> 00:03:50.588
Ótimo.

00:03:50.622 --> 00:03:55.983
A próxima coisa
que tentaremos fazer

00:03:56.017 --> 00:03:58.638
é calcular a decomposição
em valores singulares

00:03:58.672 --> 00:04:01.477
adicionando um NaN.

00:04:01.511 --> 00:04:07.254
Vou pegar a linha
que digitamos aqui em cima.

00:04:08.445 --> 00:04:12.790
Quando computamos a decomposição
em valores singulares.

00:04:14.029 --> 00:04:16.110
Vou colocar aqui.

00:04:16.144 --> 00:04:19.581
Executando a célula,
veja que encontramos um erro.

00:04:19.615 --> 00:04:21.854
"SVD não convergiu."

00:04:21.888 --> 00:04:24.903
Isso aconteceu
porque tem um valor NaN.

00:04:24.937 --> 00:04:27.751
A seguir, vamos ver
uma estratégia que podemos usar

00:04:27.785 --> 00:04:30.861
quando nossas matrizes não têm
valor em todas as células.

