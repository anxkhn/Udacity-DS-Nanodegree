WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.799
So, now, imagine that we want to look at the same thing,

00:00:04.799 --> 00:00:07.619
but, say, we only have two latent features instead.

00:00:07.620 --> 00:00:11.685
So, we could make something that's maybe a little bit more extendable.

00:00:11.685 --> 00:00:14.165
So, what we want to do is from the original u,

00:00:14.164 --> 00:00:15.754
we still want all the rows.

00:00:15.755 --> 00:00:20.089
We want the number of columns to k. Then,

00:00:20.089 --> 00:00:25.559
to make something that's more reproducible than what we did before,

00:00:25.559 --> 00:00:28.679
let's first start out with creating this matrix,

00:00:28.679 --> 00:00:29.960
that's k by k. Then,

00:00:29.960 --> 00:00:33.329
what we'll do is we'll take the components

00:00:33.329 --> 00:00:40.239
themselves and put in the k number of the diagonal elements in there.

00:00:51.530 --> 00:00:55.375
So, what this is doing is just pulling those first two elements.

00:00:55.375 --> 00:00:57.810
But if we change this to four,

00:00:57.810 --> 00:00:59.804
then that's exactly what we saw before.

00:00:59.804 --> 00:01:01.155
If we change it to three,

00:01:01.155 --> 00:01:03.579
then it's going to pull three of them.

00:01:09.590 --> 00:01:13.395
Okay. So, I think that should work.

00:01:13.394 --> 00:01:15.189
Then, basically, with this,

00:01:15.189 --> 00:01:18.694
we now need to subset it to

00:01:18.694 --> 00:01:24.449
the number of latent features on the row and all of the movies on the columns.

00:01:24.450 --> 00:01:29.120
So, it looks like those things match up with the shapes they're supposed to be.

00:01:29.120 --> 00:01:32.170
Finally, what they're asking us to do is to compute

00:01:32.170 --> 00:01:35.659
the dot product between each of those matrices.

00:01:35.659 --> 00:01:43.394
So, we'll take the dot product of u and s with two latent features.

00:01:43.394 --> 00:01:45.369
Then, what we want to do is we want to the dot product of

00:01:45.370 --> 00:01:54.469
that matrix with two.

00:01:54.469 --> 00:01:57.209
That should give us our predicted ratings.

00:01:58.010 --> 00:02:01.660
I'm going to pull this out too.

00:02:01.819 --> 00:02:04.879
So, if we were to do this with all four of them,

00:02:04.879 --> 00:02:07.179
we would have just gotten the matrix back,

00:02:07.180 --> 00:02:09.710
itself, the original matrix.

00:02:09.819 --> 00:02:12.995
But here's our predictions.

00:02:12.995 --> 00:02:17.599
Then, we can compare the difference between the predicted and the actual.

00:02:17.599 --> 00:02:20.370
So, if we take user_movie,

00:02:22.900 --> 00:02:26.015
I'm just going to comment this out really quick.

00:02:26.014 --> 00:02:27.384
So, we take the difference.

00:02:27.384 --> 00:02:29.989
Basically, this is now an array of those differences.

00:02:29.990 --> 00:02:33.740
If we want to know how much we were off by across all of them,

00:02:33.740 --> 00:02:37.020
what we might do is compute their squared differences,

00:02:37.020 --> 00:02:39.000
and then just sum them up.

00:02:39.000 --> 00:02:41.520
So, one of the sums,

00:02:41.520 --> 00:02:46.150
we'll take it across the columns.

00:02:46.150 --> 00:02:50.069
Then, the other, we'll take it across the rows.

00:02:50.069 --> 00:02:52.769
Cool.

00:02:52.770 --> 00:02:56.880
If we just take this part here, goes here.

00:02:56.879 --> 00:02:58.000
So, hopefully, that makes sense.

00:02:58.000 --> 00:03:00.710
So, we're taking the difference between the actual and the subset.

00:03:00.710 --> 00:03:02.730
If we look at the squared differences,

00:03:02.729 --> 00:03:04.030
then, they all become positive.

00:03:04.030 --> 00:03:05.689
Then, if we take the sum of those,

00:03:05.689 --> 00:03:09.349
we can get an idea of basically how well we're doing at computing

00:03:09.349 --> 00:03:13.259
the original matrix with only two latent features as opposed to using all four.

00:03:13.259 --> 00:03:14.794
So, let's say we did this with

00:03:14.794 --> 00:03:25.810
new and if we look at the sum.

00:03:26.030 --> 00:03:30.210
So, you can see it's 6.49 times 10 to the negative 28.

00:03:30.210 --> 00:03:34.580
So, it's essentially zero and that's probably just rounding errors.

00:03:34.879 --> 00:03:40.594
There's a six with 27 zeros in front of it before you hit a decimal point.

00:03:40.594 --> 00:03:43.689
Okay. I'm going to change this back just so- hopefully,

00:03:43.689 --> 00:03:50.754
we pass the test. So, it looks great.

00:03:50.754 --> 00:03:53.299
Now, the next thing that we're going to do is,

00:03:53.300 --> 00:04:01.640
we're going to try to calculate singular value decomposition when we add a nan in.

00:04:01.639 --> 00:04:07.838
So, if we just take the same line that we had up here,

00:04:07.838 --> 00:04:10.715
where we're actually computing

00:04:10.715 --> 00:04:14.990
the singular value decomposition, we can go back down here.

00:04:14.990 --> 00:04:17.485
If we run the cell,

00:04:17.485 --> 00:04:19.639
you'll notice that we get an error.

00:04:19.639 --> 00:04:21.810
So, it says, "SVD did not converge."

00:04:21.810 --> 00:04:23.360
The main reason why that happened,

00:04:23.360 --> 00:04:24.830
it's because you have a nan value.

00:04:24.829 --> 00:04:27.259
So, next, we'll take a look at a strategy we can

00:04:27.259 --> 00:04:31.680
use when our matrices do not have a value in every cell.

