WEBVTT
Kind: captions
Language: pt-BR

00:00:00.607 --> 00:00:02.959
Na parte seguinte,
o que vamos fazer é...

00:00:02.992 --> 00:00:05.726
Temos esses primeiros
mil usuários

00:00:05.759 --> 00:00:10.166
e vamos tentar usar
a SVD de Funk neles.

00:00:11.155 --> 00:00:13.975
Se pegarmos
os primeiros mil usuários,

00:00:14.470 --> 00:00:19.854
vamos fazer 20 iterações.
Isso vai levar um tempo.

00:00:20.974 --> 00:00:22.542
Fazer 20 iterações.

00:00:22.575 --> 00:00:25.574
Aqui, você pode ver
o que isso faz com mil usuários,

00:00:25.607 --> 00:00:28.020
mas imagine fazer
com toda a estrutura dos dados.

00:00:28.053 --> 00:00:32.918
Funcionaria, é só uma questão
da potência do seu computador

00:00:32.951 --> 00:00:34.628
e do tempo que isso
poderia levar.

00:00:35.310 --> 00:00:37.350
Podemos ver alguns
resultados aparecendo.

00:00:37.383 --> 00:00:40.454
Vemos que as coisas estão
se movendo na direção certa.

00:00:40.487 --> 00:00:44.277
Temos o nosso
1º erro quadrático médio de 23.

00:00:44.310 --> 00:00:47.717
Depois, quase a metade
e, depois, ele cai para 7.

00:00:47.750 --> 00:00:50.036
Vamos ver o que acontece
lá pela 20ª iteração,

00:00:50.069 --> 00:00:53.904
mas veja como as coisas
estão se movendo na direção certa.

00:00:54.958 --> 00:00:56.907
Os meus resultados
já foram executados.

00:00:56.940 --> 00:01:00.886
Note que ainda há mais erro
do que gostaríamos aqui,

00:01:00.919 --> 00:01:04.438
e poderíamos continuar fazendo
isso até diminuí-lo ainda mais,

00:01:04.471 --> 00:01:07.525
já que ele está sendo reduzido
em uma proporção razoável.

00:01:07.558 --> 00:01:12.149
Mas vamos seguir adiante e aprender
com o que está acontecendo aqui.

00:01:12.182 --> 00:01:15.590
Então, primeiro temos
que observar esses mil usuários

00:01:15.623 --> 00:01:20.526
e ver quantos valores faltantes
há nessa matriz específica.

00:01:21.421 --> 00:01:24.318
Se você não tiver observado
o cabeçalho...

00:01:24.582 --> 00:01:29.954
Estou usando a mesma parte
count_nonzero de antes.

00:01:30.581 --> 00:01:34.189
Quantas avaliações reais existem
nos primeiros mil usuários?

00:01:34.222 --> 00:01:35.421
Parece bom.

00:01:35.454 --> 00:01:38.645
E quantas avaliações fizemos
para os pares usuário-filme

00:01:38.678 --> 00:01:40.085
que não tinham avaliações?

00:01:40.118 --> 00:01:44.414
Basicamente,
isso deve ser o formato...

00:01:44.447 --> 00:01:48.270
É o que eu estava
tentando fazer mais cedo.

00:01:48.303 --> 00:01:51.197
Eu pego o número de linhas
vezes o número de colunas

00:01:51.230 --> 00:01:56.094
e subtraio num_ratings.

00:01:56.877 --> 00:02:00.630
Isso é a quantidade de avaliações
possíveis que podemos ter feito,

00:02:00.663 --> 00:02:04.757
e isso é o número de avaliações
que realmente havia nos dados

00:02:04.790 --> 00:02:06.518
através das quais
podemos aprender.

00:02:06.551 --> 00:02:07.671
Vamos executar isso.

00:02:07.704 --> 00:02:10.653
Note que há um monte
de valores faltantes aqui,

00:02:10.686 --> 00:02:14.768
e só tínhamos 11 mil avaliações
com as quais trabalhar,

00:02:14.801 --> 00:02:17.117
então essa matriz
é muito dispersa.

00:02:17.150 --> 00:02:22.604
Vamos seguir analisando
os primeiros mil usuários.

00:02:23.213 --> 00:02:25.389
Podemos ver
que são basicamente homens.

00:02:26.053 --> 00:02:29.621
Se observarmos os números
de linhas e de colunas,

00:02:30.806 --> 00:02:35.293
temos mil usuários
por 31 mil filmes

00:02:35.593 --> 00:02:39.653
e, essencialmente, um monte
de valores faltantes,

00:02:39.686 --> 00:02:41.605
já que só temos
10 mil avaliações.

00:02:41.638 --> 00:02:43.814
Isso deve ter levado
um tempo para executar,

00:02:43.847 --> 00:02:46.132
porque passamos por cada
elemento da matriz.

00:02:46.645 --> 00:02:50.501
Por fim, podemos conferir e parece
que os resultados estão certos.

00:02:50.534 --> 00:02:55.052
Isso é um grande passo, porque
não usamos o built-in

00:02:55.085 --> 00:02:57.396
e construímos
a nossa própria função,

00:02:57.429 --> 00:03:00.525
que pode pegar qualquer matriz,
não importa o quão dispersa,

00:03:00.558 --> 00:03:03.349
e calcular pares usuário-filme,

00:03:03.382 --> 00:03:06.688
avaliações para pares usuário-filme,
que não existam originalmente,

00:03:06.721 --> 00:03:09.597
e podemos garantir que,
apendendo da maneira certa,

00:03:09.630 --> 00:03:12.053
vamos obter avaliações...

00:03:12.086 --> 00:03:16.037
Pegando o produto escalar
desses dois itens,

00:03:16.070 --> 00:03:20.366
podemos obter uma predição
para qualquer usuário-filme.

00:03:20.399 --> 00:03:24.555
Eu pego o índice de algum usuário
e o índice de algum filme,

00:03:24.588 --> 00:03:28.421
calculo o produto escalar deles
e obtenho a predição

00:03:28.454 --> 00:03:30.812
para esse usuário-filme,
mesmo que esse usuário

00:03:30.845 --> 00:03:33.253
nunca tenha realmente
interagido com esse filme.

00:03:33.597 --> 00:03:36.116
Algo incrível que,
como vimos, funciona bem.

