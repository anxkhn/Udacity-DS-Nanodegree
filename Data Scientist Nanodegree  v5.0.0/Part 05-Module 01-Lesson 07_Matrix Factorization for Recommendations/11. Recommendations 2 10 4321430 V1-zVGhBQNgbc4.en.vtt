WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.669
We want to provide the dimensions that we're going to

00:00:02.669 --> 00:00:04.790
get for singular value decomposition.

00:00:04.790 --> 00:00:07.099
So, using what we know from the last videos,

00:00:07.099 --> 00:00:10.830
U remember is a matrix that's going to hold the number of

00:00:10.830 --> 00:00:15.690
users as the rows and then the number of latent features as the column,

00:00:15.689 --> 00:00:19.019
and then sigma is going to be a square matrix,

00:00:19.019 --> 00:00:22.169
where the number of rows equals the number

00:00:22.170 --> 00:00:25.200
of columns equals the number of latent features,

00:00:25.199 --> 00:00:27.689
and then V transpose is going to

00:00:27.690 --> 00:00:30.670
be the same number of rows as the same number of latent features,

00:00:30.670 --> 00:00:36.885
and then the number of columns is going to be the number of movies we're interested in.

00:00:36.884 --> 00:00:40.829
So, the number of rows is going to be the same as the number of users,

00:00:40.829 --> 00:00:46.104
b, the number of columns of U is the number of latent features,

00:00:46.104 --> 00:00:52.144
so a, and the number of rows and V transpose,

00:00:52.145 --> 00:00:57.050
importantly, V and V transpose are going to have the opposite dimensions.

00:00:57.049 --> 00:00:59.449
So, the number of rows and V transpose is

00:00:59.450 --> 00:01:02.670
going to be the same as the number of latent features,

00:01:02.670 --> 00:01:06.475
and then the columns are going to be equal to the number of movies.

00:01:06.474 --> 00:01:09.319
So, hopefully you can get a mental picture of

00:01:09.319 --> 00:01:12.559
that idea based on what we saw in the previous video.

00:01:12.560 --> 00:01:15.530
So then, next I want us to actually perform

00:01:15.530 --> 00:01:18.560
singular value decomposition on this user movie matrix,

00:01:18.560 --> 00:01:21.325
and they give us some documentation.

00:01:21.325 --> 00:01:23.454
There's an example down here.

00:01:23.454 --> 00:01:28.920
I'm actually just going to pull this where a is the matrix that we do this,

00:01:30.400 --> 00:01:36.060
and this is called user_movie_subset.

00:01:37.549 --> 00:01:40.849
And so then, what you notice about the shapes of

00:01:40.849 --> 00:01:44.989
your matrices if you try to take the dot product of three objects you get back,

00:01:44.989 --> 00:01:48.819
can you directly do this to get back to user movie matrix?

00:01:48.819 --> 00:01:52.814
So notice, this is a four-by-four,

00:01:52.814 --> 00:01:55.034
this is a 20 by 20,

00:01:55.034 --> 00:01:57.459
and this is a four dimensional array.

00:01:57.459 --> 00:01:59.769
So, we can't take the dot product of these things.

00:01:59.769 --> 00:02:07.259
Instead, they're being constrained by the number of movies in our matrix, right?

00:02:07.260 --> 00:02:08.754
So, this first one,

00:02:08.754 --> 00:02:11.579
the sigma is actually just showing up as an array.

00:02:11.580 --> 00:02:16.015
But what we really know is that that array is probably the diagonal elements.

00:02:16.014 --> 00:02:18.309
This is the user matrix,

00:02:18.310 --> 00:02:21.949
so this is a 20 by 20 matrix where basically the number of columns

00:02:21.949 --> 00:02:25.759
we want to keep is the number of latent features we want to keep,

00:02:25.759 --> 00:02:29.870
and then the maximum number of latent features we can keep is four because it's

00:02:29.870 --> 00:02:35.740
constrained by the minimum of the number of movies or the number of users.

00:02:35.740 --> 00:02:39.370
So, here you can read my thoughts on that.

00:02:39.370 --> 00:02:42.020
What we'd like to do is change

00:02:42.020 --> 00:02:44.740
the right shape so that we can actually take the dot product.

00:02:44.740 --> 00:02:46.480
So, what that means is,

00:02:46.479 --> 00:02:51.435
you should be a 20 by 4 because that's what they want k to be,

00:02:51.435 --> 00:02:53.539
which we can create in the following way.

00:02:53.539 --> 00:02:56.284
So, we want all of the rows,

00:02:56.284 --> 00:03:02.020
but we want the columns to be the same as the length of s. So,

00:03:02.020 --> 00:03:06.920
we're going to keep through the beginning through the fourth, which is the length of s,

00:03:06.919 --> 00:03:13.199
and then s we want to actually be a diagonal.

00:03:13.199 --> 00:03:16.099
So, that's something we could do since we're keeping all four of them,

00:03:16.099 --> 00:03:18.650
we can just store the diagonal.

00:03:18.830 --> 00:03:24.560
Then, the last thing we want to do is get V transpose,

00:03:24.560 --> 00:03:28.409
which is actually going to stay the same because it's already a four-by-four.

00:03:28.919 --> 00:03:33.009
So, if we look at this, then we look at the shape,

00:03:33.009 --> 00:03:36.429
the idea is that it's a 20 by 4 and then we're going to

00:03:36.430 --> 00:03:40.474
multiply that by this thing which is a four-by-four.

00:03:40.474 --> 00:03:50.259
So, let's do s_new.shape and then vt_new.shape.

00:03:50.259 --> 00:03:52.185
All right. And if we look at this,

00:03:52.185 --> 00:03:53.795
now we have this 20 by 4,

00:03:53.794 --> 00:03:58.984
which is our user by latent feature and then this is our sigma matrix,

00:03:58.985 --> 00:04:00.595
which is a four-by-four,

00:04:00.594 --> 00:04:02.330
and then this last,

00:04:02.330 --> 00:04:05.540
which is just the number of latent features by the number of latent features,

00:04:05.539 --> 00:04:08.775
and then this is the number of latent features by the number of movies.

00:04:08.775 --> 00:04:12.865
But if we wanted to, we could change this so that it's like three latent features,

00:04:12.865 --> 00:04:14.105
and then a three-by-three,

00:04:14.104 --> 00:04:16.670
and then a three-by-four is possible,

00:04:16.670 --> 00:04:18.375
or if we wanted two latent features.

00:04:18.375 --> 00:04:20.480
But again, the number of latent features is

00:04:20.480 --> 00:04:23.870
constrained by the minimum of the number of users and the number of movies.

00:04:23.870 --> 00:04:26.449
So, in this case, it's constrained by four.

00:04:26.709 --> 00:04:29.289
Then it looks like we got all of that right.

00:04:29.290 --> 00:04:32.100
Now we are being asked,

00:04:32.100 --> 00:04:36.780
what's the total amount of variability in our data set that we can try to explain?

00:04:36.779 --> 00:04:42.304
We can actually get that by taking the sum of the diagonal elements squared.

00:04:42.305 --> 00:04:46.959
The next question is,

00:04:46.959 --> 00:04:50.324
what's the variability explained by component one and component two?

00:04:50.324 --> 00:04:58.610
So, we can take the first element squared plus the second element squared.

00:04:58.850 --> 00:05:04.610
So, this gives us the total amount of variability explained by the first two components,

00:05:04.610 --> 00:05:13.710
and then the percentage is then this far explained component divided by the total.

00:05:14.399 --> 00:05:19.009
So, the total amount of variability in the original matrix is this amount,

00:05:19.009 --> 00:05:23.610
and actually the first two components explain quite a bit of it.

