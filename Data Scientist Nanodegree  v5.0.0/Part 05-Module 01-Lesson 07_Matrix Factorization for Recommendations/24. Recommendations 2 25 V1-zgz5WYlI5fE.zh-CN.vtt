WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.780
在最后一部分

00:00:01.780 --> 00:00:05.629
我们将把在之前的 notebook 中用到的所有代码

00:00:05.629 --> 00:00:11.140
都移到一个类中 使任何人都能轻松地拟合你的推荐系统

00:00:11.140 --> 00:00:12.825
然后做出预测

00:00:12.824 --> 00:00:15.674
或向新用户推荐电影

00:00:15.675 --> 00:00:17.469
首先注意

00:00:17.469 --> 00:00:20.729
在左侧有几个文件

00:00:20.730 --> 00:00:22.875
你需要填写的文件是

00:00:22.875 --> 00:00:25.399
这个 recommender_template 文件

00:00:25.399 --> 00:00:27.254
打开该文件后

00:00:27.254 --> 00:00:30.529
你会发现 里面已经有一个类

00:00:30.530 --> 00:00:34.429
还有一个 fit() 方法上面有一个 init() 方法

00:00:34.429 --> 00:00:37.519
你可以通过该方法向类中传入变量

00:00:37.520 --> 00:00:39.625
接着是 predict_rating() 方法

00:00:39.625 --> 00:00:42.804
以及 make_recs() 方法

00:00:42.804 --> 00:00:46.789
还有一个 train_data.csv 文件

00:00:46.789 --> 00:00:50.914
其中包含所有的影评数据 以及一个 movies_clean.csv 文件

00:00:50.914 --> 00:00:55.839
我简单介绍下设置完毕后推荐系统的运行原理

00:00:55.840 --> 00:00:57.585
转入 Python 后

00:00:57.585 --> 00:01:02.695
你应该能够从 recommender.py 文件提取推荐系统文件

00:01:02.695 --> 00:01:06.665
我将从 recommender 导入 Recommender

00:01:06.665 --> 00:01:10.175
然后实例化 Recommender

00:01:10.174 --> 00:01:13.340
我的 init() 是空的

00:01:13.340 --> 00:01:15.475
不过你的 init() 可能设置不同

00:01:15.474 --> 00:01:19.369
在我设置 init() 后

00:01:19.370 --> 00:01:21.609
它能够接受影评数据

00:01:21.609 --> 00:01:26.914
它应该接受训练数据和电影数据

00:01:26.915 --> 00:01:32.745
设置好后 它将使 Recommender 拟合训练数据和电影数据

00:01:32.745 --> 00:01:35.600
注意 我使用了之前在奇异值分解部分

00:01:35.599 --> 00:01:39.679
用到的类似方法

00:01:39.680 --> 00:01:42.890
我使用的是 FunkSVD 拟合部分

00:01:42.890 --> 00:01:45.829
但是你也可以使用最热门的推荐方法拟合数据

00:01:45.829 --> 00:01:49.069
或者使用基于内容的推荐方法拟合数据

00:01:49.069 --> 00:01:52.699
或者使用在上个 notebook 中使用的方法拟合数据

00:01:52.700 --> 00:01:55.070
这部分没有一个正确答案

00:01:55.069 --> 00:01:56.724
这部分代码还在运行

00:01:56.724 --> 00:02:00.804
我乘机简单介绍下 recommender 文件是如何设置的

00:02:00.805 --> 00:02:03.950
我还创建了这个recommender_functions 文件

00:02:03.950 --> 00:02:06.859
我们之前编写了大量函数

00:02:06.858 --> 00:02:09.469
我将需要用到的函数放到了这个文件里

00:02:09.469 --> 00:02:12.109
打开 recommender_functions 文件

00:02:12.110 --> 00:02:15.710
里面有 get_movie_names 函数

00:02:15.710 --> 00:02:19.515
我在这里创建了 create_ranked_df 文件

00:02:19.514 --> 00:02:22.349
我将之前已经编写的很多函数

00:02:22.349 --> 00:02:26.069
复制粘贴到了这个文件中

00:02:26.069 --> 00:02:29.229
从而轻松地在 Recommender 类中使用这些函数

00:02:29.229 --> 00:02:32.590
打开该类文件

00:02:32.590 --> 00:02:35.390
你会发现我的 init() 文件是空的

00:02:35.389 --> 00:02:38.959
但是我写了一段文档字符串

00:02:38.960 --> 00:02:44.045
清晰地注明了每个函数的输入和输出应该是什么

00:02:44.044 --> 00:02:49.383
这个推荐系统将有 12 个潜在特征

00:02:49.383 --> 00:02:53.394
学习速率是 0.0001 迭代次数是 100 次

00:02:53.395 --> 00:02:58.430
目前已经完成了一半的任务 拟合模型后

00:02:58.430 --> 00:03:01.719
我将能够轻松地使用实例化的这个 Recommender

00:03:01.719 --> 00:03:05.504
做出预测和推荐电影

00:03:05.504 --> 00:03:10.715
下面我将简单介绍下这个类中的每个方法

00:03:10.715 --> 00:03:15.545
在每个方法中编写这些文档字符串很有用

00:03:15.544 --> 00:03:18.829
这样的话 其他人在使用你的类时

00:03:18.830 --> 00:03:23.565
他们能够在任何方法之后写一个问号

00:03:23.564 --> 00:03:26.780
看看在该类的每个部分

00:03:26.780 --> 00:03:30.405
输入和输出将是什么

00:03:30.405 --> 00:03:34.280
实际上 在该类中以及 recommender_functions

00:03:34.280 --> 00:03:37.240
文件中的所有代码

00:03:37.240 --> 00:03:40.534
基本上都是我们在 notebook 中使用的代码

00:03:40.534 --> 00:03:43.039
我只是将它们放在了类中

00:03:43.039 --> 00:03:45.408
便于我们重复利用这些代码

00:03:45.408 --> 00:03:48.560
好的可以看出 这个模型并没有

00:03:48.560 --> 00:03:52.460
完全拟合数据 因为还没有收敛

00:03:52.460 --> 00:03:54.939
可能还需要运行更长时间

00:03:54.939 --> 00:03:57.259
但是足以演示

00:03:57.259 --> 00:04:00.745
fit() 方法的原理

00:04:00.745 --> 00:04:04.909
如果你还不确定 fit() 方法是如何运行的

00:04:04.909 --> 00:04:08.314
可以参阅我在类中编写的这些文档字符串

00:04:08.314 --> 00:04:12.055
很容易看出输入是什么

00:04:12.055 --> 00:04:15.895
可以看出 没有输出内容

00:04:15.895 --> 00:04:19.750
的确输出了一条说明所发生情况的消息 但是没有返回任何内容

00:04:19.750 --> 00:04:22.415
它创建了这些项

00:04:22.415 --> 00:04:27.020
现在实例化对象中应该有这些项了

00:04:27.019 --> 00:04:29.824
如果查看 n_users

00:04:29.824 --> 00:04:34.209
可以看到数据集中有多少个用户

00:04:34.209 --> 00:04:36.454
如果查看 n_movies

00:04:36.454 --> 00:04:39.004
可以看到数据集中有多少个用户

00:04:39.004 --> 00:04:41.409
或者可以查看 n_movies

00:04:41.410 --> 00:04:43.950
可以看到数据集中有多少个电影

00:04:43.949 --> 00:04:48.084
这个类使我们能够非常轻松地提取某些部分

00:04:48.084 --> 00:04:51.914
这些是所有的方法

00:04:51.915 --> 00:04:54.970
我们应该能够做出推荐了

00:04:54.970 --> 00:04:58.025
我记得在顶部的是用户 8

00:04:58.024 --> 00:05:00.984
抱歉出错了

00:05:00.985 --> 00:05:02.824
再仔细看看

00:05:02.824 --> 00:05:05.495
会发现默认类型是 movie

00:05:05.495 --> 00:05:07.454
再回到上面

00:05:07.454 --> 00:05:13.334
输入 ID 这个 ID 类型应该是 user

00:05:13.334 --> 00:05:15.344
我将这个改成 user

00:05:15.345 --> 00:05:20.785
好的我们向此用户推荐了这 5 部电影

00:05:20.785 --> 00:05:22.965
默认推荐数量是 5 部

00:05:22.964 --> 00:05:26.899
编写清晰的文档字符串很重要

00:05:26.899 --> 00:05:31.109
使我们能够完全明白要向这些方法提供什么输入

00:05:31.110 --> 00:05:33.040
你可以看看我的文档字符串

00:05:33.040 --> 00:05:35.450
我已经很长时间没有接触这些代码了

00:05:35.449 --> 00:05:38.594
如果没有文档字符串的话 我都不知道哪里出了问题

00:05:38.595 --> 00:05:42.120
可能都找不到问题的缘由

00:05:42.120 --> 00:05:46.019
希望你能受到启发 知道如何创建类

00:05:46.019 --> 00:05:50.389
在向类中添加功能时 你可以灵活处理

00:05:50.389 --> 00:05:56.709
代码可以很复杂 或很简单

