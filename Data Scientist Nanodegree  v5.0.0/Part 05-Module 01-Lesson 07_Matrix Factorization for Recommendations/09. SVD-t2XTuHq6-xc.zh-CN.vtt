WEBVTT
Kind: captions
Language: zh-CN

00:00:04.009 --> 00:00:06.879
在这节课

00:00:06.879 --> 00:00:11.580
你将学习矩阵分解的传统方法 SVD

00:00:11.580 --> 00:00:15.009
遗憾的是 你将发现

00:00:15.009 --> 00:00:16.780
这个方法

00:00:16.780 --> 00:00:19.135
无法帮助我们做出推荐

00:00:19.135 --> 00:00:24.359
因为只有在用户-项目矩阵没有缺少值时 它才有用

00:00:24.359 --> 00:00:30.155
但是 学到的概念有助于我们继续学习这节课剩下的内容

00:00:30.155 --> 00:00:32.050
在上节课

00:00:32.049 --> 00:00:37.319
我们创建了一个用户-项目矩阵

00:00:37.320 --> 00:00:39.914
行表示用户 列表示项目

00:00:39.914 --> 00:00:43.210
我们可以重写用户-项目矩阵

00:00:43.210 --> 00:00:48.804
每个 r 表示某个用户对某个项目的评分

00:00:48.804 --> 00:00:50.679
前面的值 1-n

00:00:50.679 --> 00:00:54.829
表示哪个用户发表的评分

00:00:54.829 --> 00:01:00.244
后面的值 1-n 表示被评分的电影

00:01:00.244 --> 00:01:06.515
所以 r11 表示用户 1 对电影 1 的评分

00:01:06.515 --> 00:01:12.724
r23 表示用户 2 对电影 3 的评分

00:01:12.724 --> 00:01:18.655
当我们对用户-项目矩阵使用奇异值分解 (SVD) 时

00:01:18.655 --> 00:01:21.420
我们将矩阵拆分为三个矩阵

00:01:21.420 --> 00:01:27.049
通常这些矩阵称为 U ∑ VT

00:01:27.049 --> 00:01:31.064
先来看看这个矩阵 U

00:01:31.064 --> 00:01:34.579
矩阵 U 的作用是告诉我们

00:01:34.579 --> 00:01:38.090
用户与特定的潜在因子之间的关系

00:01:38.090 --> 00:01:41.630
假设有这四个用户

00:01:41.629 --> 00:01:47.649
再添加几个潜在因子：狗、AI 和悲伤

00:01:47.650 --> 00:01:51.469
这个 U 矩阵中的数字表示

00:01:51.469 --> 00:01:56.200
每个用户对每个潜在因子的感受

00:01:56.200 --> 00:02:00.400
可以看出 Jessie 对狗类电影的评分最高

00:02:00.400 --> 00:02:05.570
还可以看出 AI 评分与每个用户的关系

00:02:05.569 --> 00:02:08.944
Sam 对这些电影的评分最高

00:02:08.944 --> 00:02:13.454
这些用户对悲伤电影的评分最高

00:02:13.455 --> 00:02:18.310
U 矩阵是一个 n x k 矩阵

00:02:18.310 --> 00:02:23.444
k 表示要保留的潜在因子数量

00:02:23.444 --> 00:02:28.189
接下来 我们来看看 V 转置矩阵

00:02:28.189 --> 00:02:32.344
这个矩阵也包含所有的潜在因子

00:02:32.344 --> 00:02:34.099
但是它涉及的是电影

00:02:34.099 --> 00:02:36.810
而不是用户

00:02:36.810 --> 00:02:41.240
查看的是相同的潜在因子 但是用到的是电影

00:02:41.240 --> 00:02:43.520
我们获得了这样的矩阵

00:02:43.520 --> 00:02:45.745
从 V 转置矩阵可以看出

00:02:45.745 --> 00:02:47.840
《小姐与流浪汉》

00:02:47.840 --> 00:02:51.335
在小狗潜在特征方面具有最高值

00:02:51.335 --> 00:02:54.800
《恋恋笔记本》是最悲伤的电影

00:02:54.800 --> 00:02:59.915
《人工智能》和《机器人瓦力》在机器人潜在特征方面的值很高

00:02:59.914 --> 00:03:02.929
《恋恋笔记本》和《小姐与流浪汉》

00:03:02.930 --> 00:03:06.530
在这个特征方面具有很小的负值

00:03:06.530 --> 00:03:08.050
这很合理

00:03:08.050 --> 00:03:14.070
U 和 V 转置矩阵的值可以是任何值

00:03:14.069 --> 00:03:19.430
电影或用户对特定的潜在特征的权重并不一定是正数

00:03:19.430 --> 00:03:25.219
即使所有的评分和用户-项目矩阵值是正数

00:03:25.219 --> 00:03:28.430
根据这个矩阵包含的信息

00:03:28.430 --> 00:03:30.895
可以判断它是一个 k x n 矩阵

00:03:30.895 --> 00:03:33.560
k 表示潜在因子的数量

00:03:33.560 --> 00:03:35.979
n 表示电影数量

00:03:35.979 --> 00:03:40.604
最后 我们还需要查看中间的 ∑ 矩阵

00:03:40.604 --> 00:03:44.185
这是一个 k x k 对角矩阵

00:03:44.185 --> 00:03:48.854
表示非对角线上的所有值都是 0

00:03:48.854 --> 00:03:51.079
它的行数和列数

00:03:51.080 --> 00:03:54.850
等于潜在因子的数量

00:03:54.849 --> 00:03:57.979
在实践中 潜在因子的数量

00:03:57.979 --> 00:04:01.219
并不一定很直白

00:04:01.219 --> 00:04:04.969
在此示例中 我们的潜在因子标记的很清晰

00:04:04.969 --> 00:04:08.430
但是很快你会发现现实中并非这样

00:04:08.430 --> 00:04:11.450
对角线上的值有助于我们判断

00:04:11.449 --> 00:04:14.530
要保留多少个潜在因子

00:04:14.530 --> 00:04:19.259
它们始终是从大到小排序的正数

00:04:19.259 --> 00:04:23.899
第一个值是与第一个潜在因子相关的权重

00:04:23.899 --> 00:04:28.745
第二个值是与第二个潜在因子相关的权重 以此类推

00:04:28.745 --> 00:04:33.139
权重越大 表示该潜在因子越重要

00:04:33.139 --> 00:04:38.979
能够重现原始用户-项目矩阵的评分

00:04:38.980 --> 00:04:44.270
对于这个示例 可以看出 在预测评分方面

00:04:44.269 --> 00:04:47.839
用户很喜欢小狗或电影与小狗有关

00:04:47.839 --> 00:04:52.579
比用户对机器人或悲伤电影的偏好程度更重要

00:04:52.579 --> 00:04:55.759
通过将这些矩阵相乘

00:04:55.759 --> 00:04:58.235
我们可以根据用户对潜在因子的感受

00:04:58.235 --> 00:05:03.540
以及这些潜在因子对于评分的重要性

00:05:03.540 --> 00:05:08.385
以及最后潜在因子出现在特定电影里的情况

00:05:08.384 --> 00:05:13.125
针对每个用户-电影组合重新构建一个电影评分

00:05:13.125 --> 00:05:17.124
通过计算 U ∑ 和 V 转置矩阵的值

00:05:17.124 --> 00:05:22.720
我们能够预测出每个用户-电影组合

