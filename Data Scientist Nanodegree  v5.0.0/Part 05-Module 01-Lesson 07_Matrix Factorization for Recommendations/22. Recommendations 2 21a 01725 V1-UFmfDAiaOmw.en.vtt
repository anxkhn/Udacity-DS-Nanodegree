WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.625
In this video, we're going to extend what we did earlier with Funk SVD,

00:00:04.625 --> 00:00:07.154
but enable ourselves to make

00:00:07.155 --> 00:00:11.445
predictions where originally we were hit by the cold start problem.

00:00:11.445 --> 00:00:16.094
So, we saw in the previous video that we weren't able to make predictions

00:00:16.094 --> 00:00:20.655
when a user or a movie hadn't been in our training dataset,

00:00:20.655 --> 00:00:23.390
but then showed up in our testing dataset.

00:00:23.390 --> 00:00:27.960
For those instances, in this notebook that we'll work on here,

00:00:27.960 --> 00:00:32.774
we'll actually make predictions using other methods besides Funk SVD.

00:00:32.774 --> 00:00:35.579
So, to start, we're actually going to read

00:00:35.579 --> 00:00:38.585
in a whole bunch of stuff that we used earlier,

00:00:38.585 --> 00:00:41.929
and also walk through these lines while they get written.

00:00:41.929 --> 00:00:43.314
Essentially, the first part,

00:00:43.314 --> 00:00:45.224
we're going to read in our datasets.

00:00:45.225 --> 00:00:48.664
We are pulling in this create_train_test,

00:00:48.664 --> 00:00:50.869
which you used in the previous notebook.

00:00:50.869 --> 00:00:53.024
We're going to pull in this predict_rating,

00:00:53.024 --> 00:00:58.195
which pulls in our predictions using Funk SVD from the previous notebook.

00:00:58.195 --> 00:01:00.035
Then, down here at the bottom,

00:01:00.034 --> 00:01:05.159
you'll see that I'm creating the user by movie matrix,

00:01:05.159 --> 00:01:08.814
the same that we've been using throughout a number of the notebooks.

00:01:08.814 --> 00:01:10.715
Down here in this last part,

00:01:10.715 --> 00:01:13.040
I pickled the user matrix and

00:01:13.040 --> 00:01:17.490
the movie matrix that were created in the previous notebook using Funk SVD.

00:01:17.489 --> 00:01:21.089
Now I'm just pulling them in so that we can use them again in this notebook.

00:01:21.090 --> 00:01:22.835
So, if we take a look at this,

00:01:22.834 --> 00:01:25.949
I'll just create a cell up here.

00:01:25.950 --> 00:01:28.640
Let's look at the user metrics.

00:01:28.640 --> 00:01:30.430
So, the user matrix,

00:01:30.430 --> 00:01:32.990
and if we look at the shape, might be more helpful.

00:01:32.989 --> 00:01:39.244
You can see that 3,278 is the number of users that we have in the training set,

00:01:39.245 --> 00:01:42.005
and we had 15 latent features.

00:01:42.004 --> 00:01:45.140
Then in the movie matrix,

00:01:45.140 --> 00:01:51.094
we had 15 features and 2,679 movies.

00:01:51.094 --> 00:01:52.564
So, this is the number of movies,

00:01:52.564 --> 00:01:55.625
and this was the number of latent features that we had from

00:01:55.625 --> 00:01:59.239
using Funk SVD on the training dataset in the previous notebook.

00:01:59.239 --> 00:02:01.549
I basically just saved those in a way that

00:02:01.549 --> 00:02:04.265
we could pull them into this notebook and use them again here.

00:02:04.265 --> 00:02:09.500
So, we want to make a comparison between each of

00:02:09.500 --> 00:02:15.430
our predictions and our actual values using Funk SVD where possible,

00:02:15.430 --> 00:02:19.400
and returned back some metrics on how well Funk SVD is

00:02:19.400 --> 00:02:24.900
doing and telling us what it would predict for a particular movie user combinations.

00:02:24.900 --> 00:02:27.775
So, I created three arrays,

00:02:27.775 --> 00:02:32.740
similar to what we actually have used in earlier notebooks,

00:02:32.740 --> 00:02:38.995
where essentially I took an array of the users.

00:02:38.995 --> 00:02:42.460
So, I pulled the users, and it might be helpful.

00:02:42.460 --> 00:02:44.700
So, if we look at the val_df,

00:02:44.699 --> 00:02:46.769
remember this is just the validation data.

00:02:46.770 --> 00:02:50.344
So, we split our dataset into training and validation.

00:02:50.344 --> 00:02:53.930
The val_df is just the users and

00:02:53.930 --> 00:02:59.349
movie combinations that we haven't actually passed through our Funk SVD method.

00:02:59.349 --> 00:03:02.840
So, we're going to make predictions on those to see how well we did.

00:03:02.840 --> 00:03:10.219
So, I'm going to pull off the movie IDs.

00:03:10.219 --> 00:03:14.935
Again, this looks a lot like what we did earlier.

00:03:14.935 --> 00:03:18.110
We're going to index into this to make sure we're pulling

00:03:18.110 --> 00:03:21.260
the right spots in these arrays and then pulling

00:03:21.259 --> 00:03:27.500
the right row-column combinations from our user matrix and our movie matrix.

00:03:27.500 --> 00:03:29.555
So you can see that I'm passing those in up here

00:03:29.555 --> 00:03:32.360
because we're going to be taking the dot product of

00:03:32.360 --> 00:03:39.070
essentially a user row with a movie column to make our predictions.

00:03:39.069 --> 00:03:42.109
So, I'm going to create a couple of

00:03:42.110 --> 00:03:45.240
other variables that we're going to use throughout this function.

00:03:45.240 --> 00:03:47.064
One is the sums of squared error.

00:03:47.064 --> 00:03:50.435
So, I'm going to keep track of what are some the squared error that

00:03:50.435 --> 00:03:54.289
is and add to this as we make additional predictions.

00:03:54.289 --> 00:03:56.780
I'm going to keep track of the number of ratings we make.

00:03:56.780 --> 00:03:59.344
So, to start out with we'll have zero.

00:03:59.344 --> 00:04:03.050
Then, I'm going to keep track of our predicted and actual values.

00:04:03.050 --> 00:04:05.060
I'm just going to store those in lists.

00:04:05.060 --> 00:04:07.219
I created this actual versus predicted.

00:04:07.219 --> 00:04:08.500
Essentially, what this is,

00:04:08.500 --> 00:04:10.400
I'm going to put actual on one axis,

00:04:10.400 --> 00:04:11.995
predicted on the other axis,

00:04:11.995 --> 00:04:14.730
and then create a heatmap to

00:04:14.729 --> 00:04:20.019
understand how well my actual values are comparing against my predicted values.

00:04:20.019 --> 00:04:22.214
For every individual in the val_users,

00:04:22.214 --> 00:04:24.379
I'm just going to use the index of those and then

00:04:24.379 --> 00:04:27.245
I'll index into the different parts that we need.

00:04:27.245 --> 00:04:31.965
I'm essentially going to try to do a prediction using Funk SVD,

00:04:31.964 --> 00:04:35.299
but I'm going to raise an exception where we just

00:04:35.300 --> 00:04:39.020
continue on to the next individual if the prediction fails.

00:04:39.019 --> 00:04:42.174
So, I'm going to use the predicted rating function that we had before.

00:04:42.175 --> 00:04:45.345
I'm going to use the user matrix,

00:04:45.345 --> 00:04:48.220
which is from Funk SVD that we read in with the pickle.

00:04:48.220 --> 00:04:50.915
Here's the movie matrix that we read in with the pickle.

00:04:50.915 --> 00:04:53.980
Then what I want is the user ID and the movie ID.

00:04:53.980 --> 00:04:55.520
So, I'm going to use the index,

00:04:55.519 --> 00:05:01.979
and I'm going to pull those from val_users and then that index.

00:05:01.980 --> 00:05:09.175
I want to pull from val_movies at that particular index and make a prediction.

00:05:09.175 --> 00:05:12.710
Then what I'm going to do is I'm going to look

00:05:12.709 --> 00:05:17.149
at how far off my prediction is from the actual value.

00:05:17.149 --> 00:05:20.224
I'm going to take the prediction minus the actual,

00:05:20.225 --> 00:05:26.000
where the actual is equal to val_ratings at that index,

00:05:26.000 --> 00:05:29.779
and then I'm going to square it so that they're all positive.

00:05:29.779 --> 00:05:33.044
So, this is going to keep track of my sum of the squared error.

00:05:33.045 --> 00:05:38.150
Then, basically, I'm going to add one to the number of ratings that we actually make.

00:05:38.149 --> 00:05:40.764
So, notice, if the prediction fails,

00:05:40.764 --> 00:05:42.529
we're just going to move to the accept.

00:05:42.529 --> 00:05:44.809
So, then nothing will get added to our sum of

00:05:44.810 --> 00:05:48.535
the squared error and nothing will get added to our number of ratings.

00:05:48.535 --> 00:05:54.680
Okay. Then I'm going to append the actual value to the actual list,

00:05:54.680 --> 00:05:58.560
and I'm going to append the predicted value to the predicted list.

00:05:58.560 --> 00:06:00.550
So, I'm going to append the prediction here.

00:06:00.550 --> 00:06:05.319
I'm going to append the actual value here.

00:06:05.850 --> 00:06:10.695
Then in my actual versus prediction,

00:06:10.694 --> 00:06:13.599
and this just took some getting used to.

00:06:13.600 --> 00:06:19.805
But essentially, what I'm doing is I'm going to index into

00:06:19.805 --> 00:06:27.314
this matrix that I'm creating and store a one where my predicted actual value falls.

00:06:27.314 --> 00:06:29.615
This will make more sense when I show you the picture.

00:06:29.615 --> 00:06:31.730
But essentially, I'm indexing in,

00:06:31.730 --> 00:06:34.550
and I'm just going to say add a one to that spot.

00:06:34.550 --> 00:06:41.750
So, this is just a fancy indexing way to pinpoint exactly where I want to add that one.

00:06:41.750 --> 00:06:46.899
I'm adding that one wherever the predicted actual value falls on a 10 by 10 grid.

00:06:46.899 --> 00:06:50.579
From here, I'm going to update the rmse as

00:06:50.579 --> 00:06:58.779
the square root of the sum of squared error divided by the number of ratings we make.

00:06:58.779 --> 00:07:03.559
I'm going to keep track of the percent rated as basically the number of

00:07:03.560 --> 00:07:07.865
rated divided by the length of val_users.

00:07:07.865 --> 00:07:09.790
So, this is the total number of users,

00:07:09.790 --> 00:07:12.770
and we can keep track of the percentage

00:07:12.769 --> 00:07:17.185
of individuals who were able to make ratings for using SVD.

00:07:17.185 --> 00:07:20.319
Next, we're tasked with seeing how well this worked.

00:07:20.319 --> 00:07:22.925
I'm just going to copy this part.

00:07:22.925 --> 00:07:29.509
I'm going to rip this part up here and put an equal sign in between it.

00:07:29.509 --> 00:07:31.764
Oh, I did this before.

00:07:31.764 --> 00:07:39.884
Sorry. This should be act versus predict. And I did.

00:07:39.884 --> 00:07:43.769
Oh, this is act versus predict.

00:07:43.769 --> 00:07:49.904
I did a print of the rmse and the percent rated.

00:07:49.904 --> 00:07:57.394
Then I also created this heatmap of the actual versus predicted,

00:07:57.394 --> 00:08:00.930
and then I created a bunch of other labels here.

00:08:00.930 --> 00:08:04.269
I think I missed something up with this part.

00:08:04.269 --> 00:08:11.379
Oh, this is val_ratings index minus all that.

00:08:11.379 --> 00:08:12.745
I should've known better.

00:08:12.745 --> 00:08:15.879
This is got to grab the real value rate.

00:08:15.879 --> 00:08:18.245
So, this is got to grab the actual rating to know

00:08:18.245 --> 00:08:21.245
where in the grid it falls. Let's try again.

00:08:21.245 --> 00:08:23.009
Cool. So, you can see,

00:08:23.009 --> 00:08:24.730
a majority of the points fall here,

00:08:24.730 --> 00:08:26.819
where the predicted value is about a six,

00:08:26.819 --> 00:08:29.389
and the actual value is also about a six,

00:08:29.389 --> 00:08:32.129
and most of the ratings fall in that range.

00:08:32.129 --> 00:08:35.779
You can see that not very many of the values fall in this range up here.

00:08:35.779 --> 00:08:38.824
We could look at some other metrics, but essentially,

00:08:38.825 --> 00:08:42.035
we're missing by about 2.04 on any of those ratings

00:08:42.034 --> 00:08:46.495
and we're able to make predictions for about 50 percent of them.

00:08:46.495 --> 00:08:52.909
We can see how well we were able to make predictions by looking at the number of ratings

00:08:52.909 --> 00:08:59.875
that were available and look at the percent rated times that.

00:08:59.875 --> 00:09:03.100
So, essentially, for the number of ratings that were available,

00:09:03.100 --> 00:09:06.835
we were able to make predictions for about 960 of them.

00:09:06.835 --> 00:09:11.335
Similarly, if we look at one minus that,

00:09:11.335 --> 00:09:17.269
there were about 1,400 individuals that we weren't able to make ratings for.

