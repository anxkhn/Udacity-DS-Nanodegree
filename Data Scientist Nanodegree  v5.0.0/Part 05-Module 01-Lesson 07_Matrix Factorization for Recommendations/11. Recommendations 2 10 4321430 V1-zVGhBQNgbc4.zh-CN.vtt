WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.669
下个任务是判断奇异值分解后

00:00:02.669 --> 00:00:04.790
获得的矩阵的维度

00:00:04.790 --> 00:00:07.099
根据从上个视频学到的知识

00:00:07.099 --> 00:00:10.830
U 矩阵的行数等于用户数量

00:00:10.830 --> 00:00:15.690
列数等于潜在特征的数量

00:00:15.689 --> 00:00:19.019
∑ 是一个方矩阵

00:00:19.019 --> 00:00:22.169
行数等于列数

00:00:22.170 --> 00:00:25.200
并且等于潜在特征的数量

00:00:25.199 --> 00:00:27.689
V 转置矩阵的行数

00:00:27.690 --> 00:00:30.670
等于潜在特征的数量

00:00:30.670 --> 00:00:36.885
列数等于电影数量

00:00:36.884 --> 00:00:40.829
U 的行数等于用户数 答案是 b

00:00:40.829 --> 00:00:46.104
U 的列数等于潜在特征的数量 答案是 a

00:00:46.104 --> 00:00:52.144
V 转置的行数...

00:00:52.145 --> 00:00:57.050
注意 V 和 V 转置的维度是相对立的

00:00:57.049 --> 00:00:59.449
所以 V 转置的行数

00:00:59.450 --> 00:01:02.670
等于潜在特征的数量

00:01:02.670 --> 00:01:06.475
列数等于电影数量

00:01:06.474 --> 00:01:09.319
希望你能根据上个视频

00:01:09.319 --> 00:01:12.559
在脑海中想象出这些关系

00:01:12.560 --> 00:01:15.530
接下来将对这个用户-电影矩阵

00:01:15.530 --> 00:01:18.560
执行奇异值分解

00:01:18.560 --> 00:01:21.325
这里有一些文档

00:01:21.325 --> 00:01:23.454
下面有个示例

00:01:23.454 --> 00:01:28.920
我将复制这行代码 a 是要分解的矩阵

00:01:30.400 --> 00:01:36.060
改成 user_movie_subset

00:01:37.549 --> 00:01:40.849
你发现矩阵的形状有什么特征吗？

00:01:40.849 --> 00:01:44.989
如果对获得的三个对象执行点积运算

00:01:44.989 --> 00:01:48.819
能够直接获得用户-电影矩阵吗？

00:01:48.819 --> 00:01:52.814
这是 4x4

00:01:52.814 --> 00:01:55.034
这是 20 x 20

00:01:55.034 --> 00:01:57.459
这是一个四维数组

00:01:57.459 --> 00:01:59.769
我们不能对它们进行点积运算

00:01:59.769 --> 00:02:07.259
它们受到矩阵中电影数量的限制

00:02:07.260 --> 00:02:08.754
第一个矩阵

00:02:08.754 --> 00:02:11.579
∑ 显示为数组

00:02:11.580 --> 00:02:16.015
我们知道该数组很有可能是对角线元素

00:02:16.014 --> 00:02:18.309
这是用户矩阵

00:02:18.310 --> 00:02:21.949
它是一个 20 x 20 矩阵

00:02:21.949 --> 00:02:25.759
列数等于潜在特征的数量

00:02:25.759 --> 00:02:29.870
能够保持的最大潜在特征数量是 4

00:02:29.870 --> 00:02:35.740
因为它受到电影数量和用户数量这二者的更小值的限制

00:02:35.740 --> 00:02:39.370
这些是我的思路

00:02:39.370 --> 00:02:42.020
我们需要更改形状

00:02:42.020 --> 00:02:44.740
这样才能进行点积运算

00:02:44.740 --> 00:02:46.480
所以 U 应该是 20 x 4

00:02:46.479 --> 00:02:51.435
因为 k 应该是 4

00:02:51.435 --> 00:02:53.539
下面说说创建方式

00:02:53.539 --> 00:02:56.284
我们需要所有的行

00:02:56.284 --> 00:03:02.020
但是列数等于 s 的长度

00:03:02.020 --> 00:03:06.920
我们将保留第 1 列到第 4 列 即 s 的长度

00:03:06.919 --> 00:03:13.199
s 应该为对角线矩阵

00:03:13.199 --> 00:03:16.099
我们将保留所有 4 个值

00:03:16.099 --> 00:03:18.650
所以直接存储该对角线矩阵

00:03:18.830 --> 00:03:24.560
最后获取 V 转置矩阵

00:03:24.560 --> 00:03:28.409
它将保持不变 因为已经是 4 x 4 矩阵

00:03:28.919 --> 00:03:33.009
我们来看看形状

00:03:33.009 --> 00:03:36.429
它是 20 x 4

00:03:36.430 --> 00:03:40.474
然后乘以这个 4 x 4 矩阵

00:03:40.474 --> 00:03:50.259
s_new.shape 然后是 vt_new.shape

00:03:50.259 --> 00:03:52.185
好的看看这些矩阵

00:03:52.185 --> 00:03:53.795
这个是 20 x 4

00:03:53.794 --> 00:03:58.984
即用户 x 潜在特征 这个是 ∑ 矩阵

00:03:58.985 --> 00:04:00.595
它是 4 x 4

00:04:00.594 --> 00:04:02.330
最后一个是

00:04:02.330 --> 00:04:05.540
潜在特征的数量 x 潜在特征的数量

00:04:05.539 --> 00:04:08.775
这个是潜在特征数量 x 电影数量

00:04:08.775 --> 00:04:12.865
也可以改成 3 个潜在特征

00:04:12.865 --> 00:04:14.105
变成 3 x 3

00:04:14.104 --> 00:04:16.670
然后是 3 x 4

00:04:16.670 --> 00:04:18.375
还可以改成 2 个潜在特征

00:04:18.375 --> 00:04:20.480
潜在特征的数量

00:04:20.480 --> 00:04:23.870
受到用户数量和电影数量这二者的更小值的限制

00:04:23.870 --> 00:04:26.449
在此示例中受到 4 的限制

00:04:26.709 --> 00:04:29.289
看起来一切都正常

00:04:29.290 --> 00:04:32.100
接下来的问题是

00:04:32.100 --> 00:04:36.780
我们能够解释的数据集总变化量是多少？

00:04:36.779 --> 00:04:42.304
获得方法是计算对角线元素的平方和

00:04:42.305 --> 00:04:46.959
下个问题是

00:04:46.959 --> 00:04:50.324
第一个和第二个分量能够解释多少变化量？

00:04:50.324 --> 00:04:58.610
我们可以计算第一个元素的平方加上第二个元素的平方

00:04:58.850 --> 00:05:04.610
这就是前两个分量解释的总变化量

00:05:04.610 --> 00:05:13.710
百分比等于这两个分量的变化量除以总变化量

00:05:14.399 --> 00:05:19.009
原始矩阵的总变化量是这么多

00:05:19.009 --> 00:05:23.610
前两个分量所占的百分比很高

