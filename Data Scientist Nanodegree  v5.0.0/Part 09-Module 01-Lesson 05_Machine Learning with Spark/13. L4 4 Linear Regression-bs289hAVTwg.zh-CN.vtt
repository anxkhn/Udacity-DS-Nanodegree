WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.439
让我们训练第一个机器学习模型

00:00:02.439 --> 00:00:06.509
对于线性回归 我们预测的目标是连续变量

00:00:06.509 --> 00:00:10.960
那么我们来构建一个模型来预测问题的标签数量

00:00:10.960 --> 00:00:16.725
我们可以写个简单的 UDF 把文本拆分成一个列表并获取列表中元素的数量

00:00:16.725 --> 00:00:22.765
我们的预测结果会存在 NumTags 列中

00:00:22.765 --> 00:00:28.039
正如我们之前看到的 第一个问题有五个标签

00:00:28.039 --> 00:00:34.129
我们快速浏览一下这个 NumTags 列中标签数量的分布

00:00:34.130 --> 00:00:37.415
问题有一到五个标签

00:00:37.414 --> 00:00:39.865
3 是最常见的值

00:00:39.865 --> 00:00:44.315
下一步我们要确定用哪个特征做预测

00:00:44.314 --> 00:00:48.229
我的第一个假设是 问题内容描述长度

00:00:48.229 --> 00:00:52.674
可能是个好的选择 因为问题越长

00:00:52.674 --> 00:00:54.994
它涵盖的主题可能就越多

00:00:54.994 --> 00:00:58.219
让我们看看数据是否支持这个想法

00:00:58.219 --> 00:01:02.629
按标签数量对问题内容平均长度进行分组

00:01:02.630 --> 00:01:07.210
我们看到标签越多的问题往往更长

00:01:07.209 --> 00:01:09.589
我们可以做更多探索

00:01:09.590 --> 00:01:13.385
但时间缘故 让我们只用这一个特征吧

00:01:13.385 --> 00:01:18.984
首先 我们需要使用 VectorAssembler 把内容长度转换为向量

00:01:18.984 --> 00:01:25.030
因为机器学习模型需要特征是向量类型

00:01:25.030 --> 00:01:29.900
我们来看看我们新建的 LengthFeature 列

00:01:29.900 --> 00:01:34.150
现在它已经变成了 densevector 里面还有这个值

00:01:34.150 --> 00:01:36.065
看上去不错

00:01:36.064 --> 00:01:40.844
现在我们可以定义线性回归模型了

00:01:40.844 --> 00:01:46.715
我们可以使用默认参数或指定其中一些参数

00:01:46.715 --> 00:01:49.079
由于我们只有一个特征

00:01:49.079 --> 00:01:55.049
让我们试着拟合这个线性回归模型的斜率先不管截距

00:01:55.049 --> 00:02:00.739
我们的 dataframe 现在有很多列了

00:02:00.739 --> 00:02:07.685
但我们只需要标签的数量和长度这个特征列就够了

00:02:07.685 --> 00:02:10.955
那我们就创建一个只有的

00:02:10.955 --> 00:02:16.260
目标或标签以及我们要用的特征列的 dataframe

00:02:16.259 --> 00:02:17.909
好了

00:02:17.909 --> 00:02:20.829
Dataframe 创建好了

00:02:20.830 --> 00:02:26.304
只有 标签列和 特征列

00:02:26.304 --> 00:02:32.354
现在我们用这个线性回归模型来拟合数据集

00:02:32.354 --> 00:02:35.629
训练完成后

00:02:35.629 --> 00:02:43.870
我们可以得到这个模型的某些参数 例如 截距的系数

00:02:43.870 --> 00:02:51.819
由于我们没有拟合截距 所以它依旧是零 这是和预想一致的

00:02:51.819 --> 00:02:55.164
我们也可以得到这个模型的摘要

00:02:55.164 --> 00:02:59.264
摘要有关于模型的部分信息

00:02:59.264 --> 00:03:05.959
比如模型的标准误差或者模型的迭代次数

00:03:05.960 --> 00:03:10.165
我们先来看看R平方值

00:03:10.164 --> 00:03:15.870
因为我们用于拟合数据的模型非常简单

00:03:15.870 --> 00:03:21.330
我们的 R 平方约为 0.482

00:03:21.330 --> 00:03:23.840
效果一般般 但我们在

00:03:23.840 --> 00:03:27.740
特征工程和参数调优上基本没花时间

00:03:27.740 --> 00:03:29.675
第一次的尝试

00:03:29.675 --> 00:03:31.600
我们就到这里吧

