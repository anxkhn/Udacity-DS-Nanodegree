WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.439
Let's train our first machine learning model.

00:00:02.439 --> 00:00:06.509
For linear regression, we need a continuous variable as our target.

00:00:06.509 --> 00:00:10.960
So let's build a model to predict number of tags a question has.

00:00:10.960 --> 00:00:16.725
We can write a simple UDF to split the text into a list and get the number of elements.

00:00:16.725 --> 00:00:22.765
So, we will try to predict the value in the non-text column.

00:00:22.765 --> 00:00:28.039
Our first question has five tags as we saw it earlier.

00:00:28.039 --> 00:00:34.129
Let's take a quick look at the distribution in this num txt column.

00:00:34.130 --> 00:00:37.415
Question seems to have between one to five tags.

00:00:37.414 --> 00:00:39.865
T being the most common value.

00:00:39.865 --> 00:00:44.315
The next step is to decide what features you would like to use.

00:00:44.314 --> 00:00:48.229
My first hypothesis is that for example the length of

00:00:48.229 --> 00:00:52.674
the body of the question might be a good one since the longer the question,

00:00:52.674 --> 00:00:54.994
the more topics it might cover.

00:00:54.994 --> 00:00:58.219
Let's see if the data supports this idea.

00:00:58.219 --> 00:01:02.629
Looking at the average lengths grouped by the number of tags,

00:01:02.630 --> 00:01:07.210
we see that indeed questions in more tags tend to be longer.

00:01:07.209 --> 00:01:09.589
We could continue this exploration,

00:01:09.590 --> 00:01:13.385
but for the sake of time let's just go with the single future.

00:01:13.385 --> 00:01:18.984
First, we need to convert body lengths to a vector with the vector assembler

00:01:18.984 --> 00:01:25.030
since machine-learning models need features to be this vector type.

00:01:25.030 --> 00:01:29.900
Let's just check this new column we created lengths feature.

00:01:29.900 --> 00:01:34.150
It's indeed and dense-vector in this one value in it.

00:01:34.150 --> 00:01:36.065
So this looks good now.

00:01:36.064 --> 00:01:40.844
So now we can define our actual linear regression model.

00:01:40.844 --> 00:01:46.715
We could just use the default parameters or specify a few of them.

00:01:46.715 --> 00:01:49.079
Since we only have one feature,

00:01:49.079 --> 00:01:55.049
let's just try to fit the slope but not the intercept of this linear regression model.

00:01:55.049 --> 00:02:00.739
Our dataframe has a lot of columns at this point and

00:02:00.739 --> 00:02:07.685
we only really need the number of tags and the length feature.

00:02:07.685 --> 00:02:10.955
So we'll just create a data frame that only has

00:02:10.955 --> 00:02:16.260
our target or label and the features we would like to use.

00:02:16.259 --> 00:02:17.909
All right.

00:02:17.909 --> 00:02:20.829
So we have this dataframe called data with

00:02:20.830 --> 00:02:26.304
the labels and our lengths feature is the features.

00:02:26.304 --> 00:02:32.354
Now let's just split this linear regression model on a dataset.

00:02:32.354 --> 00:02:35.629
Once the training is done,

00:02:35.629 --> 00:02:43.870
we can get certain parameters of this model so we can see the coefficients for example on

00:02:43.870 --> 00:02:51.819
the intercept we decided not to be the intercept so that remains zero, it's expected.

00:02:51.819 --> 00:02:55.164
We can also get the summary of this model.

00:02:55.164 --> 00:02:59.264
The summary has virtual information for example

00:02:59.264 --> 00:03:05.959
the root mean square error of the model log or how many iterations we actually have done.

00:03:05.960 --> 00:03:10.165
But let's just take a look at the R-squared value we have here.

00:03:10.164 --> 00:03:15.870
So, for this very simple model that became down on our whole dataset,

00:03:15.870 --> 00:03:21.330
we have an R-squared of about 0.482.

00:03:21.330 --> 00:03:23.840
That's not really great, but we haven't done

00:03:23.840 --> 00:03:27.740
too much work on feature engineering and perimeter tuning.

00:03:27.740 --> 00:03:29.675
So, as a first pass.

00:03:29.675 --> 00:03:31.600
Let's just stop it here.

