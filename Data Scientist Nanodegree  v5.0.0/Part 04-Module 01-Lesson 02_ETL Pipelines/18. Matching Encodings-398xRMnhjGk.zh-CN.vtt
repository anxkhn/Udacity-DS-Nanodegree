WEBVTT
Kind: captions
Language: zh-CN

00:00:04.580 --> 00:00:09.525
计算机如何存储字符 比如字母表中的这些字母呢

00:00:09.525 --> 00:00:12.960
计算机会把它们存储成二进制数字

00:00:12.960 --> 00:00:15.265
比如说 小写的a

00:00:15.265 --> 00:00:21.140
会被存成 01100001

00:00:21.140 --> 00:00:24.780
但计算机如何做到将字符 a 存成二进制数后

00:00:24.780 --> 00:00:29.045
还能将二进制数再转换成字符 a 呢

00:00:29.045 --> 00:00:32.925
计算机是通过字符编码（encodings）来实现转换的

00:00:32.924 --> 00:00:36.349
字符编码是一套字符和对应二进制数

00:00:36.350 --> 00:00:40.530
转换的规则

00:00:40.530 --> 00:00:42.570
在互联网建立之初

00:00:42.570 --> 00:00:44.869
英语是最常用的语言

00:00:44.869 --> 00:00:48.873
因此 那时最常用的字符编码就是 ASCII

00:00:48.874 --> 00:00:50.750
是针对英语设计的

00:00:50.750 --> 00:00:52.820
随着互联网推广开来

00:00:52.820 --> 00:00:56.014
ASCII 不能处理全世界的各种语言了

00:00:56.014 --> 00:01:01.160
很多语言有不止英语字母表中的 26 种字母

00:01:01.159 --> 00:01:05.569
一些亚洲的语言有几千个独立的字符

00:01:05.569 --> 00:01:10.579
一个叫做统一码联盟（Unicode Consortium）的国际组织制定了

00:01:10.579 --> 00:01:15.789
灵活且全面的几个字符编码集来涵盖全世界的所有语言

00:01:15.790 --> 00:01:20.425
大多数你遇到的数据都是用他们的字符编码进行编码的

00:01:20.424 --> 00:01:23.284
尤其是 UTF-8 就是其中之一

00:01:23.284 --> 00:01:30.049
但是 你也会遇到用其他字符编码集 如GB2312 编码的数据集

00:01:30.049 --> 00:01:32.108
这是中文简化字的字符编码集

00:01:32.108 --> 00:01:36.504
还有 latin-1 这是给含拉丁字母的语言使用的

00:01:36.504 --> 00:01:39.859
问题来了 除非有人告诉你数据集的字符编码是什么

00:01:39.859 --> 00:01:43.429
不然分辨字符编码并不轻松

00:01:43.430 --> 00:01:47.495
这是下一个编程练习要做的

00:01:47.495 --> 00:01:51.170
我们提供了一个未知字符编码的数据集

00:01:51.170 --> 00:01:54.924
你要找出它使用的是什么编码系统

00:01:54.924 --> 00:01:57.390
看起来是我在故意刁难

00:01:57.390 --> 00:02:01.265
但找出字符编码是一个现实中经常遇到的问题

00:02:01.265 --> 00:02:07.064
你会发现 如果不知道字符编码 就无法读取 CSV 文件

00:02:07.064 --> 00:02:10.294
在练习中 你将使用 pandas 库

00:02:10.294 --> 00:02:14.299
还有字符编码集的列表 这个列表在 Python 安装时就已装好

00:02:14.300 --> 00:02:18.000
查看下一部分的课程 开始动手吧

