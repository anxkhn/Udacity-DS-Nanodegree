WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.149
In this last exercise,

00:00:02.149 --> 00:00:05.410
you're going to write code for a full ETL pipeline.

00:00:05.410 --> 00:00:08.660
I wanted to walk you through the Jupyter notebook,

00:00:08.660 --> 00:00:10.570
so that you have a better sense of what

00:00:10.570 --> 00:00:13.755
all the code is doing and what you need to fill out.

00:00:13.755 --> 00:00:19.914
Here, this first cell connects to a SQLite database called worldbank.db,

00:00:19.914 --> 00:00:25.964
and creates a table that is going to hold gdp data.

00:00:25.964 --> 00:00:31.774
You do not need to do anything in this code other than execute the cell.

00:00:31.774 --> 00:00:35.085
In the lower portion of the ETL pipeline,

00:00:35.085 --> 00:00:38.840
this is the table where you're going to end up loading your data.

00:00:38.840 --> 00:00:42.965
The second cell, has a function called extract line.

00:00:42.965 --> 00:00:46.020
You don't need to do anything in this code cell either,

00:00:46.020 --> 00:00:48.215
besides executing the cell.

00:00:48.215 --> 00:00:51.820
This function is a Python generator.

00:00:51.820 --> 00:00:54.649
You don't necessarily need to understand how

00:00:54.649 --> 00:00:58.129
this generator works in order to complete the exercise,

00:00:58.130 --> 00:01:01.040
but it'll be helpful if you open

00:01:01.039 --> 00:01:04.709
the link that's in the comments and read a little bit about them.

00:01:04.709 --> 00:01:09.259
Essentially, a generator is like a normal function except,

00:01:09.260 --> 00:01:11.285
instead of a return statement,

00:01:11.284 --> 00:01:14.144
a generator has a yield statement.

00:01:14.144 --> 00:01:19.004
Generators allow you to use functions in a for-loop.

00:01:19.004 --> 00:01:24.724
In essence, this function will allow you to read in a data file one line at a time,

00:01:24.724 --> 00:01:28.304
run a transformation on that one row data,

00:01:28.305 --> 00:01:34.205
load the data, and then move on to the next row in the file to repeat the process.

00:01:34.204 --> 00:01:38.459
The third cell, is where you're going to start writing code.

00:01:38.459 --> 00:01:43.674
This cell contains a function called transform indicator data.

00:01:43.674 --> 00:01:46.819
This function receives a line from

00:01:46.819 --> 00:01:52.579
a csv file and transforms the data in preparation for a load step.

00:01:52.579 --> 00:01:57.640
Keep in mind what a row of data looks like in this csv file.

00:01:57.640 --> 00:01:59.644
It has a country name,

00:01:59.644 --> 00:02:01.859
and an indicator variable,

00:02:01.859 --> 00:02:03.995
and then a column for each year.

00:02:03.995 --> 00:02:09.259
This is the same gdp data you've been working with earlier in the exercises.

00:02:09.259 --> 00:02:14.474
Your task will be to transform this data into a list of lists,

00:02:14.474 --> 00:02:17.368
where each entry has the country,

00:02:17.368 --> 00:02:22.099
country abbreviation, year, and the value.

00:02:22.099 --> 00:02:27.650
The fourth cell, contains a function called load indicator data,

00:02:27.650 --> 00:02:30.844
and you'll have to fill out code in this function as well.

00:02:30.844 --> 00:02:38.500
This function loads the transform data into the gdp table in the worldbank.db database.

00:02:38.500 --> 00:02:39.974
In this part of the code,

00:02:39.974 --> 00:02:45.585
you're going to prepare a SQL query that will load each entry into the database.

00:02:45.585 --> 00:02:49.064
The fifth cell runs the ETL pipeline.

00:02:49.064 --> 00:02:54.125
You don't actually need to do anything here other than run the code but,

00:02:54.125 --> 00:02:57.469
please read through the code to understand what it's doing.

00:02:57.469 --> 00:02:59.090
This code is using

00:02:59.090 --> 00:03:04.094
the extract lines generator that was loaded earlier in the Jupyter notebook.

00:03:04.094 --> 00:03:07.219
The sixth cell, runs a query against

00:03:07.219 --> 00:03:10.465
the database to make sure everything worked correctly.

00:03:10.465 --> 00:03:16.965
All you need to do here is run the code and make sure that the output makes sense.

00:03:16.965 --> 00:03:19.278
Just as a reminder,

00:03:19.278 --> 00:03:24.169
you only need to modify the third and fourth cells in this Jupyter notebook.

00:03:24.169 --> 00:03:27.069
The other cells you just need to execute.

